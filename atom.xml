<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[AwAlog]]></title>
  <link href="http://blog.awairo.net/atom.xml" rel="self"/>
  <link href="http://blog.awairo.net/"/>
  <updated>2014-01-02T11:45:28+09:00</updated>
  <id>http://blog.awairo.net/</id>
  <author>
    <name><![CDATA[alalwww]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ちゃちゃっとマイクラMOD開発環境をつくる(2)]]></title>
    <link href="http://blog.awairo.net/blog/2014/01/02/shortcut-of-making-workspace-for-mc-modding2/"/>
    <updated>2014-01-02T11:45:00+09:00</updated>
    <id>http://blog.awairo.net/blog/2014/01/02/shortcut-of-making-workspace-for-mc-modding2</id>
    <content type="html"><![CDATA[<p>MinecraftのModding環境の構築手順についてのメモ。</p>

<p>後編的なやつで、Forgeを導入してリリースファイル作成まで。</p>

<!--more-->


<p>Eclipseの準備などは1つ前の記事を参照してください。</p>

<h1>対象</h1>

<ul>
<li>Javaで開発ができる</li>
<li>IDE(Eclipse)が使える</li>
<li>Google先生と仲がいい</li>
</ul>


<p>あと、Gitについても少しだけ書いています。</p>

<h1>準備するもの</h1>

<ul>
<li><a href="http://blog.awairo.net/blog/2014/01/02/shortcut-of-making-workspace-for-mc-modding1">EclipseとJDK</a></li>
<li>MnecraftForgeのsrc版(開発用)</li>
</ul>


<h2>やだやだEclipseやだIntelliJ IDEA使いたい</h2>

<p>開発用ワークスペースを作成後、<code>gradlew idea</code>コマンドでそれ用の開発環境が生成されます。あとはインポートして使ってください。起動構成などは自分で作成する必要がありますが、<a href="http://goo.gl/ZrMEuZ">検索すれば沢山情報は見つかります</a>。</p>

<p>それか、最近IDEAわいわいしていた <a href="http://nk0t.hatenablog.com/entry/2013/12/01/142608" title="ﾝｺﾂﾁｬﾝ">この</a> <a href="http://reginn666.hatenablog.com/entry/2013/12/25/031356" title="ｸﾏｰ">あたり</a> を見たり、チュートリアル作成の進捗確認をしてきて、どうぞ。</p>

<h2>GradleIDEは要らないの？</h2>

<p>リリースファイル生成や、ライブラリやForgeの更新時に、コマンドプロンプトでの操作が殆ど不要になるので、あったほうが便利です。ですが、使い方の日本語情報がまだ少ないようなのと、自分自身、説明書けるほど使いこなせていないので、今回は説明を端折りました。使えるなら導入をおすすめします。マーケットプレイスからインストールできるので、導入自体は簡単です。</p>

<p>プラグインをインストールしたら、Eclipse上でプロジェクトを右クリックし、「構成」→「Convert to Gradle Project」でプロジェクト構成をGradleプロジェクトにできます。</p>

<p>インストール直後のままだと、JDKがみつからなかったり、日本語を含むソースのコンパイルで文字コードが原因で失敗する事があります。その場合、build.gradleを修正したり、Eclipseの設定からJDKの指定や、JVM引数を足してあげれば、Eclipse上からビルドしてくれるようになります。</p>

<p>build.gradleを更新して保存するだけで、自動で依存関係が解決されるのは、ちょっとワクワクする感じでした。(maven未経験)</p>

<ul>
<li>手前味噌な参考情報

<ul>
<li><a href="https://twitter.com/alalwww/status/411868768550137856">https://twitter.com/alalwww/status/411868768550137856</a></li>
<li><a href="https://twitter.com/alalwww/status/411868963593670656">https://twitter.com/alalwww/status/411868963593670656</a></li>
<li><a href="https://twitter.com/alalwww/status/411871400035504128">https://twitter.com/alalwww/status/411871400035504128</a></li>
</ul>
</li>
</ul>


<h1>Forgeのインストール</h1>

<p>以下の順で、簡単に解説します</p>

<ol>
<li>Forgeのファイルを任意のフォルダーに配置</li>
<li>コマンドプロンプトからGradleを実行しEclipse用の環境を生成</li>
<li>EclipseでインポートしてMOD開発を行う</li>
<li>デバッグ起動してみる</li>
</ol>


<h2>1. Forgeのファイルを任意のフォルダーに配置</h2>

<p>好きなフォルダーにForgeのsrc版のZIPファイルを展開します。</p>

<p>Javaはファイル名が冗長になりやすいため、ドライブ直下など、あまり階層の深くない場所に配置するのをおすすめします。</p>

<p>今回は、Fドライブの直下にMod用フォルダーを作成し、その下に対象Modの開発環境を作成しました。
<img src="http://blog.awairo.net/images/posts/2014/01/02/shortcut-of-making-workspace-for-mc-modding2/1_unzip.png" title="画像から生み出される安心感" alt="ZIP展開直後のフォルダーのスクリーンショット" /></p>

<p>なお、ライセンスやクレジット、changelogは今後必要としないファイルなので、削除してOKです。</p>

<h2>2. コマンドプロンプトからGradleを実行しEclipse用の環境を生成</h2>

<p>以下、<code>F:\mod\TestMod</code>に展開したものとし、説明していきます。</p>

<p>コマンドプロンプトを開いて、上記のフォルダーに移動します。</p>

<pre><code>Microsoft Windows [Version 6.1.7601]
Copyright (c) 2009 Microsoft Corporation.  All rights reserved.

C:\Users\username&gt;f:

F:\&gt;cd mod\TestMod

F:\mod\TestMod&gt;
</code></pre>

<p><code>gradlew eclipse</code>コマンドを実行し、Eclipse用の開発環境を準備します。</p>

<pre><code>F:\mod\TestMod&gt;gradlew eclipse
****************************
 Powered By MCP:
 http://mcp.ocean-labs.de/
 Searge, ProfMobius, Fesh0r,
 R4wk, ZeuX, IngisKahn
 MCP Data version : unknown
****************************

(以下必要なファイルがなければダウンロードが行われ、必要なファイルが生成され、開発環境が構築される)

BUILD SUCCESSFUL

Total time: xx.xxx secs
F:\mod\TestMod&gt;
</code></pre>

<p>ForgeのGitHubのREADMEや、その他環境構築の解説記事などでは、最初に<code>setupDevWorkspace</code>タスクを実行する手順として書かれて居ることが多いです。</p>

<p>しかし実は<code>setupDevWorkspace</code>タスクは、<code>eclipse</code>タスクの依存タスクなので、明示的に指定しなくても勝手に実行されます。なので個別に実行する必要はなかったりします。(でも<code>idea</code>タスクは依存してないみたいなので、両方実行しないとダメっぽい。なんで統一されてないんだろう…。)</p>

<p>フォルダーの中は、こんな感じになりました。</p>

<p><img src="http://blog.awairo.net/images/posts/2014/01/02/shortcut-of-making-workspace-for-mc-modding2/2_setup.png" alt="gradleコマンド実行後のフォルダーのスクリーンショット" /></p>

<p>増えたファイルやフォルダーは、Gradle(ForgeGradle)によって自動生成されたものです。また、元からあったeclipseフォルダーの中に、assetsフォルダーなんかも生成されています。</p>

<p>これで、Eclipseを使った開発用の環境が生成されました。</p>

<h3>ついでにソース管理もやっちゃう？</h3>

<p>ソース管理を行うのであれば、このあたりで一度コミットをしておくとよいかもしれません。何も変更してない状態のコミットがあれば、途中でなにかやらかしても、最初まで立ち戻るときに役立ちます。</p>

<p>ここでは、Gitの導入方法については特に説明しませんが、ソース管理にGitを使う場合を、簡単に紹介しておきます。Guiツールを使ってやったほうが楽ちんですが、スクリーンショットの準備が面倒だったので、コマンドプロンプトからやっちゃいます。</p>

<p>また、Gitリポジトリを作成したあとに、Eclipseでプロジェクトを右クリックし、「チーム」→「プロジェクトの共用」から、EclipseでGitに接続できるように設定出来ます。こうすることで、変更したファイルがわかるようになり、Eclipse上からコミットなども行えるようになります。</p>

<h4>1. リポジトリ作成</h4>

<pre><code>F:\mod\TestMod&gt;cd ..

F:\mod&gt;git init TestMod
Initialized empty Git repository in F:/mod/TestMod/.git/
</code></pre>

<h4>2. コミット対象を確認してみる。</h4>

<pre><code>F:\mod\TestMod&gt;git status
# On branch master
#
# Initial commit
#
# Untracked files:
#   (use "git add &lt;file&gt;..." to include in what will be committed)
#
#       .classpath
#       .gitignore
#       .gradle/
#       .project
#       .settings/
#       build.gradle
#       build/
#       eclipse/
#       gradle/
#       gradlew
#       gradlew.bat
#       src/
nothing added to commit but untracked files present (use "git add" to track)
</code></pre>

<p>管理不要な、自動生成されたファイルなどローカル開発環境固有のものがいっぱいあります。</p>

<p>リポジトリを外部公開しないのであれば、ローカル依存の設定ファイルなどもコミットしてしまったほうが、変更の追跡や設定のロールバックなどもしやすく、便利な場合もあります。しかし、GitHubなどにPushし外部公開するのであれば、ローカル依存なファイルはコミットしないほうがいいでしょう。</p>

<h4>3. 余計な物が多いので無視設定を追加</h4>

<p>外部後悔する場合を想定し、.gitignoreファイルを作成して、無視対象を追加していきます。</p>

<pre><code>F:\mod&gt;cd TestMod
F:\mod\TestMod&gt;echo /.classpath&gt;&gt;.gitignore
F:\mod\TestMod&gt;echo /.project&gt;&gt;.gitignore
F:\mod\TestMod&gt;echo /.settings/&gt;&gt;.gitignore
F:\mod\TestMod&gt;echo /.gradle/&gt;&gt;.gitignore
F:\mod\TestMod&gt;echo /bin/&gt;&gt;.gitignore
F:\mod\TestMod&gt;echo /build/&gt;&gt;.gitignore
F:\mod\TestMod&gt;echo /eclipse/&gt;&gt;.gitignore
</code></pre>

<p>ものぐさなので、コマンドプロンプトから直接書き出していきました。</p>

<p>&ldquo;.classpath&#8221;、&rdquo;.project&#8221;、および&#8221;.settings/&ldquo;フォルダーは、eclipse用のプロジェクト設定ファイル、または設定ファイル用のフォルダーです。いずれも自分専用の開発環境用の設定なので、このあたりは個々の開発者が管理すべき内容であり、公開予定のリポジトリにはコミットするべきではありません。</p>

<p>&ldquo;.gradle/&#8221;フォルダーは名前の通りgradle用で、一時ファイルやログなどが出力されます。これもバージョン管理を行うべきではないため、無視対象に含めます。</p>

<p>&ldquo;bin/&#8221;フォルダーは、今はフォルダーも作成されていませんが、Eclipseで自動ビルドを行った際にクラスファイルが生成される場所になります。クラスファイルはソースがあれば生成でき、バージョン管理対象ではありません。</p>

<p>&ldquo;build/&#8221;フォルダーは、Gradleでビルドを行う際の、一時ファイルや生成したファイルの出力先になっています。</p>

<p>&ldquo;eclipse/&#8221;フォルダーは、ダウンロードしてきたassetsや、Eclipse上でサーバーやクライアントを起動した際の、セーブデータファイルなどが生成される場所です。</p>

<p>.gitignoreファイルが生成できたら、もう一度確認。</p>

<pre><code>F:\mod\TestMod&gt;git status
# On branch master
#
# Initial commit
#
# Untracked files:
#   (use "git add &lt;file&gt;..." to include in what will be committed)
#
#       .gitignore
#       build.gradle
#       gradle/
#       gradlew
#       gradlew.bat
#       src/
nothing added to commit but untracked files present (use "git add" to track)
</code></pre>

<p>これで必要なファイルだけが変更対象になりました。</p>

<h4>4. ステージに追加しコミット</h4>

<p>さくっとステージングしてコミット。</p>

<pre><code>F:\mod\TestMod&gt;git add .

F:\mod\TestMod&gt;git commit -m "initial commit"
[master (root-commit) 42591b1] initial commit
 10 files changed, 904 insertions(+)
 create mode 100644 .gitignore
 create mode 100644 build.gradle
 create mode 100644 gradle/wrapper/gradle-wrapper.jar
 create mode 100644 gradle/wrapper/gradle-wrapper.properties
 create mode 100644 gradlew
 create mode 100644 gradlew.bat
 create mode 100644 src/main/java/com/example/examplemod/ExampleMod.java
 create mode 100644 src/main/resources/mcmod.info
</code></pre>

<p>これで、最初のコミットが作成されました。</p>

<p>以降、上記ファイルが変更されたか、新しいファイルが追加された場合、差分などが簡単に追いかけれるようになります。</p>

<p>※サンプルModは、あとでどのみち削除するので、コミットする意味はないです。<code>git add ～</code>で対象を選んでステージングするか、全部追加したあと<code>git rm --cached ～</code>などでステージングから削除してから、コミットした方がいいかもしれません。</p>

<h2>3. EclipseでインポートしてMOD開発を行う</h2>

<p>ここからは、Eclipseでの作業です。</p>

<p>個人的にはこの方法は好みでないので、自前でワークスペースを用意し、起動構成などを作成するつもりですが、簡単な導入ってことで、今回はForgeについているワークスペースを使っていきます。</p>

<p>Eclipseを起動し、<code>F:\mod\TestMod\eclipse</code>フォルダーをワークスペースに指定します。</p>

<p><img src="http://blog.awairo.net/images/posts/2014/01/02/shortcut-of-making-workspace-for-mc-modding2/3-1_select_workspace.png" alt="ワークスペース選択ダイアログ" /></p>

<p>ワークスペース設定は新規作成になるため、これまで開発に使っていたワークスペース設定がある場合、諸々の再設定が必要となります。(エディタ背景を黒にしたりとか！)</p>

<p>一部の設定は、設定エクスポート→インポートで引き継いだり、パースペクティブの設定などワークスペース切り替え時にコピーし持ち越すことも出来ますが、できないものは手動で設定するか、ワークスペースの<code>.metadata/</code>フォルダー以下の設定ファイルを、手作業でコピーすることで引き継げます。ただしコピーは、設定値をみて必要なファイルのコピーや設定値のマージを行う必要があり、項目多数で説明のしようもないので、詳細は省略します。多分、よくわからなければ、一から再設定したほうが楽です。</p>

<p>Eclipseが起動したら、こんなかんじの表示です。ただし、ビューやツールバーなど、パースペクティブ内の状態は、個々の環境で異なるかと思います。</p>

<p><img src="http://blog.awairo.net/images/posts/2014/01/02/shortcut-of-making-workspace-for-mc-modding2/3-2_eclipse.png" alt="Forgeのワークスペースに切り替えた直後のEclipse" />
※この画像では、パースペクティブをJavaに切り替えてあります。</p>

<p>あとは、プロジェクト名&#8221;Minecraft&#8221;を、Mod名など任意の名前に変更し、ソースフォルダーの、サンプルModを参考に、自分独自のModを作成していくだけです。(サンプルModは不要になったら、パッケージごと削除しちゃてOK)</p>

<p>なお、ソースコード内に日本語を含める場合は、文字コードをUTF-8にするようにしてください。MS932で突き進みたい場合、ビルド時の文字コード問題を頑張って解決する必要があります。</p>

<p>また、おそらくFMLの修正漏れだと思いますが、Forge977付属のワークスペースを使うと、以下の不要なリンクフォルダーが生成されてしまいました。</p>

<ul>
<li>common</li>
<li>jars</li>
<li>lib</li>
</ul>


<p>これらのリンクフォルダーはに参照されず、リンク先も見つからない状態になっているため、削除してしまって問題はありません。(タブン)</p>

<h2>4. デバッグ起動してみる</h2>

<p>テスト実行は、Eclipse上の緑色の三角のボタン、またはデバッグ実行用の虫のマークのボタンから行えます。</p>

<p>なお、ForgeGradle対応後のForgeにも、マイクラを起動できるまでのワークスペース設定が付属しています。</p>

<p><img src="http://blog.awairo.net/images/posts/2014/01/02/shortcut-of-making-workspace-for-mc-modding2/4-1_launch-configuration.png" alt="Eclipseの起動構成" /></p>

<p>もちろん自前で起動構成の作成を行ってもいいのですが、その手順はあちこちで紹介されているみたいなので、省略します。また、ここで使用されている起動構成を真似れば、自分で作成することも出来ます。</p>

<h3>クライアントの起動</h3>

<p>上記からClientを選択するだけです。</p>

<p>参考までに、起動構成(上記画像の「実行の構成」または隣のボタンの「デバッグの構成」)のキャプチャーを紹介しておきます。</p>

<p><img src="http://blog.awairo.net/images/posts/2014/01/02/shortcut-of-making-workspace-for-mc-modding2/4-2_launch_client_mein.png" alt="実行の構成ウィンドウでClientの構成のメインタブ内容" /></p>

<p><img src="http://blog.awairo.net/images/posts/2014/01/02/shortcut-of-making-workspace-for-mc-modding2/4-3_launch_client_args.png" alt="実行の構成ウィンドウでClientの構成の引数タブ内容" /></p>

<p>なお、クライアントの生成するセーブデータなどのファイル群は、全てeclipseフォルダー直下にぶちまけられてしまいます。</p>

<p>2つ目の画像の一番した、「引数」タブの、「作業ディレクトリー」を任意の場所に修正することで、出力されるファイルの場所は変更できます。ただし、assetsへの参照ができなくなり、正しく動作しなくなる可能性があるため、おすすめはしません。</p>

<p>assetsもきちんと動かせば、タブンいけるんじゃないかな？(試してはないですが、<a href="https://github.com/HeisenBugDev/QuantumCraft/blob/develop/build.gradle">おそらくrunフォルダーに変更してそうなModのbuild.gradleを見た感じ</a>、build.gradleでassetDirを変えれば、いけそう…？)</p>

<p>なお、同じ名前の起動構成が複数表示されていますが、どちらも同じファイルを指しているので、気にしなくてOKです。これは、現状とプロジェクトの中にワークスペースが存在する、不思議な構成になってしまっているため、Eclipseがeclipse/.metadata/フォルダーの中にある、ローカルファイルに保管されている起動構成の設定ファイルの実態を、見つけてしまっているために起きているのだと思われます。</p>

<p>なので、ローカルファイル保管の起動構成を修正した場合、構成ウィンドウを開き直すと、ファイルを参照している起動構成も更新されます。</p>

<p>※ただし、逆は開きなおしても更新されていませんでした。起動構成を修正する場合は、「共通」タブの「保管」先が、ローカルファイルになっているものを修正したほうが、よさそうです。</p>

<p>※あと、自環境では起動中に何かエラーメッセージが出ていました。起動はでき、Modもロードされてるっぽいので、とりあえず忘れることにしました。</p>

<h3>サーバーの起動</h3>

<p>クライアントと同じですが、初回のみ、一度起動したあとに生成されたサーバー設定を変更し、起動し直す必要があります。</p>

<p>クライアントと同様に、サーバーの起動時にも、eclipseフォルダー以下に、サーバーの設定ファイル群がぶちまけられます。そのなかにあるserver.propertiesファイルで、<code>online-mode</code>の値が、デフォルト値の<code>true</code>(有効)になっているので、ここを<code>false</code>(無効)に設定してください。</p>

<p><code>online-mode</code>を無効にしたあと、Eclipseからサーバーを起動して、クライアントを実行し、<code>localhost</code>に接続を行うことでマルチプレイでのテストも行えます。</p>

<p>起動構成はこんなかんじになっています。</p>

<p><img src="http://blog.awairo.net/images/posts/2014/01/02/shortcut-of-making-workspace-for-mc-modding2/4-4_launch_server_main.png" alt="実行の構成ウィンドウでServerの構成のメインタブ内容" /></p>

<p><img src="http://blog.awairo.net/images/posts/2014/01/02/shortcut-of-making-workspace-for-mc-modding2/4-5_launch_server_args.png" alt="実行の構成ウィンドウでServerの構成の引数タブ内容" /></p>

<h1>リリースファイル作成</h1>

<ol>
<li>自分のMod用に、build.gradleファイルを編集する。</li>
<li>gradlewでビルドタスクを実行する。</li>
</ol>


<h2>build.gradleの編集</h2>

<p>サンプルModをそのまま残しているため、以下のように修正してみました。</p>

<pre><code>--- a/build.gradle
+++ b/build.gradle
@@ -18,8 +18,8 @@
 buildscript {
 apply plugin: 'forge'

 version = "1.0"
-group= "com.yourname.modid"
-archivesBaseName = "modid"
+group= "com.example.examplemod"
+archivesBaseName = "examplemod"

 minecraft {
     version = "1.7.2-10.12.0.977"
</code></pre>

<p>groupには通常Modのルートパッケージを、archivesBaseNameにはリリースファイルにつけるファイル名の接頭辞を設定します。</p>

<p>GroupIDの詳細については、<a href="http://maven.apache.org/guides/mini/guide-naming-conventions.html">build.gradleにコメントで記載されている、Mavenのガイド</a>や、Mavenについて説明しているサイトなどを参照してください。</p>

<h2>Gladleラッパーの設定を修正</h2>

<p>Javaのソースコードに日本語が含まれる場合、エンコード設定を変更する必要が有るかもしれません。デフォルトのエンコードは環境のデフォルトとなっており、Windows環境ではMS932(Shift_JIS互換のエンコード)になってしまいます。</p>

<h3>「エラー: この文字は、エンコーディングMS932にマップできません」</h3>

<p>このメッセージが出る場合、build.gradleに以下を追加すると、Javaのコンパイルがutf-8になり、エラーを回避できるようになります。ただし、JavaのソースコードがUTF-8でないといけません。</p>

<pre><code>[compileJava, compileTestJava].each{ it.options.encoding = 'UTF-8' }
</code></pre>

<h3>build.gradleに日本語が含まれてるとタスクが実行できなくなった</h3>

<p>日本語を含む場合、その前後行が読めなくなったりして、正しくタスクが実行できなくなったり、ビルドスクリプト自体が読めなくなったりします。</p>

<p>もし日本語を含めるのであれば、build.gradleをUTF-8で保存し、gradlew.batの<code>DEFAULT_JVM_OPTS</code>に、<code>-Dfile.encoding=UTF-8</code>を追加することで回避できます。</p>

<pre><code>diff --git a/gradlew.bat b/gradlew.bat
index aec9973..88f1f51 100644
--- a/gradlew.bat
+++ b/gradlew.bat
@@ -9,7 +9,7 @@
 if "%OS%"=="Windows_NT" setlocal

 @rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
-set DEFAULT_JVM_OPTS=
+set DEFAULT_JVM_OPTS=-Dfile.encoding=UTF-8

 set DIRNAME=%~dp0
 if "%DIRNAME%" == "" set DIRNAME=.
</code></pre>

<p>gradlewファイルは、Windows環境では影響ありませんが、リポジトリを公開する予定があるなら、あわせて修正しておくほうがいいかもしれません。</p>

<h2>ビルドタスクの実行</h2>

<p>コマンドプロンプトから、<code>build</code>タスクを実行してください。</p>

<pre><code>F:\mod\TestMod&gt;gradlew build
</code></pre>

<p>作成されたjarファイルは<code>build/libs</code>以下に、Jarファイルとして生成されます。(たぶん)</p>

<p>なお、2014/01/02の11時時点で、Forge977および982、ForgeGradle1.1のSNAPSHOTな環境で試してみましたが、再難読化(reobf)のタスクで失敗してビルドが成功しませんでした。ForgeやFGのIssue、Forgeのフォーラムでは解決済みという回答が見つかるのですが、上手く行きません。</p>

<p>後日ちゃんと動作したらこの部分は書きなおそうかとおもいます。</p>

<h1>Forgeの更新</h1>

<p>build.gradleを任意のテキストエディタ開いてください。</p>

<p>以下の箇所を、更新したいForgeのバージョンに修正します。</p>

<pre><code> minecraft {
     version = "1.7.2-10.12.0.982"
}
</code></pre>

<p>build.gradleを修正したら、再度<code>gradlew eclipse</code>を実行して、.classpathなどを更新し、最新の状態をプロジェクトに反映させてください。</p>

<p>これマジで神ですね。٩(๑╹ヮ╹)۶</p>

<hr />

<hr />

<p>( っ&#8217;ω&#8217;c)ﾞ</p>

<h1>あとがき</h1>

<p>また余計な情報足しすぎて長文になってしまった。ビルドこけるのにハマってめっちゃ時間もかかったし。成長ない氏…。</p>

<p>上記とは関係ない、めっちゃ余談だけど、環境構築中にEclipseプラグインLimyのライセンスがGPLになってるのに気づいた。EPLとGPLって非互換だから、プラグインをGPLで公開してもEclipseじゃ使えないんじゃ…って思ったけれど、<a href="http://nippondanji.blogspot.jp/2010/05/eclipsegpl.html">例外規定</a>ってのがあるみたい。</p>

<p>Limyがそうなのかはわからないけど、なるほどそういうのもあるのかーって勉強になったので、カテゴリ外だけどついでにメモ。(･ω･)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ちゃちゃっとマイクラMOD開発環境をつくる(1)]]></title>
    <link href="http://blog.awairo.net/blog/2014/01/02/shortcut-of-making-workspace-for-mc-modding1/"/>
    <updated>2014-01-02T02:25:00+09:00</updated>
    <id>http://blog.awairo.net/blog/2014/01/02/shortcut-of-making-workspace-for-mc-modding1</id>
    <content type="html"><![CDATA[<p>MinecraftのModding環境の構築手順についてのメモ。</p>

<p>前編的なやつで、主にEclipseについていろいろ。</p>

<!--more-->


<hr />

<p>もとは1記事で書いてたんですが、Eclipseについて長く書きすぎたので分割しました。</p>

<p>Forgeのインストール以降については次の記事になります。</p>

<h1>対象</h1>

<ul>
<li>Javaで開発ができる</li>
<li>IDE(Eclipse)が使える</li>
<li>Google先生と仲がいい</li>
</ul>


<h1>準備するもの</h1>

<ul>
<li>Java SE Development Kit(JDK) (Pleiadesのjava版のfullを使うならなくてもOK)</li>
<li>Eclipse (最低限JDTが入っていればOK)</li>
</ul>


<h1>JDKの準備</h1>

<ol>
<li><a href="http://www.oracle.com/technetwork/jp/java/javase/downloads/">Oracle</a>から任意のJDKをダウンロードする。</li>
<li>インストールする。</li>
<li>環境変数<code>JAVA_HOME</code>に、JDKへのパスを設定する。</li>
</ol>


<h2>どれをダウンロードすればいいの？</h2>

<p>この記事を書いている時点での最新はJava7のupdate45です。上記サイトからOracleの英語サイトに行き、JDKのダウンロードを選び、「Java SE Development Kit 7u45」の一番上のライセンスを確認したのち同意し、自分の環境用のJDKを選べばOK。Windowsの32bit版であればWindows x86、64Bit版であればx64を選びます。</p>

<p>ダウンロードが完了したら、実行してインストールします。環境設定を行う必要があるので、インストール先が何処になるかはちゃんと覚えて起きましょう。</p>

<p>注意するべき点は、JREではなくJDKをダウンロードする、ということくらいです。</p>

<p>ちなみに、JDKのインストーラーで追加されるJREは、インストールしなくても問題ないです。おそらく、自動更新で最新版になってるはずなので。</p>

<h2>Eclipse付属のを使うのでJDKインストールしないで進めたい。</h2>

<p>特に試してないので、動確はとってませんが、多分pleiades付属のJRE(JDKとかも同梱)を環境変数JAVA_HOMEに設定しておけば問題無いです。うろ覚えですが、たしかpleiades/java/jre7とかだった気がします。そのあたりのフォルダーのパスをJAVA_HOMEに設定すれば、多分いけます。</p>

<h2>環境変数の設定について</h2>

<p>のちの記事にでてくる、Gradleコマンドを実行するにあたり、<a href="http://gradle.monochromeroad.com/docs/userguide/installation.html">環境変数にJDKへのパス設定が必要</a>となります。環境変数の設定方法などは、<a href="http://goo.gl/orGSNA">この先生が詳しい</a>ので、どうしてもわからなければ聞いてください。</p>

<p>自分は、JAVA_HOMEにJDKを足して、パスに%JAVA_HOME%/binを足しています。ですが、JDKを頻繁に更新しなさそうであれば、パスへの追加はしないほうがいいかもしれません。(JDKはJREみたいな自動更新がないので、最新JREが参照されなくなるかもしれない)</p>

<p>なお、Gradleへのパス設定は、ForgeにGradleラッパーが付属しているので、特に行う必要はありません。そのため、事前にGradleのインストールも不要です。</p>

<h1>Eclipseの準備</h1>

<p>統合開発環境(IDE)にはEclipseを使用します。</p>

<p>Pleiades Java版 を使うケースと、Pleiades Platform版 を使うか、公式のEclipseを使う(日本語化しない)ケースについて、説明します。</p>

<h2>そもそもなぜPleiades？</h2>

<p>Eclipseは、日本語環境を用意するならPleiadesが手っ取り早いです。必要なプラグイン(や不要なプラグイン)を予め導入したうえに、初期設定を一部変更したオールインワンパッケージで配布されているため、とっかかりやすいです。</p>

<h2>Pleiades、沢山あるけどどれを選べばいいの？</h2>

<p>Java開発用か、Platformを選んでください。</p>

<p>Java開発用の場合は、Mod開発に不要なプラグインも多数導入されており、多機能すぎて意味不明なものがいっぱいあり、初心者は混乱しそうな感じだったりします。しかし、Platformの場合は、殆どプラグインが導入されていない状態なので、Java開発ツール(JDT)から全て自分で用意していく必要があり、やっぱり難易度は高いです。</p>

<p>(JavaSE用のPleiadesもあっていいと思うんだけどナァ…)</p>

<p>PleiadesのJavaであっても、TomcatLauncherを始め、いくつかの必要ないプラグインは削除が可能なので、Mod開発に不要なものを削除してから使えば、不要な設定やボタンがいくらか消せます。なので、こだわりがなければ、Java版を導入するほうがいいと思います。</p>

<p>また、さくっと消せないようになってるビルドインプラグインも、手動で頑張れば消せなくはないです。ですが、そこまでやるくらいなら、Platformに自分でJDTや必要なプラグインを導入した方が捗ると思うので、きっちりかっちり開発環境を整えたいのであれば、Platform版をおすすめしておきます。</p>

<p>もちろん、不要なプラグインが入っていて、いらないツールバーや設定があっても気にしないのであれば、Java版をそのまま使うこともできます。多くの人は、多分そうしている気がします。</p>

<p>もしあなたのコンピューターがロースペックであれば、Pleiades無しのEclipseを、選択肢に含めてもいいかもしれません。</p>

<p>Pleiadesは、比較的重たい処理を挟む(動的に日本語翻訳を行う)プラグインなので、ロースペック環境では、パフォーマンスに影響してくるかもしれません(比べた事はないです)。Pleiadesを使わない場合、日本語化されなくなり、JavaDocの日本語化などもなくなりますが、英語に抵抗がなければ、ありかも？</p>

<p>(静的ファイルによる部分的な日本語化方法もあるらしいですが、詳しく知らないので省略します)</p>

<h3>日本語化しない場合について補足</h3>

<p>Pleiadesの場合でも、dropinsフォルダーからPleiadesプラグイン本体を削除しちゃえば、日本語化されなくなります。また、eclipse.iniを編集し、一時的に無効化することもできるみたいです。公式のEclipseを落としてくる場合は、そこから英語と戦うことになるので、それが辛い場合はPleiadesを落としてきて、Pleiadesを削除して使う手もあります。やったことないですが。</p>

<h2>Pleiades Java版の導入手順</h2>

<ol>
<li>Pleiadesの4.3のJava版をダウンロード。</li>
<li>不要なdropinのプラグインを削除</li>
</ol>


<p>2はお好みで。</p>

<h3>Pleiadesダウンロード</h3>

<p><a href="http://mergedoc.sourceforge.jp/">mergedoc</a>からダウンロードしてきます。</p>

<p>32Bit版か64Bit版かは、自分のOSに合わせてください。Window環境であれば、ショートカット「<code>win</code>+<code>page break</code>(右上の方のキー)」か、コンピューター(もしくはマイコンピュータ)を右クリックし、プロパティを選び、「システムの種類」を確認すればわかります。</p>

<p>FullEditionとStandardEditionの違いは、いろいろおまけがついてくるかの違いです。差がわからない人はFullを選んで、いらないものは(Tomcatなど)削除しちゃえばOKです。</p>

<h3>削除してもよさそうなdropinプラグイン</h3>

<p>参考までに、私見と偏見だけで、Java版のプラグインのうち、Mod開発には要らなさそうなものをピックアップしていきます。</p>

<p>削除方法については、pleiadesのサイトのダウンロードのページの下のほうなんかを見てください。つっても、基本的にdropinsフォルダーから削除するだけですが。</p>

<p>MergeDoc(pleiades)だけは、eclipse.iniの修正も必要だと思うので、削除する場合は気を付けてください。</p>

<h4>AmaterasERD / AmaterasUML</h4>

<p>ER図作ったりUMLの図をGuiで作成する、設計関連のプラグイン。不要なら削除してOK。UMLツールとしては、できることが少なすぎて見た目もしょっぱい感じなので、おしごとでもこいつの出番はそんなに多くなかったりする。</p>

<h4>CheckStyle / FindBugs</h4>

<p>好ましくないコーディングスタイルや、バグの要因になりやすいコードをチェックし、指摘してくれる。おしごとコーダーにはほぼ必須プラグインだけれど、個人開発ならなくても問題はない。ただし、有効にすることで、勉強になる指摘を得れるかも知れない。不要であれば削除OK。</p>

<h4>DBViewer</h4>

<p>データベースビューワー。一般的なModdingには不要だと思うので削除してOK。</p>

<h4>EclipseRCP</h4>

<p>リッチクライアント(GUIでグイグイやる感じのアプリケーションとか)の開発用。ModはMinecraftの上で動くものが殆どなので、まず使わない。削除してダイジョブ。</p>

<h4>Limy</h4>

<p>特定パラメーターなどへのJavaDocの自動生成や、ヘッダーコメントの一括追加などができる。あってもなくてもって感じなのでお好みで。</p>

<h4>NTail</h4>

<p>ログファイルビューワー。<code>tail</code>コマンドっぽく巨大ファイルの末尾側だけ読んだりできる…んだと思う。Mod開発で巨大なログファイルを参照することはそうないので、削除OK。</p>

<h4>QuickJUnit</h4>

<p>単体テストツール(JUnit)を便利に使えるようにするプラグイン。テストクラス作成や、テストクラスと、テスト対象クラスの移動が簡単にでき、めっちゃ捗る神プラグイン。テストコードを書くことがあれば残しておくべきだけど、テストコードを書くことがないのなら、なくてもOK。</p>

<h4>Subversive / SubversiveJDT</h4>

<p>Subversion(バージョン管理システムの一種、通称SVN)用のプラグインの一つ。他のプラグインもあるので、入れ替える人もそこそこ居る。必要でなければ削除でOK</p>

<p>そもそも、昨今のバージョン管理の主流はGitになりつつある(偏見補正あり)ので、SVN自体おすすめはしないです。バージョン管理なんてよくわからないって人は、SVNも使わないだろうから、削除してOK。</p>

<h4>TomcatLauncher</h4>

<p>JavaでWebアプリケーションを作る場合によく利用される、Javaが動くWebサーバー「Tomcat」との連携をしやすくするプラグイン。Moddingでは間違いなく必要ないので削除でOK。</p>

<h2>Pleiades Platform版、または素のEclipseの導入</h2>

<p>PleiadesのPlatformは、PleiadesのJavaと同じ方法で入手できるので端折ります。</p>

<p>素のEclipseは、<a href="http://www.eclipse.org/">公式サイト</a>からダウンロードしてきます。この選択をする人なら事故解決できそうなので詳細は端折ります。</p>

<p>おわったおわった！</p>

<h3>JDTとマーケットプレイス・クライアントの導入</h3>

<p>そのままではJava開発ができないので、Java開発ツールプラグイン(JDT)を導入します。</p>

<p>また、プラグインを追加するなら、マーケットプレイスが使えないと始まらないです。最近のEclipseはデフォルトでクライアントが付属しなくなっているので、自分で導入します。ただし、Pleiadesならインストール済みだったと思います。</p>

<h4>手順</h4>

<p>英語でやる人ならわかると思うので、日本語で書きます。英語のままな場合は適せん読み替えてください。</p>

<ol>
<li>Eclipseを起動して、メニューからヘルプを選択。</li>
<li>新規ソフトウェアのインストール。</li>
<li>更新サイトでKeplerを選ぶ。※Eclipseのバージョンにあわせる</li>
<li>&ldquo;java&#8221;でフィルターし、プログラミング言語グループの「Eclipse Java 開発ツール」を選択。</li>
<li>&ldquo;market&#8221;でフィルターし、一般用ツールグループの「マーケットプレイス・クライアント」を選択。</li>
<li>次へを押して同意してインストール。</li>
</ol>


<p>終わったらEclipseを再起動、もしくは一旦終了してcleanを指定してから起動すれば、完了です。</p>

<h3>入れておいたほうがいいEclipseプラグインとかある？</h3>

<p>自分が導入してるやつから適当にピックアップしてみます。名前だけです。マーケットプレイスで検索すれば大抵はヒットするかと思います。</p>

<h4>Eclipse Color Theme</h4>

<p>テーマを選んで文字色や背景色を一括変更するプラグイン。プラグインで追加された専用エディタなんかだとテーマ変更だけじゃ変わらない場合もあるけど、黒背景勢には割と必須プラグイン。</p>

<h4>EGit</h4>

<p>GitのGUIクライアント。別のGitのGUIツールを使ってる場合でも、ソース管理にGitを使っているなら入れておいて損はないはず。Eclipse上から編集有無の確認をしたり、差分を確認したりできます。Pullのデフォルト動作の変更(rebaseにする)や、ローカル変更が有る際のpullが簡単で、一括Pushが使いやすいので、通常使いとしても割りとオススメです。(ただnon-ff margeができなかった気がします)</p>

<h4>Gradle Integration for Eclipse (GradleIDE)</h4>

<p>Forgeも対応したビルドツールGradleを、Eclipse上から便利に使えるようにするプラグイン。プロジェクト構成をGradleプロジェクトに変更し、ちゃんとプラグイン設定をしておけば、build.gradleを編集するだけで最新のForgeに更新したりできるのでおすすめ。</p>

<h4>GitHub Flavored Markdown viewer plugin</h4>

<p>GitHubで使うREADME.md用のGitHub風ビューワー。GitHubを使うならあって損はしないはず。GitHub風というかHTTP経由でスタイルシートとかもってきて表示してるみたい。使い方は、markdownファイルを開いた状態で、このプラグインで追加されたビューを開くだけ。ただし、関係ないときにビュー開くと、Eclipse側にエラーが出るのがちょっとうざい。</p>

<h4>Markdown Text Editor</h4>

<p>markdownエディタ。上と合わせてGitHubのREADME.mdを編集する用。</p>

<h4>YEdit</h4>

<p>YAMLエディタ。ちょいちょい出てくる設定ファイルなどで使えるので、いれといた。</p>

<h4>Eclipse Json Editor</h4>

<p>JSONエディタ。同上。</p>

<h4>プロパティエディタ</h4>

<p>日本語使う事考えるとやっぱ入れておいたほうがいいのかなと思って追加。プロパティファイル自体、最近のModdingじゃあまり使わないようになるかもしれないけれど。</p>

<h4>Groovy Eclipse Plugin</h4>

<p>build.gradle編集用に、Groovyに対応したエディターが欲しかったので追加。マーケットプレイスにEclipse4.3用が見当たらなかったので、手動で更新サイトを追加してインストールしました。</p>

<h4>Any Edit Tools</h4>

<p>キャメルケースとスネークケースの変換や、大文字小文字変換、改行コードの一括変換など、リファクタリング時や、コード整理などで便利な機能が用意されてるので、地味に有用。前は入れてあるだけって感じだったけど、最近機能に気づいてよく使うようになった。</p>

<h4>Quick JUnit</h4>

<p>JUnitを便利に使えるようにするプラグイン。Ctrl+9でテストターゲットクラスとテストクラスの移動が便利。Mod作成でテスト書くかはわからないけれど、後学のためって感じで。</p>

<h4>JMockit Eclipse Plug-in</h4>

<p>テスト用のモックツールJMockitを使いやすくするプラグイン。JMockit使う場合の起動構成の引数を書かなくてもよくなるので、Mockテストを書く機会があればかなり有用。テストコード自体を書くかは不明だけど、勉強のために少しやるかもなので、とりあえず入れといたって感じ。</p>

<h4>CheckStyle / FindBugs</h4>

<p>後学のためには、あっても損しないと思います。ニアミス回避にもなるかも。</p>

<h1>Eclipseの使い方わかんないよ！</h1>

<p>ぐぐって、どうぞ。</p>

<p>左側のパッケージエクスプローラーが、ファイルの一覧みたいなものです。ドットファイルなどは自動的にフィルターされ、ソースフォルダーなど、特別なフォルダーの表示方法が変わったりします。また、Eclipse内だけで有効な、シンボリックリンク(リンクフォルダー)を作成したりもできます。</p>

<p>プロジェクトエクスプローラーの場合も大体同じですが、表示内容が多少違います(違いは自分で感じて)。個人的にはパッケージエクスプローラーのほうが使いやすいと思うので、プロジェクトエクスプローラーは殆ど使ってないです。このビューが表示されていなければ、ウィンドウ→ビューの表示から追加してください。(その他のビューもここから追加が出来ます)</p>

<p>右上の方にあるのが、パースペクティブの切り替えボタンです。Java開発用、デバッグ用、リポジトリ管理用などがあり、切り替えて使います。パースペクティブを切り替えることで、ツールバーやビューを一括で変更できるので、シーンに合わせて使い分けをして行く感じです。プラグインや開発ツールが、デフォ設定としてパースペクティブを何パターンか用意してくれるので、自分で0から作ることはあんまりなく、元からあるのを自分の使いやすいようにカスタマイズして、使っていきます。</p>

<p>ツールバーの、緑色の三角ボタンと、緑色の虫のボタンが、実行とデバッグ実行のボタンです。作ったModを動作させる場合、ここから起動してあげます。起動構成を編集することで、複数のModを同時に動かしたりも出来ます。</p>

<p>デバッグ実行は、デバッガーを接続した状態で実行してくれます。デバッガーってのは、任意のコードがよばれた際に、処理を中断できる「ブレークポイント」を設定したり、ブレーク中に変数の値を直接書き換えたりすることができる、動作確認やテストを行うためのツールで、ぶっちゃけコレがないと開発なんぞやってられない、って代物です。</p>

<p>ものすごくさわりだけ説明すると、こんな感じです。あとは触りながら調べていってください。</p>

<p>IDEはできることが多いので、何ができるか覚えるまでが遠いですが、手作業でやるのは面倒だなって思うことの大半は、どうにかすればIDEで簡単に出来ます。例えば、クラス名の一括変更とか、参照元検索とか、親クラスや子クラスの一覧を表示したりとかは、簡単に行えます。また、そのままでは出来なくても、誰かが作ったプラグインがあったりもします。手探りしつつがんばってください。</p>

<hr />

<p>Eclipseプラグインはまだいろいろ試してないので、今後も追加や削除などをしていきながら検討していこうかと思ってます。</p>

<p>っていうかいい加減環境おちつけて開発にシフトしてかないと冬休み終わっちゃうネ。ﾔﾊﾞｰｲ。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OctopressのRakefileのカスタマイズ]]></title>
    <link href="http://blog.awairo.net/blog/2014/01/01/customizing-octopress-rakefile/"/>
    <updated>2014-01-01T22:27:00+09:00</updated>
    <id>http://blog.awairo.net/blog/2014/01/01/customizing-octopress-rakefile</id>
    <content type="html"><![CDATA[<p>記事が_posts直下に沢山できてくると邪魔なので、その対策。</p>

<!--more-->


<h1>Rakefileカスタマイズ(記事のディレクトリ分け)</h1>

<p>Octopressの使ってるJekyllの機能らしいですが、_posts以下にサブディレクトリがあっても再帰的に検索して、記事ファイルとして処理してくれるようです。</p>

<p>ただし、ファイル名が<code>yyyy-mm-dd-</code>で始まっていなければいけません。最初、どんなファイルでも行けるのかと思ってファイルのリネームまで行ったところ、記事が全滅してしばらくハマりました。</p>

<p>ともあれ、ディレクトリ分けて整理できるようなので、<code>rake new_post['title']</code>した時に、年月ディレクトリを掘って、そこに月ごとにぶちこんでしまうように、Rakefileを修正しました。</p>

<p>こういう機能もOctopress側に用意されてれば楽なんですけどね。</p>

<p>( っ&#8217;ω&#8217;c)ﾀﾞﾚｶPRﾀﾞｼﾃｸﾚﾅｲｶﾅ</p>

<h2>やったこと</h2>

<p>(ついでなので、他にも少し設定値などを修正しました。)</p>

<ul>
<li>markdownの拡張子を、&#8221;markdown&#8221;から&#8221;md&#8221;に変更。</li>
<li>記事の新規作成時、_posts以下にyyyy-mm形式のディレクトリを作成。</li>
<li>上記で作成したディレクトリに記事作成。</li>
<li>記事を作成した際に、記事用の画像ディレクトリも作成。</li>
</ul>


<p>それだけ。</p>

<h2>変更の差分</h2>

<div><script src='https://gist.github.com/8207758.js'></script>
<noscript><pre><code>diff --git a/Rakefile b/Rakefile
index c2f2a78..f9188c8 100644
--- a/Rakefile
+++ b/Rakefile
@@ -22,9 +22,10 @@ blog_index_dir  = 'source'    # directory for your blog's index page (if you put
 deploy_dir      = &quot;_deploy&quot;   # deploy directory (for Github pages deployment)
 stash_dir       = &quot;_stash&quot;    # directory to stash posts for speedy generation
 posts_dir       = &quot;_posts&quot;    # directory for blog files
+posts_images_dir= &quot;images/posts&quot;
 themes_dir      = &quot;.themes&quot;   # directory for blog files
-new_post_ext    = &quot;markdown&quot;  # default new post file extension when using the new_post task
-new_page_ext    = &quot;markdown&quot;  # default new page file extension when using the new_page task
+new_post_ext    = &quot;md&quot;  # default new post file extension when using the new_post task
+new_page_ext    = &quot;md&quot;  # default new page file extension when using the new_page task
 server_port     = &quot;4000&quot;      # port for preview server eg. localhost:4000


@@ -98,8 +99,12 @@ task :new_post, :title do |t, args|
     title = get_stdin(&quot;Enter a title for your post: &quot;)
   end
   raise &quot;### You haven't set anything up yet. First run `rake install` to set up an Octopress theme.&quot; unless File
-  mkdir_p &quot;#{source_dir}/#{posts_dir}&quot;
-  filename = &quot;#{source_dir}/#{posts_dir}/#{Time.now.strftime('%Y-%m-%d')}-#{title.to_url}.#{new_post_ext}&quot;
+  time_now = Time.now
+  post_dir_of_monthly = &quot;#{source_dir}/#{posts_dir}/#{time_now.strftime('%Y-%m')}&quot;
+  mkdir_p post_dir_of_monthly
+  # create dir of post's images
+  mkdir_p &quot;#{source_dir}/#{posts_images_dir}/#{time_now.strftime('%Y/%m/%d')}/#{title.to_url}&quot;
+  filename = &quot;#{post_dir_of_monthly}/#{time_now.strftime('%Y-%m-%d')}-#{title.to_url}.#{new_post_ext}&quot;
   if File.exist?(filename)
     abort(&quot;rake aborted!&quot;) if ask(&quot;#{filename} already exists. Do you want to overwrite?&quot;, ['y', 'n']) == 'n'
   end</code></pre></noscript></div>


<hr />

<p>画像のURL指定するのもめんどくさいので、そのうち記事に紐づくスクリプトみたいなの噛ますようにしないとかなー。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gravatarのプロフィールを表示するOctopressのサイドバー]]></title>
    <link href="http://blog.awairo.net/blog/2013/12/24/octopress-aside-of-getting-profile-from-gravatar/"/>
    <updated>2013-12-24T02:35:00+09:00</updated>
    <id>http://blog.awairo.net/blog/2013/12/24/octopress-aside-of-getting-profile-from-gravatar</id>
    <content type="html"><![CDATA[<p>つくりました。</p>

<!--more-->


<p>右のAuthorの画像を、Twitterのアイコンを直リンクで参照する、とてもお行儀の悪いものにしていたのですが、Twitterのアイコン画像を更新するとURL変わってしまうので、<a href="http://www.gravatar.com/">Gravatar</a>を参照するように変更してみました。</p>

<p>誰か作ってるだろうと思って、コピペ元を探してみたんですが、<a href="https://github.com/joet3ch/gravatar-octopress">見つけれたの</a>は、設定にメアドを書いたらハッシュ生成して画像を参照するもので、ちょっと思ってたのと違う感じがして、自作に至った感じです。</p>

<p>rubyコードを噛ましたりしてないので、メアドのMD5ハッシュの生成はできないですが。</p>

<h1>用意するもの</h1>

<ul>
<li>GitHubPagesとOctopressの環境</li>
<li>Gravatarアカウント(GitHubでアバター画像を変えてるなら作ってるはず)と、登録時のメアドのMD5ハッシュ</li>
</ul>


<h1>つくりかた</h1>

<p><a href="http://www.gravatar.com/site/implement/profiles/">GravatarがJSONでプロフィール情報を返すAPIを提供している</a>ので、それを使って情報を持ってきて、画面に反映します。</p>

<p>だけ。</p>

<p>具体的には、<a href="https://github.com/alalwww/gravatar-aside/blob/master/gravatar.html">こんなかんじ</a>。</p>

<p>てぬき。</p>

<h1>コピペ</h1>

<p><a href="https://github.com/alalwww/gravatar-aside">GitHubにリポジトリつくった</a>ので、使いたい人がいたらそこからもってってください。MITです。好きにしてください的な感じです。</p>

<p>pluginとか、カスタムasideも、テーマみたいにサブモジュールとしてcloneできるような感じだと、楽なのになー。</p>

<h2>つかいかた</h2>

<ol>
<li><code>gravatar.html</code>を<code>/path/to/octopress-repos/source/_includes/custom/asides/</code>にコピーする。</li>
<li><code>_config.yml</code>を開く。</li>
<li><code>default_asides</code>プロパティの好きな位置に<code>custom/asides/gravatar.html</code>を追加する。</li>
<li>サードパーティ設定のあたりに<code>gravatar_hash</code>プロパティを追加し、Gravatarに登録したEメールのMD5ハッシュを設定する。</li>
<li><code>rake gen_deploy</code>で公開しておしまい。</li>
</ol>


<p>_config.ymlはこんな感じのを足せばいいです</p>

<pre><code>default_asides: [..., custom/asides/gravatar.html, ...]

# Gravatar email hash
gravatar_hash: 0bc83cb571cd1c50ba6f3e8a78ef1346
</code></pre>

<p>※<code>0bc83cb571cd1c50ba6f3e8a78ef1346</code>は<code>myemailaddress@example.com</code>のhashです。</p>

<p>Gravatarのヘルプには、連携アプリ向けの<a href="http://www.gravatar.com/site/implement/hash/">md5ハッシュの生成方法とかも書いてありますが</a>、GitHubのアバター画像のURLとかからでも参照できるので、そっからコピペでOK。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Eclipse起動時に開くSTSのダッシュボードを無効化]]></title>
    <link href="http://blog.awairo.net/blog/2013/12/15/disable-spring-tool-suite-dashboard-on-eclipse-startup/"/>
    <updated>2013-12-15T02:43:00+09:00</updated>
    <id>http://blog.awairo.net/blog/2013/12/15/disable-spring-tool-suite-dashboard-on-eclipse-startup</id>
    <content type="html"><![CDATA[<p>STSのダッシュボードが起動時に開くの邪魔いのでメモ。</p>

<!--more-->


<h1>概要</h1>

<p><a href="http://shootingstar.fm/">星を投げつけるタイプのTwitterクライアント</a>ではなくて、<a href="http://spring.io/tools/sts">SpringToolSuite</a>です。
<img src="http://blog.awairo.net/images/posts/2013/12/15/disable-spring-tool-suite-dashboard-on-eclipse-startup/dashbard.png" title="これが起動時毎回でてくるのでちょっと邪魔に感じてた。" alt="ダッシュボードの画像" /></p>

<p>たしかGradleIDEインスコしたとき、Groovyエディタとかもあったほうがいいかなって、Groovyのプラグインを導入したのだけれど、そのときセットで要求されて導入したSTSが、Eclipseの起動時に毎回ダッシュボードを開いてくるので、ちょっと邪魔っぽい。</p>

<p>設定を探すのが面倒だったので<a href="http://goo.gl/kcpQOO">グーグル先生</a>にきいてみた。</p>

<p>一発目でHit。<a href="http://stackoverflow.com/questions/5158116/can-i-disable-the-dashboard-window-when-springsource-tool-suite-starts-up" title="ide - Can I disable the Dashboard window when SpringSource Tool Suite starts up? - Stack Overflow">StackOverflow</a>に書いてあった。備忘録を兼ねてメモ。</p>

<h1>手順</h1>

<p>以下はPleiadesで日本語化されたKepler(Eclipse4.3)での説明。</p>

<ol>
<li>メニューから「ウィンドウ」→「設定」で設定ウィンドウを開く。</li>
<li>「SpringSource」選択。</li>
<li>「Dashboard」選択。</li>
<li>「Show Dashboard On Startup」のチェックを外す。</li>
</ol>


<p><img src="http://blog.awairo.net/images/posts/2013/12/15/disable-spring-tool-suite-dashboard-on-eclipse-startup/preferences.png" alt="Eclipseの設定ウィンドウのスクリーンショット" /></p>

<p>おしまい♪</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ツイーヨボタン復活]]></title>
    <link href="http://blog.awairo.net/blog/2013/12/14/enable-tweet-button/"/>
    <updated>2013-12-14T14:43:00+09:00</updated>
    <id>http://blog.awairo.net/blog/2013/12/14/enable-tweet-button</id>
    <content type="html"><![CDATA[<p>需要ないと思うけど、設定忘れで消えてたので復活。</p>

<!--more-->


<h1>やったこと</h1>

<p>_config.ymlで有効にしただけ。</p>

<pre><code>twitter_tweet_button: true
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GitHub Pagesで独自ドメインを使う方法]]></title>
    <link href="http://blog.awairo.net/blog/2013/12/14/custom-domain-for-gh-pages/"/>
    <updated>2013-12-14T14:23:00+09:00</updated>
    <id>http://blog.awairo.net/blog/2013/12/14/custom-domain-for-gh-pages</id>
    <content type="html"><![CDATA[<p>ドメインの延長更新のついでに、<a href="http://pages.github.com/">GitHub Pages</a>のカスタムドメインの設定したのでメモ。</p>

<!--more-->


<p><a href="https://help.github.com/articles/setting-up-a-custom-domain-with-pages">公式に書いてある事</a>をそのまま実践するだけのコピペ記事。自分が<a href="http://www.value-domain.com/">VALUE-DOMAIN</a>使ってるので、そこで管理している人には少しだけ役に立てるかもしれない。</p>

<h1>目的</h1>

<ol>
<li><code>http://blog.awairo.net/</code>にアクセスしたら、このblogが表示される。</li>
<li><code>http://alalwww.github.io/</code>にアクセスしたら、<code>http://blog.awairo.net/</code>にリダイレクトされる。</li>
</ol>


<h1>手順</h1>

<p>前提として以下が必要。</p>

<ul>
<li>自分で管理している(DNSの設定がいじれる)独自ドメインを持っている。</li>
<li>GitHub-Pagesを利用しており、公開してるサイトがある。</li>
</ul>


<p>DNSでGH-Pagesに飛ばす設定と、GH-Pagesから独自ドメインにリダイレクトするための設定を行う。設定は順不同だけど、GitHub側の設定が先に反映されると、まだGH-Pagesが表示出来ない状態の独自ドメインにリダイレクトされるようになるので、サービス停止ができないような状況なら、DNSの設定が終わってからやったほうがいいのかもしれない。ただ、どちらも反映に多少の時間がかかるので、しばらく(10分程度)の間アクセスが止まる事に、特に問題がないなら、平行作業しちゃっても問題ない。</p>

<h2>DNS側</h2>

<ol>
<li><code>blog.awairo.net</code>の別名として、<code>alalwww.github.io</code>を設定するための、CNAMEレコードを追加する。</li>
</ol>


<p>だけ。</p>

<p>具体的には、DNSの設定で以下を追加する。</p>

<pre><code>blog.awairo.net. IN CNAME alalwww.github.io.
</code></pre>

<p>検索してると、<a href="http://blog.livedoor.jp/techblog/archives/65340720.html" title="livedoor Techブログ : CNAMEの間違った使い方">CNAMEを設定したDNSでは他の設定が無視される(カモシレナイ)</a>って感じの記事を見つけちゃって、上手くいくのか不安だったけど、とりあえずVALUE-DOMAINではできた。というか、一般的なDNSサーバーなら他の設定の無視もしないと思うので、多分大丈夫だと思うけれど、一応気に留めておこう。( っ&#8217;ω&#8217;c)</p>

<h3>実際にやったこと</h3>

<p>VALUE-DOMAINのサイトから、専用の書式でCNAMEレコードを追加する。</p>

<ol>
<li>ログイン</li>
<li>DNSレコード/URL転送の変更</li>
<li>ドメイン選択</li>
<li><p>設定フィールドの一番上に、以下を追加。</p>

<p> cname blog alalwww.github.io.</p></li>
</ol>


<p>一番上というか、ワイルドカードで全部xreaのWebサーバーに向けてるAレコードがあるので、それより上に設定追加でうまくいった。一番最後のピリオド(<code>.</code>)は忘れやすいので要注意。</p>

<p>設定したら保存するボタンを押して完了。反映までしばらくかかると思うので(たぶん)、カフェオレをすすりながら待つ。</p>

<h3>確認</h3>

<p>コマンドプロンプトを開いて、<code>nslookup</code>コマンドで自宅のルーターに対し問い合わせて確認。</p>

<pre><code>Microsoft Windows [Version 6.1.7601]
Copyright (c) 2009 Microsoft Corporation.  All rights reserved.

C:\Users\username&gt; nslookup
既定のサーバー:  (ルーター名)
Address:  (ルーターのIP)

&gt;
</code></pre>

<p>反映されてない状態だと以下のような回答。向けてるxreaのウェブサーバーのIPが返ってくる。</p>

<pre><code>&gt; blog.awairo.net
サーバー:  (ルーター名)
Address:  (ルーターのIP)

権限のない回答:
名前:    blog.awairo.net
Address:  203.189.105.98 ← メインで使ってるxreaのサーバーのIP
</code></pre>

<p>しばらくするとこんな感じに変わった。</p>

<pre><code>&gt; blog.awairo.net
サーバー:  (ルーター名)
Address:  (ルーターのIP)

権限のない回答:
名前:    github.map.fastly.net
Address:  103.245.222.133
Aliases:  blog.awairo.net
          alalwww.github.io
</code></pre>

<p>できたっぽい。</p>

<h2>GitHub側</h2>

<ol>
<li>リダイレクト先のURL(<a href="http://blog.awairo.net/">http://blog.awairo.net/</a>)を書いた、「CNAME」というファイル名のテキストファイルを配置する。</li>
</ol>


<p>だけ。</p>

<h3>実際にやったこと</h3>

<p>OctopressのリポジトリをおいてるLinuxサーバーで、以下の作業。</p>

<pre><code>$ cd octopress
$ tee &gt; source/CNAME (リダイレクトしないと標準出力にもでてきてちょっとうざいので)
blog.awairo.net
(改行したあとctrl+Cを押して終了)
$ cat source/CNAME (確認)
blog.awairo.net
$ rake gen_deploy (Push)
</code></pre>

<p>名前が可愛いので<code>tee</code>コマンド好きです。Webにある解説じゃあまり見かけないけれど。ほら、ちょっとした内容のテキストファイル作るのによく見かける、おさわり(<code>touch</code>)してからエディタで開いて編集とかっての、ちょっとめんどくさいし。( っ&#8217;ω&#8217;c)</p>

<p>デプロイが終わったら、<a href="https://github.com/alalwww/alalwww.github.io">GitHubのリポジトリ</a>を確認してCNAMEファイルがちゃんとデプロイされてたら問題なし。</p>

<h3>確認</h3>

<p>Chromeで<code>F12</code>を押して開発用ツールを開いて、<code>Network</code>タブを選んで、<code>http://alalwww.github.io/</code>にアクセスし、<code>http://blog.awairo.net/</code>にリダイレクトされてる事を確認。
<img src="http://blog.awairo.net/images/posts/2013/12/14/custom-domain-for-gh-pages/chrome_devtools.png" alt="ChromeのDeveloperToolsのキャプチャー画像" /></p>

<p>できてるできてる。</p>

<h1>参考にさせて頂いたサイト</h1>

<ul>
<li><a href="http://bekkou68.hatenablog.com/entry/2013/01/05/210902">GitHub Pages に独自のトップレベルドメイン（TLD）を割り当てる &ndash; bekkou68の日記</a></li>
<li><a href="http://setup.value-domain.com/index.php?p=websrv">Easy Setup for VALUE DOMAIN Users</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopressにタグクラウドプラグインを追加]]></title>
    <link href="http://blog.awairo.net/blog/2013/12/09/add-tag-cloud-plugin-on-octopress/"/>
    <updated>2013-12-09T05:11:00+09:00</updated>
    <id>http://blog.awairo.net/blog/2013/12/09/add-tag-cloud-plugin-on-octopress</id>
    <content type="html"><![CDATA[<p>右のサイドバーに、「カテゴリリスト」と「タグクラウド」を追加したのでメモ。</p>

<!--more-->


<h1>タグクラウドプラグインの導入</h1>

<p><a href="http://tokkonopapa.github.io/blog/2012/01/04/octopress-plugin-for-categories-cloud/">このサイト</a>を参考にプラグイン導入。</p>

<h2>手順</h2>

<p>クローンしてきてコピーで導入。</p>

<pre><code>$ ~/git/
$ git clone https://github.com/tokkonopapa/octopress-tagcloud.git octopress-tagcloud
$ cp octopress-tagcloud/plugins ~/octopress/plugins
$ cp octopress-tagcloud/source/_includes/custom/asides/ ~/octopress/source/_includes/custom/asides/
</code></pre>

<p><code>_config.yml</code>の<code>default_asides</code>に追加。</p>

<pre><code>$ cd ~/octopress
$ vi _config.yml
    (追加)
</code></pre>

<p>再生成して確認し問題なさそうなのでDeploy</p>

<pre><code>$ rake generate
$ rake preview
    (動作確認、デザイン確認)
$ rake gen_deploy
</code></pre>

<p>あとは内容に応じて適当に分けてコミットしてって、bitbucketにもpushしておわり。</p>

<p>右側に感じてた違和感っぽいのが減ってきて、それっぽくなった気がするのでとても満足。</p>

<p>いい加減寝ないとまずそう…。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octpress再インストール]]></title>
    <link href="http://blog.awairo.net/blog/2013/12/09/reinstall-octopress/"/>
    <updated>2013-12-09T02:20:00+09:00</updated>
    <id>http://blog.awairo.net/blog/2013/12/09/reinstall-octopress</id>
    <content type="html"><![CDATA[<p>Octopressを再インストールしたのでその手順をメモしました。</p>

<!-- more -->


<p>前回同様に<a href="http://tokkonopapa.github.io/blog/2011/12/30/octopress-on-github-and-bitbucket/">こちらの記事</a>を参考にインストール。</p>

<h1>環境</h1>

<ul>
<li>CentOS5</li>
<li>ruby 1.9.3</li>
</ul>


<p>他割愛</p>

<h1>やった事メモ</h1>

<p>手探りと思いつきでやったので、行った順番はバラバラ。</p>

<h2>再インストール</h2>

<h3>GitHubPages用のリポジトリの作成</h3>

<p>GitHubPages用のドメインがgithub.comからgithub.ioに変わってるので、いい機会だしリポジトリも名前を変えて作り直しにしちゃおうと思います。</p>

<p>とりあえず既存のリポジトリはそのまま、新たにalalwww.github.ioリポジトリを作成。手順は割愛。</p>

<h3>Source用リポジトリ(リモート)の作成</h3>

<p>BitBucketに置くことにしました。</p>

<p>さくっとアカウントを作成してメール認証とSSHKey登録。Octopressのリポジトリを非公開で作成。手順は割愛。</p>

<p>GitHubを使ったことが有るからかもだけど、特に迷うこともなく完了。</p>

<h3>サーバーの更新ほったらかしていたのでとりあえず更新</h3>

<pre><code>$ sudo yum update
</code></pre>

<p>とかとか。いろいろ。</p>

<h3>Gemの更新</h3>

<pre><code>$ sudo gem update --system
</code></pre>

<p>実際はインストールとかひと通り終わった後に思い出してやりました。特に問題はなかったからよしってことにしました。</p>

<h3>Octopress再インストール</h3>

<p>Octopressをクローンしてきて準備。</p>

<pre><code>$ cd ~/git/
$ git clone git://github.com/imathis/octopress.git octopress
$ cd octopress
$ sudo gem install bundler // 既にインストール済みだし不要だったかも
$ bundle install           // 同上
$ bundle update rake
$ rake install
</code></pre>

<p><code>bundle update rake</code>は忘れてたのであとでやりなおしました。最初、更新を忘れていたせいか、<code>rake setup_github_pages</code>でブランチがmasterからsourceに変わらないといったハプニングはありましたが、やり直したら問題なくいけたっぽいので気にしないことに。</p>

<p>Octopressのインストール</p>

<pre><code>$ rake setup_github_pages
Enter the read/write url for your repository
(For example, 'git@github.com:your_username/your_username.github.io.git)
           or 'https://github.com/your_username/your_username.github.io')
Repository url: (GitHubのリポジトリのURLを入力)
Added remote git@github.com:username/username.github.io.git as origin
Set origin as default remote
Master branch renamed to 'source' for committing your blog source files
rm -rf _deploy
mkdir _deploy
cd _deploy
Initialized empty Git repository in /path/to/git_repos/octopress/_deploy/.git/
[master (root-commit) 81f3a5e] Octopress init
 1 file changed, 1 insertion(+)
 create mode 100644 index.html
cd -

---
## Now you can deploy to (入力したGitHubのリポジトリのURL) with `rake deploy` ##
</code></pre>

<p>ブランチを確認。やり直したあとはちゃんとmasterからsourceに変わってる事を確認。(先に書いたgemsの更新忘れてたときは、何故かこれができてなくてハマってた。)</p>

<pre><code>$ git branch
* source
</code></pre>

<p>変更されたファイルを確認。</p>

<pre><code>$ git status
# On branch source
# Changes not staged for commit:
#   (use "git add &lt;file&gt;..." to update what will be committed)
#   (use "git checkout -- &lt;file&gt;..." to discard changes in working directory)
#
#       modified:   Gemfile.lock
#       modified:   Rakefile
#       modified:   _config.yml
#
# Untracked files:
#   (use "git add &lt;file&gt;..." to include in what will be committed)
#
#       sass/
#       source/
no changes added to commit (use "git add" and/or "git commit -a")
</code></pre>

<p>とりあえず未編集状態でコミット。</p>

<pre><code>$ git add .
$ git commit -m 'first commit'
</code></pre>

<h3>リモートを追加してsourceブランチをpush</h3>

<p>作っておいたBitbucketのリポジトリを追加。</p>

<pre><code>$ git remote add bitbucket git@bitbucket.org:username/octopress.git
</code></pre>

<p>でもって確認も兼ねてプッシュ。</p>

<pre><code>$ git push bitbucket source
Enter passphrase for key '/path/to/sshkeydir/keyfile':
Counting objects: 4724, done.
Compressing objects: 100% (2027/2027), done.
Writing objects: 100% (4724/4724), 1.19 MiB, done.
Total 4724 (delta 2459), reused 4519 (delta 2321)
To git@bitbucket.org:username/octopress.git
 * [new branch]      source -&gt; source
</code></pre>

<p>Bitbucketサイトのコミットログを確認。
<img src="http://blog.awairo.net/images/posts/2013/12/09/reinstall-octopress/bitbucket_log.png" alt="Bitbucketのコミットログ画面" /></p>

<h3>動作の確認など</h3>

<p>最低限の設定を行った後、とりあえず生成してみようと記事をバックアップから復活し、<code>rake generate</code>を実行してみると失敗しました。</p>

<pre><code>$ rake generate
## Generating Site with Jekyll
directory source/stylesheets/
   create source/stylesheets/screen.css
Configuration from /path/to/git_repos/octopress/_config.yml
Building site: source -&gt; public
Liquid Exception: incompatible character encodings: UTF-8 and ASCII-8BIT in 2013-02-19-blog-customization1.markdown
/usr/local/lib/ruby/gems/1.9.1/gems/liquid-2.3.0/lib/liquid/block.rb:92:in `join'
/usr/local/lib/ruby/gems/1.9.1/gems/liquid-2.3.0/lib/liquid/block.rb:92:in `render_all'
/usr/local/lib/ruby/gems/1.9.1/gems/liquid-2.3.0/lib/liquid/block.rb:82:in `render'
/usr/local/lib/ruby/gems/1.9.1/gems/liquid-2.3.0/lib/liquid/template.rb:124:in `render'
/usr/local/lib/ruby/gems/1.9.1/gems/liquid-2.3.0/lib/liquid/template.rb:132:in `render!'
/usr/local/lib/ruby/gems/1.9.1/gems/jekyll-0.12.0/lib/jekyll/convertible.rb:79:in `do_layout'
/path/to/git_repos/octopress/plugins/post_filters.rb:167:in `do_layout'
/usr/local/lib/ruby/gems/1.9.1/gems/jekyll-0.12.0/lib/jekyll/post.rb:195:in `render'
/usr/local/lib/ruby/gems/1.9.1/gems/jekyll-0.12.0/lib/jekyll/site.rb:200:in `block in render'
/usr/local/lib/ruby/gems/1.9.1/gems/jekyll-0.12.0/lib/jekyll/site.rb:199:in `each'
/usr/local/lib/ruby/gems/1.9.1/gems/jekyll-0.12.0/lib/jekyll/site.rb:199:in `render'
/usr/local/lib/ruby/gems/1.9.1/gems/jekyll-0.12.0/lib/jekyll/site.rb:41:in `process'
/usr/local/lib/ruby/gems/1.9.1/gems/jekyll-0.12.0/bin/jekyll:264:in `&lt;top (required)&gt;'
/usr/local/bin/jekyll:23:in `load'
/usr/local/bin/jekyll:23:in `&lt;main&gt;'
Build Failed
</code></pre>

<p>しかしもう一度試してみると発生しなく…。</p>

<pre><code>$ rake generate
## Generating Site with Jekyll
identical source/stylesheets/screen.css
Configuration from /path/to/git_repos/octopress/_config.yml
Building site: source -&gt; public
Successfully generated site: source -&gt; public
</code></pre>

<p>よくわからないけどなんか大丈夫になってしまった。再現性がないのでとりあえず保留。このあとテーマ更新した際にもう一度だけ発生したけど、やっぱりそれ以降再現しないので忘れることに。</p>

<p>とりあえず目についたエラーメッセージをコピって<a href="http://goo.gl/IcRLrp">先生</a>に聞いてみたら、<a href="http://tokkonopapa.github.io/blog/2013/02/23/octopress-toc/">関連しそうな記事</a>はあったんだけれど、この後の記事でもOctopress側に問題があっておきてるような事が書いてあるし、原因調査に割く時間もないので、時が解決してくれることを期待しておきます。</p>

<h2>設定変更など</h2>

<h3>.gitignoreに.preview-modeを追加</h3>

<p><code>git status</code>してみると、新規ファイルが作成されてた。名前的にプレビュー時に生成されたっぽい。コミットは不要な気がするので<code>.gitignore</code>に<code>.preview-mode</code>ファイルを追加してまたコミット。</p>

<p>その他、追加した記事や設定の変更を、何度かに分けてコミット。</p>

<h3>テーマを変更</h3>

<p><a href="http://blog.awairo.net/blog/2013/12/05/theme-changed/">先日の記事</a>通りにさくさくっとテーマも変更。ついでにスタイルも少し修正。終わったらまたいくつかにわけてコミット。</p>

<h3>new_postなどのテンプレート変更。</h3>

<p><a href="http://blog.awairo.net/blog/2013/12/05/how-to-use-drafts//">先日の記事</a>通りにｒｙ</p>

<h3>ツイッタープラグイン死亡確認</h3>

<p>原因は単純で、OctopressのはAPI1.0系だから。っていうかAPI1.1じゃ認証必須だからどのみち従来のような取得はできない。そんな理由からこのプラグインの更新自体も打ち切られてるみたい。</p>

<p>APIが使えなくなったかわりにTwitter公式が<a href="https://dev.twitter.com/ja/docs/embedded-timelines">埋め込みタイムラインウィジェット</a>を提供しているので、こっちを利用するものを作成。(<a href="http://msaisai.github.io/blog/2013/06/19/octopress-twitter/">参考</a>)</p>

<div><script src='https://gist.github.com/7860557.js'></script>
<noscript><pre><code>&lt;section style=&quot;position:relative&quot;&gt;
&lt;h1&gt;Twitter&lt;/h1&gt;
&lt;div style=&quot;position:absolute;top:0;right:16px&quot;&gt;
&lt;a href=&quot;https://twitter.com/alalwww&quot; class=&quot;twitter-follow-button&quot; data-show-count=&quot;false&quot; data-lang=&quot;ja&quot; data-show-screen-name=&quot;false&quot;&gt;Follow @alalwww&lt;/a&gt;
&lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=&quot;//platform.twitter.com/widgets.js&quot;;fjs.parentNode.insertBefore(js,fjs);}}(document,&quot;script&quot;,&quot;twitter-wjs&quot;);&lt;/script&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;a class=&quot;twitter-timeline&quot; href=&quot;https://twitter.com/alalwww&quot; data-widget-id=&quot;408658474638118912&quot; data-chrome=&quot;noheader nofooter transparent&quot; data-lang=&quot;ja&quot;&gt;@alalwww からのツイート&lt;/a&gt;
&lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+&quot;://platform.twitter.com/widgets.js&quot;;fjs.parentNode.insertBefore(js,fjs);}}(document,&quot;script&quot;,&quot;twitter-wjs&quot;);&lt;/script&gt;
&lt;/div&gt;
&lt;/section&gt;
</code></pre></noscript></div>


<p>ヘッダーがいまいちだったので消して、自前で用意し、こんな感じに落ち着きました。出来たものは<code>source/_includes/custom/asides/twitter.html</code>に配置して<code>_config.yml</code>の<code>default_aside</code>に追加。</p>

<p>しかしGistのずれは、前から気になってたけどやっぱ気持ち悪い。今度直そう。(<a href="http://rcmdnk.github.io/blog/2013/05/06/blog-octopress/">修正の参考</a>)</p>

<h3>about.htmlを修正し追加</h3>

<p>ブログの概要、というか自己紹介的なやつ。</p>

<p>前はTwitterのプロフィールを取得して表示してたけど、そこもAPI1.0系なので死んでてもう使えない。ので普通に書きます。内容はとりあえずあとで考えるとして適当に形だけ。おなかすいた。</p>

<p>アイコンだけはTwitterから取得するようにしました。Guavaterでもよかったかも。(<a href="https://retrorocket.biz/archives/77">参考</a>)</p>

<p><code>source/_includes/custom/asides/about.html</code> を適当に修正。終わったら<code>_config.yml</code>の<code>default_aside</code>に追加。</p>

<h1>再インストールに至った理由</h1>

<p>そもそも何故再インストールなんてしたかって言いますと、先日間違って<code>~/git/octopress</code>ディレクトリを勘違いで<code>rm -rf</code>してしまったから、だったりします。まるっと全消去です。見る影どころか跡形もありません…。</p>

<p>思えばGitとかをまだ全然理解していない頃に、解説サイトに書いてあるコマンドをコピペしながら作成だけし、そのまま放置しつつ、テーマ弄ったり、記事だけ追加する、みたいなことを繰り返していたので、変更を全くコミットしていませんでした。そのため復旧は早々に諦めましたが、幸いなことに記事だけは直前にバックアップしてあったので、おさらいも兼ねて、いちからOctopressをインストールをし直してしまった、といった感じです。</p>

<p>Octopress本体の更新もだいぶ長いこと放置してたので、実にいい機会です。むしろ計画通り。</p>

<p>というか、いつかまたやらかしそうな気もするので、その時用に作業メモを残した感じ。</p>

<hr />

<p>何度かに分けて書いてるので文体バラバラ。っていうか、めんどくさい文章になるのでですます調はやめようと思いつつも、つい使ってしまう…。余計な文章書きすぎるクセも抜けない…。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[下書きがしたい]]></title>
    <link href="http://blog.awairo.net/blog/2013/12/05/how-to-use-drafts/"/>
    <updated>2013-12-05T02:57:00+09:00</updated>
    <id>http://blog.awairo.net/blog/2013/12/05/how-to-use-drafts</id>
    <content type="html"><![CDATA[<p>Octopressで下書きを行う方法と、記事のテンプレートの修正についてメモ。</p>

<!--more-->


<h1>Octopressでも記事の下書きがしたい</h1>

<p>テーマを変更する前に書きかけ記事があったので、そちらを下書きにしたいと思っていたのですが、探してみたら、<a href="http://chopl.in/blog/2012/05/27/how-to-preview-drafts-with-octopress.html">ちょうどいい解説記事</a>がありました。</p>

<p>postのファイルの先頭で、<code>published: false</code>に設定しておくだけで下書きになるみたい。ただしプレビューでは表示される。</p>

<h2>プレビューで下書き記事が出るときと出ない時がある。</h2>

<p><code>rake generate</code>では下書きは生成されないが、<code>rake preview</code>で起動中の再生成時には下書き記事も生成されるみたい。</p>

<p>なので、いきなり<code>rake preview</code>で起動した場合は常に表示される。ただし<code>rake generate</code>を行ってから<code>rake preview</code>を行うと、初回のプレビュー時だけ表示されず、ブラウザでF5を押すと下書きの記事が生成されて見えるようになる。</p>

<h2>やっぱ新規作成時に用意しておいてほしいよね</h2>

<p><code>rake new_post['title']</code>した時に初期値が入っててくれたほうが便利なので、テンプレートを探してみるも見つからない。もしやと思って<code>Rakefile</code>を覗いてみたら、テンプレートがベタ書きされてました。</p>

<p><a href="http://blog.4uing.net/octopress-post/">こちらのサイト</a>によると、<code>published</code>の他に、<code>author</code>と<code>external-url</code>(外部リンクの設定)があるようです。せっかくなので合わせて追加。ただし外部リンクは不要なのでスルー。</p>

<pre><code>post.puts "---"
post.puts "layout: post"
post.puts "date: #{Time.now.strftime('%Y-%m-%d %H:%M')}"
post.puts "author: alalwww"
post.puts "comments: true"
post.puts "published: true"
post.puts "title: \"#{title.gsub(/&amp;/,'&amp;amp;')}\""
post.puts "categories: "
post.puts "---"
post.puts ""
post.puts "&lt;!--more--&gt;"
</code></pre>

<p>テーマ変更にあわせて記事に頭で&lt;!&mdash;more&mdash;&gt;を挟むようにしたので、そのあたりも含めてみた。これは結構いいカンジっぽい…？</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[テーマ変更。他Octpressのカスタマイズとか。]]></title>
    <link href="http://blog.awairo.net/blog/2013/12/05/theme-changed/"/>
    <updated>2013-12-05T02:36:00+09:00</updated>
    <id>http://blog.awairo.net/blog/2013/12/05/theme-changed</id>
    <content type="html"><![CDATA[<p>テーマ変更の手順とテーマのカスタマイズなど。</p>

<!--more-->


<h1>テーマの変更手順</h1>

<p>Octopress導入当時、あまりﾃｨﾝとくるテーマがみつけられなかったので、クラシックを少しいじる程度でいつか本気を出そうと思いつつ放置してたのですが、やっぱりなんだかぱっとしないので、思い切ってテーマを変えてみました。</p>

<p>とりあえず、<a href="http://namusyaka.github.io/blog/2012/10/03/github-jekyll/">「Octopress テーマ」で検索して最初に目についたサイト</a>を参考にさせてもらいながら、テーマを変更してみました。</p>

<p>手順はこんなかんじになります。</p>

<ol>
<li><a href="https://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes">GitHubのサードパーティ製テーマのページ</a>を開く。</li>
<li>PreviewやScreenShotを見て気に入る物を探す。</li>
<li>各テーマの導入手順通りに導入する。</li>
</ol>


<p>だけ！</p>

<p>テーマもGitHub上で公開されているので、Cloneしてきてインストールするだけです。実に楽ちん。</p>

<p><a href="https://github.com/roberto/oct2-orange">oct2-orange</a>のオレンジという単語に惹かれてさくっと決定。</p>

<pre><code>$ git submodule add git://github.com/roberto/oct2-orange.git .themes/oct2-orange
$ rake install[oct2-orange] 
</code></pre>

<p>丸コピってコマンドを打ち込むと…</p>

<pre><code>It seems your ruby installation is missing psych (for YAML output). To eliminate this warning, please install libyaml and reinstall your ruby.
</code></pre>

<h2>なんかrubyの警告が出てる</h2>

<p>どうやらCentOS5(6も)の環境にRubyをいれるときに出くわす問題っぽい？</p>

<p><a href="http://d.hatena.ne.jp/donbulinux/20111111/1321004527">エラーメッセージで検索して最初に目についたサイト</a>を参考に、libyamlをインストール。libyamlのバージョンとかConfigureのオプションとかを一切確認せず、コマンドを丸コピペしてEnter。</p>

<pre><code>$ wget http://pyyaml.org/download/libyaml/yaml-0.1.4.tar.gz
$ tar -zxvf yaml-0.1.4.tar.gz
$ cd yaml-0.1.4
$ ./configure
$ make
$ sudo make install
</code></pre>

<p>問題なく終わったみたいなので、以前Rubyを導入したときのディレクトリに移動してrubyも再インストール。</p>

<pre><code>$ cd ~/ruby/ruby-1.9.3-p374
$ ./configure
$ make
$ sudo make install
</code></pre>

<p>できたっぽい。頑張ったっぽい？</p>

<h2>今度こそテーマをインストール</h2>

<pre><code>$ rake install[oct2-orange] 
A theme is already installed, proceeding will overwrite existing files. Are you sure? [y/n]
</code></pre>

<p>念のためのバックアップはとっているので、yを選んでテーマを上書き。</p>

<h1>設定変更など</h1>

<p>やったことなどメモ。もう既に忘れかけ。</p>

<h2>ナビバー表示</h2>

<p>テーマの配布元に書いてあるとおりに_config.yml の <code>default_asides</code> を編集してナビバーを表示。</p>

<pre><code>default_asides: [asides/nav.html, custo...
</code></pre>

<h2>ナビバーのE-mailボタンを削除</h2>

<p><code>source/_includes/asides/nav.html</code> から以下の行を削除。</p>

<pre><code>&lt;a href="mailto:" alt="E-Mail"&gt;&lt;img src="http://blog.awairo.net/images/Envelope.png"&gt;&lt;/a&gt;
</code></pre>

<h2>フォント変更</h2>

<p>scss/custom/_fonts.scssを修正</p>

<pre><code>$sans: Consolas, "MeiryoKe_PGothic", "メイリオ", sans-serif;
$serif: Consolas, "MeiryoKe_PGothic", "メイリオ", sans-serif;
$heading-font-family: Consolas, "MeiryoKe_PGothic", "メイリオ", sans-serif;;
</code></pre>

<p>今度はConsolasを足してみた。</p>

<h2>リストの左マージンを設定</h2>

<p>リストが左に寄ってる感じなので、適当にマージンを追加。</p>

<p>_styles.scss</p>

<pre><code>/* ----- Content ----- */
  :(中略)
#content {
  article {
    ul {
      margin-left: 25px;
    }
    ol {
      margin-left: 40px;
    }
  }
}
</code></pre>

<p>なんか、このスタイルの定義ファイル、元からある記述はネストされてなくてちょっと見づらい…。</p>

<h2>htmlタグのlang属性を日本語に変更</h2>

<p><a href="http://blog.awairo.net/blog/2013/02/24/blog-customization2/">以前</a>やったのと同じように<code>octopress/source/_includes/head.html</code>を編集。</p>

<pre><code>&lt;html class="no-js" lang="ja"&gt;
</code></pre>

<hr />

<p>足りない変更はまた後日行う予定。スタイルももう少し弄りたいし、はてブボタンとかサイドバーへの手直しなどが足りてなさそう。時間も足りてなさそう。(╯•﹏•╰)</p>

<p>サイトのタイトルとか出ないのはそういうテーマっぽいけれど、左上にトップに戻るリンクないと落ち着かない気がするのでその辺りも何とかしたいトコロ。</p>

<h1>だそく</h1>

<p>いいローカル側のファイルのGitリポジトリ作ってコミットするようにしないと変更管理できないなぁって痛感。本気出すための服がほしい…。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[version.properties メモ]]></title>
    <link href="http://blog.awairo.net/blog/2013/05/05/version-dot-properties-memo/"/>
    <updated>2013-05-05T21:11:00+09:00</updated>
    <id>http://blog.awairo.net/blog/2013/05/05/version-dot-properties-memo</id>
    <content type="html"><![CDATA[<p>意外と知られていないメタ情報ファイル。自動生成と相性よさげ。</p>

<!-- more -->


<h1>version.properties についてメモ</h1>

<p>なにこれって思う modder のほうが多いような気がします。少なくとも日本のminecraft-modderでこれを用意してる人、見た記憶ないです。</p>

<h2>@Mod アノテーションの version とバイバイできる version.properties</h2>

<p>バージョンアップのたびに @Mod に設定した version を書き直し忘れて、リコンパイル、再難読化をもっかいやるハメになったことある modder は、少なくないんじゃないかなと思います。つか私はほぼ毎回更新を忘れます。だいたい zip が出来上がってから思い出します。画面殴りそうです。</p>

<p>きちんとクラスをわけていくと、@Mod をつけたModクラスは初期化以外での出番は殆どなくなってしまうので、あまり更新する機会がありません。そのため見る機会自体が減っていきます。また、更新のたびにバージョンを書き換えるのは意外と面倒でわすれがちです。</p>

<p>そうすると、プログラマーは自動更新を考えるわけです。ですが、ハードコーディングされているアノテーションを自動更新するのは、わりと大変。</p>

<p>そんなときにこの version.properties です。外部ファイルからバージョン情報を設定してあげることで、コード修正を行わずにバージョンを設定できるようになります。</p>

<h2>つかいかた</h2>

<p>前置きが無駄に長くなりましたが、なんのことはありません。ファイル名は version.properties で mcmod.info と同様にzipのルートに配置すれば読んでくれます。</p>

<p>プロパティファイルなのでコメントなども使えます。他の情報を追加することもできます。ただし日本語など、マルチバイト文字を使用する場合には、native2ascii などできちんと変換しないといけません。まぁ Pleiades Eclipse 使ってるならプロパティファイル用のエディタで編集するので、このあたりを意識する機会はあんまりないですが。</p>

<p>このプロパティファイルで、@Mod アノテーションの version を設定できます。ただし優先度はアノテーションによる設定よりも低く、アノテーションでバージョンを設定している場合、無視されるようです。</p>

<p>例えば、modid が &ldquo;net.awairo.minecraft.tooltipplus&#8221;、バージョンが &#8220;2.3.0&rdquo; であれば、こんな感じ。modid のあとに &ldquo;version&rdquo; を繋げたキーで値にバージョンの値です。</p>

<pre><code>net.awairo.minecraft.tooltipplus.version = 2.3.0
</code></pre>

<p>これで @Mod(～, version = &ldquo;2.3.0&rdquo;) と同じ設定ができます。</p>

<p>ちなみに、コード上からこのプロパティファイルを取得したい場合は、FMLPreInitialiseEvent から取得出来ます。@PreInitのほうです。</p>

<p>バージョンアップの際にコードの修正が必要ないのと、プロパティファイルなので、自動生成が楽ちんなのがメリットですね。それに、自動生成するようにしておけばコミットする必要もなくなるので、コミットログに余計なファイルが混ざらないってメリットもあります。</p>

<p>IronChest なんかは自動生成用のスクリプトをもっていて、それを使ってリリース毎に自動生成しているみたいです。私も真似してます。</p>

<hr />

<p>自動更新についても、気が向いたらそのうち書くかもしれませんが、向いたらで。</p>

<p>Tooltip Plus のほうはだいたい自動化しちゃってますが、いろいろ余計なことしてていま見直してる最中なので、あんま参考にはならないとおもいます。</p>

<p>SpawnCheckerのほうは作り直しが進んでないので、いまだにRML時代のままのクラス構成です。mod_SpawnCheckerです。毎回 getVersion() の戻り値の変更を忘れては「アアァァッ」って叫んでます。RMLバイバイしてFMLの機能つかいたいです。</p>

<p>つか、このあたりは IronChest 見たほうが早いです。困ったときの IronChest。IronChset is God。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[@Mod アノテーションメモ]]></title>
    <link href="http://blog.awairo.net/blog/2013/05/05/mod-annotation-memo/"/>
    <updated>2013-05-05T20:00:00+09:00</updated>
    <id>http://blog.awairo.net/blog/2013/05/05/mod-annotation-memo</id>
    <content type="html"><![CDATA[<p>Modのメインクラスに付けるアノテーションの解説とか。実はmodid以外はなくてもいける。</p>

<!-- more -->


<h1>@Modアノテーションについて</h1>

<p>FMF645 現在、以下の項目が設定可能です。</p>

<pre><code>String modid
String name default ""
String version default ""
String dependencies default ""
boolean useMetadata default false
String acceptedMinecraftVersions default ""
String bukkitPlugin default ""
String modExclusionList default ""
String certificateFingerprint default ""
String modLanguage default "java"
String asmHookClass default ""
</code></pre>

<p>簡単な解説をしてみます。</p>

<h2>@Modアノテーション 各項目の簡単な解説</h2>

<p>詳しくは @Mod アノテーションの JavaDoc に書いてあるのでさわりだけ。過度な期待はうんたらかんたら。</p>

<p>解説というよりは自分用の備忘録。</p>

<h3>String modid</h3>

<p>mod の識別子です。</p>

<p>ユニーク値かつ必須。mcmod.info の解説でやったので省略。</p>

<h3>String name default &ldquo;&rdquo;</h3>

<p>mod の名前です。</p>

<p>mcmod.info の値より優先度は低いみたいです。mcmod.info用意しているなら不要だと思います。</p>

<h3>String version default &ldquo;&rdquo;</h3>

<p>modのバージョンです。</p>

<p>mcmod.info の値とは別の内部的なバージョン値です。</p>

<p>依存チェックで使うバージョンのことも考えると</p>

<pre><code>メジャー.マイナー.ビルドナンバー.リビジョン
</code></pre>

<p>みたいなような指定にするのが無難だと思います。</p>

<p>このバージョンは version.properties からも設定できますが、アノテーションで指定したほうが優先度が高いようで、アノテーションに設定しちゃうと version.properties は無視されます。</p>

<p>version.properties を使うなら設定不要です。</p>

<h3>String dependencies default &ldquo;&rdquo;</h3>

<p>依存関係指定用の文字列の設定用。</p>

<p>javadocにも書いてあるように、RML (ModLoader) の BaseMod の getPriorities() を参照してください、とのことです。具体的には、require-before:mod-name とかって感じで設定する奴です。触ったことある人はあまりいない気がしますが。</p>

<p>確か最近の RML の javadoc にはこのあたりの仕様が記載されていないので、さらにわけわかめです。古いRMLの javadoc を探せば見つかると思います。</p>

<p>…思いますが、そんなもの漁るくらいなら mcmod.info  なりメタデータなりで指定した方が楽だし、バージョンでのチェックもできるのでオススメ。この文字列のパース機能は、BaseMod互換にするために残ってる機能みたいなもんだと思います。</p>

<h3>boolean useMetadata default false</h3>

<p>MetaData クラスを使用する場合 true に設定します。</p>

<p>この値を true にすると、mcmod.info の依存関係のチェック用の情報をクリアします。mcmod.info で useDependencyInformation を true にしても無視されます。</p>

<p>この設定は、Mod.Metadata アノテーションを利用するための設定なんじゃないかなーと思います。mcmod.infoは外部ファイルなので改変される可能性があるから、そのための制約なのではないかと。ちゃんと調べてないですが。</p>

<h3>String acceptedMinecraftVersions default &ldquo;&rdquo;</h3>

<p>許可するMinecraftのバージョンを設定します。</p>

<p>通常設定する必要はないです。が、あえて過去ver専用のmodなどを作製する場合は、こいつを指定しておくといいかもしれないです。バージョン指定の書式はきちんと把握仕切れていないので、調べた時にでも書こうと思います。たぶん。</p>

<p>簡単に具体例を上げておくと</p>

<pre><code>acceptedMinecraftVersions = "[1.5,)"
</code></pre>

<p>これで1.5.x 以降のマイクラでのみ実行できる、って指定になります。たぶん。</p>

<p>別にこれ、FML固有の書式ではなかったと思うので、検索すれば見つかると思います。Apache commons 関連のドキュメントだかで見た記憶があるような、ないような…。</p>

<h3>String bukkitPlugin default &ldquo;&rdquo;</h3>

<p>BukkitプラグインからロードされるためのプラグインのFQDNを設定します。</p>

<p>…だと思いますがちゃんと調べてないので省略。必要になったら調べるかもしれないですが、当面は必要ないかなーと…。</p>

<h3>String modExclusionList default &ldquo;&rdquo;</h3>

<p>カンマ区切りでmodidを記述し、他modとの共存可否の設定を行えます。</p>

<p>ようは拒否リストです。「貴方とは一緒に導入できないの」ってなるような設定をします。</p>

<p>競合するからこのmodとは一緒に使えないよ、とか、(作者の意向として、)このModとは共存させたくないよ、ってModがある場合などに利用します。競合することがわかってる場合に事前に回避したり、modが想定している難易度を崩してしまうような別のmodが導入されることを認めない、みたいな感じに使うものだと思います。</p>

<p>許可不許可を決める記号(+/&ndash;)を付与した modid をカンマ区切りで複数指定できます。許可する mod は modid の先頭に「+」、許可しない mod は先頭に「-」を指定します。modid の代わりに、すべての Mod を意味するワイルドカード「*」と、forge を意味するエイリアス「f」が使えます。何も指定しない場合は、全て許可「+*」と同じです。</p>

<h3>String certificateFingerprint default &ldquo;&rdquo;</h3>

<p>署名された jar を要求するようにするための設定。全て小文字で : が削除されたSHA-1の文字列。</p>

<p>デフォルトでは署名された jar を要求しません。</p>

<p>これはちょっとややこしいので省略。必要な人は自前で調べてください。</p>

<p>mod を jar ファイルとしてリリースして META-INF/ を同梱して署名を用意し、クラスファイルの破損や改変がないことをチェックしたりとか、そういうやつです(たぶん)。</p>

<p>本当はこの手のものは、開発者側がちゃんと理解して使用していくべきなんでしょうが、いろいろと敷居高い感がいなめない。それに、ユーザーもそういうの意識できる人って少ないですしね。</p>

<h3>String modLanguage default &ldquo;java&rdquo;</h3>

<p>mod を作製する際に用いられた言語の設定。</p>

<p>日本語とかそういう「言語」ではなく、「プログラミング言語」です。&#8221;java&#8221; 以外に &ldquo;scala&rdquo; が指定できます。バイトコード変換時に必要になってくるんだと思います。</p>

<p>まぁ scala で mod 作る好きものな人は説明しなくてもわかるはずなので省略。</p>

<h3>String asmHookClass default &ldquo;&rdquo;</h3>

<p>この mod からロードされるクラスに ASM を適用するための、フッククラスの FQDN を指定します。</p>

<p>たぶん簡易的な coremod 設定みたいな感じです。そういうことやるコア層に説明は不要だろうって事で省略。</p>

<h2>結局@Modには何を指定すればいいの？</h2>

<p>modid は必須です。それ以外は全部オプションです。つまりはそういうことです。</p>

<p>共存させたくない mod がある場合や、マイクラのバージョンを限定したい場合を除けば、普通は modid だけ指定すればOKでしょう。他の値のうちユーザーに伝える情報として重要になるものは mcmod.info と version.properties で指定ができるため、わざわざソースコード内ハードコードしておく必要はないとおもいます。</p>

<hr />

<p>しかし改めてみてみると、すごい充実してる。FMLヤバい。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mcmod.info の要素と機能についてのメモ]]></title>
    <link href="http://blog.awairo.net/blog/2013/05/05/mcmod-dot-info/"/>
    <updated>2013-05-05T19:24:00+09:00</updated>
    <id>http://blog.awairo.net/blog/2013/05/05/mcmod-dot-info</id>
    <content type="html"><![CDATA[<p>各項目の説明とか。</p>

<!-- more -->


<h1>mcmod.infoの要素と機能についてのメモ</h1>

<p>FML645現在、mcmod.info からは以下の項目がロードされていました。</p>

<pre><code>[
{
  "modid": "net.awairo.minecraft.xxx",
  "name": "awa sample mod",
  "description": "this mod is sample.",
  "url": "http://alalwww.github.io/",
  "updateUrl": "http://alalwww.github.io/",
  "logoFile": "logo.png",
  "version": "1.0.0",
  "credits": "By alalwww",
  "parent": "",
  "authors": ["alalwww"],
  "requiredMods": [],
  "dependencies": [],
  "dependants": [],
  "useDependencyInformation": "true"
}
]
</code></pre>

<h2>mcmod.info 各項目の簡単な解説</h2>

<p>mcmod.info は単純な json ファイルです。jsonの仕様については他文献などを漁ってください。javascriptのオブジェクトと似た書式なので、触ったことある人ならすぐに分かると思います。</p>

<p>値に指定できるのは「文字列」値と「配列」値の2種があり、項目ごとに決まっています。</p>

<h3>modid</h3>

<ul>
<li>文字列</li>
</ul>


<p>mod の識別子を設定します。</p>

<p>@Modアノテーションの modId で指定したものと一致させる必要があります。</p>

<p>id は必ずユニーク値でないといけないため、mod 固有のパッケージ名を指定するのがオススメ。</p>

<p>蛇足ですが、javaにおけるパッケージ名は、ユニークであることが保証されているドメイン名を利用するのが一般的です。とはいえ、最近は「どうせ重複することなんかねーよ！うちのドメイン長いから冗長になるんだよボケェ！」って界隈も増えてきているので、必ずドメインを使わないといけないわけではありません。</p>

<p>ドメインを使いたいけど持っていないって場合は GitHub Pages のURLを利用する手や、DDNSをとってそれを使う手もあります。modの名前と同じでも大丈夫ですが、世界中で常に一意であることが保証されているドメインと違い、重複する可能性は残ります。とはいえ現実的に考えて、minecraft の userid + mod名 とかなら重複する可能性はないと思いますので、そういうのでもOK。</p>

<p>さらに蛇足ですが、FMLがmodの情報を出力する際に指定しているロガーの名前も、modidが使用されています。そのため、logging.properties でmod毎にログ出力の制御なんかも可能みたいです。試してないけど。</p>

<h3>name</h3>

<ul>
<li>文字列</li>
</ul>


<p>mod の名称を設定します。</p>

<p>こちらは重複してもOKな値ですが、紛らわしいのでなるべく他と被らない「ステキ」で「ナイス」な名前を指定しましょう。ここで指定した名前が mod 一覧に表示されます。@Modアノテーションで指定した名前よりも優先されるようです。日本語も使えるようですが、英数のみのほうが無難じゃないかなと思います。</p>

<h3>description</h3>

<ul>
<li>文字列</li>
</ul>


<p>modの概要の説明文を設定します。</p>

<p>英文のほうが無難だとは思いますが、現在は日本語も大丈夫みたいです(昔はダメだった気がします)。Mod一覧でModを選択した際に、一番したに表示されます。長い文章も改行されて表示されます。</p>

<h3>url</h3>

<ul>
<li>文字列</li>
</ul>


<p>mod のサイトを示すURLです。ここ見れば最新版DLできるよ的なURLを設定しておきましょう。</p>

<h3>updateUrl</h3>

<ul>
<li>文字列</li>
</ul>


<p>mod のアップデートサイトを示すURLです。現在のところmod一覧に表示される以外では使われていません。</p>

<p>今後自動更新などに対応する目的で用意されているものかもしれません。(FMLのissueでそういった話題が出てた気がします。)</p>

<h3>logoFile</h3>

<ul>
<li>文字列</li>
</ul>


<p>mod一覧で表示されるmodのロゴファイルパスを設定します。</p>

<p>mod の zip ファイルのルートからのパスを指定します。対応している画像フォーマットは不明ですが、png では表示できるのを確認しています。画像サイズの制限があるのかも不明ですが、他modに合わせて 200 x 72 とするのが無難ではないかと思います。</p>

<h3>version</h3>

<ul>
<li>文字列</li>
</ul>


<p>modのバージョンを設定します。(多分表示のみで使われるバージョン。)</p>

<p>このバージョンは mod のメタデータに持つバージョンで、@Mod アノテーションで指定されるバージョン(version.propertiesからも指定可能)とは別のものとして扱われています。また、依存関係チェックの際のバージョンとしては使用されない値のようです。</p>

<p>mod一覧でにVersionはこのように表示されています。</p>

<pre><code>Version: [mcmod.infoで設定したバージョン] ([Modアノテーションまたはversion.propertiesで設定したバージョン])
</code></pre>

<p>先に表示されているのが、mcmod.info で指定したバージョンです。括弧書きのほうが @Mod アノテーションで設定されているバージョンとなります。おそらくユーザーライクな表示用バージョンと、依存関係のチェックなどでも使用する内部的なバージョンを分けるためのに分けてあるのだと思います。</p>

<p>なお、先にも記載していますが、@Modアノテーションで設定するバージョン値は version.properties ファイルから指定することができます。別記事で書きます。</p>

<h3>credits</h3>

<ul>
<li>文字列</li>
</ul>


<p>クレジットを設定します。</p>

<p>なんとなく馴染みが薄い感がありますが、個人開発のmodであれば個人名など、グループで開発しているのであれば、グループ名などを指定するような感じです。</p>

<p>アニメのEDの最後とかに表示される「○○製作委員会」とか、そういう感じです。</p>

<h3>parent</h3>

<ul>
<li>文字列</li>
</ul>


<p>親 mod のidを設定します。</p>

<p>他mod の add-on を作成する場合などに利用するものです。</p>

<p>ここで親modを指定した場合、mod一覧には表示されないようになり、親として指定したmodの情報に、子 mod 名として表示されるようになります。</p>

<h3>authors</h3>

<ul>
<li>配列</li>
</ul>


<p>modの作者の一覧を設定します。</p>

<p>配列で指定します。</p>

<h3>requiredMods</h3>

<ul>
<li>配列</li>
</ul>


<p>必須 mod の一覧を設定します。</p>

<p>useDependencyInformation を有効に指定しないと意味がありません。</p>

<p>「modid」または「modid@バージョン」という書式(別記事で解説予定)の文字列で複数指定ができます。ただし、ここで指定したバージョンはFML645現在チェックには使用されません。しかし、必須チェックが下記の依存関係チェックよりも先に行われ、エラーメッセージにもバージョンが表示されるようになります。そのため、必須modのバージョンも指定したいのであれば、ここにもバージョンを指定しておくほうが無難です。</p>

<h3>dependencies</h3>

<ul>
<li>配列</li>
</ul>


<p>自身より先に初期化が行われる必要がある mod の一覧を設定します。</p>

<p>useDependencyInformation を有効に指定しないと意味がありません。</p>

<p>ここで指定したmodは、自身より先に初期化が行われます。「modid」または「modid@バージョン」という書式(別記事で解説予定)の文字列で複数指定ができます。依存するModのバージョンによる条件の指定が有効です。</p>

<h3>dependants</h3>

<ul>
<li>配列</li>
</ul>


<p>自身より後に初期化が行われる必要がある mod の一覧を設定します。</p>

<p>useDependencyInformation を有効に指定しないと意味がありません。</p>

<p>ここで指定したmodは、自身より<del>先</del>後に初期化が行われます。「modid」または「modid@バージョン」という書式(別記事で解説予定)の文字列で複数指定ができます。依存するModのバージョンによる条件の指定が有効です。</p>

<h3>useDependencyInformation</h3>

<ul>
<li>文字列</li>
</ul>


<p>mcmod.info に書かれた依存関係の情報をmodの読み込み時に使用するかの設定です。</p>

<p>文字列 &ldquo;true&rdquo; を指定した場合のみ有効になります。それ以外の値が指定されたか、何も指定されていない場合、mcmod.infoの情報は実行時に全てクリアされます。つまり、この値をtrueにしないと依存関係チェックは行われません。ただし、@Mod の useMetadata より優先度が低いため、あちらが true に設定された場合は mcmod.info の情報はクリアされます。</p>

<hr />

<p>20 June, 2013 誤記を修正(つやぴん氏thx)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopressカスタマイズ2]]></title>
    <link href="http://blog.awairo.net/blog/2013/02/24/blog-customization2/"/>
    <updated>2013-02-24T11:31:00+09:00</updated>
    <id>http://blog.awairo.net/blog/2013/02/24/blog-customization2</id>
    <content type="html"><![CDATA[<p>主にテーマの改造など。</p>

<!-- more -->


<h1>色々設定変更してみた2</h1>

<h2>サイトの言語を日本語に変更</h2>

<p>HTMLのlang属性が英語 (en) になっているのを日本語 (ja) に変更する。</p>

<p>octopress/source/_includes/head.html</p>

<pre><code>&lt;html class="no-js" lang="en"&gt;
</code></pre>

<p>を</p>

<pre><code>&lt;html class="no-js" lang="ja"&gt;
</code></pre>

<p>に変えるだけ。</p>

<p>日本語しか書かないならやっておいていいと思います。英語ページになってると、Chromeさんの翻訳するかの確認とか出てきたりして地味にうざったかったです。</p>

<h2>スタイル変更など</h2>

<p>octpress/sass/ 以下の各 *.scss ファイルを修正するだけ。sass については、ぐぐればもっと詳しいサイトが出てくると思うので詳細は割愛します。</p>

<p>デフォルトのテーマを使っているので、以下はデフォルトのテーマについてのみ。だけどおそらく他のテーマでもおおよそ同じはず。</p>

<h3>読み込み順</h3>

<p>最初に読み込まれるのは screen.scss ファイルで、このファイルを基点に、他の scss ファイルが読み込まれる。この screen.scss に定義されている読み込み順序はカスタマイズする上で重要になる。</p>

<p>scss ファイルには、多くの値に変更できるデフォルト値が定義されている。そして、custom/ 以下の scss ファイルでデフォルト値を上書きできるようになっている。そのため、殆どのスタイル設定変更は custom/ 以下のファイルを修正するだけで行える。</p>

<p>_styles.scss は独自スタイル設定を追加するためのファイルで、最初は何も記載されていない。見た目を変更するようなスタイルをここで定義できる。読み込み順序は一番最後なので、優先度を変えたりして、他かのスタイル設定を上書きしたりする事が可能になる。</p>

<p>何処のスタイルが修正されるかが分かり辛いものが多いのが難点。私は、Chromeの開発者ツール(F12キー)を見ながら、要素に適用されているスタイルを追っかけ、スタイルセレクタを確認して、scssから探し出して…とやりましたが、ちょっとめんどくさかったです…。</p>

<h3></h3>

<p>とりあえず、以下のように設定してみました。</p>

<p>_colors.scss</p>

<pre><code>$header-bg: #520;
</code></pre>

<p>_fonts.scss</p>

<pre><code>$sans: "MeiryoKe_PGothic", "メイリオ", sans-serif;
$serif: "MeiryoKe_PGothic", "メイリオ", sans-serif;
$mono: "MeiryoKe_Gothic", monospace;
$heading-font-family: "MeiryoKe_PGothic", "メイリオ", sans-serif;
$header-title-font-family: "Tekton Pro Ext", "MeiryoKe_PGothic", "メイリオ", sans-serif;
$header-subtitle-font-family: "MeiryoKe_PGothic", "メイリオ", sans-serif;
</code></pre>

<p>_layout.scss</p>

<pre><code>$header-font-size: 1em;
$header-padding-top: 1.5em;
$header-padding-bottom: 1.5em;
$indented-lists: true;
</code></pre>

<p>_styles.scss</p>

<pre><code>.entry-title {
    padding-left: 5px;
    padding-bottom: 3px;
    border-left: 15px solid #520;
    border-bottom: 3px solid #520;
}
.blog-index &gt; article &gt; header p.meta {
    margin-left: -15px;
    a {
        font-size: 60%;
    }
}
.entry-content h1 {
    margin-left: 5px;
    margin-right: 5px;
    border-top   : 2px dotted #ccc;
    border-bottom: 2px dotted #ccc;
}
</code></pre>

<p>MeiryoKe勢です。デフォメイリオの文字間落ち着かない、他OSのデフォフォントを華麗にスルーしちゃってますが、その手のOS使いは自分で解決してるはずなので気にしないことに。どうせ確認する環境ないし。</p>

<hr />

<p>他にもなにか変えたとこあった気もするけど、忘れちゃったのでここまで。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopressカスタマイズ1]]></title>
    <link href="http://blog.awairo.net/blog/2013/02/19/blog-customization1/"/>
    <updated>2013-02-19T03:47:00+09:00</updated>
    <id>http://blog.awairo.net/blog/2013/02/19/blog-customization1</id>
    <content type="html"><![CDATA[<p>はてブボタン追加やsharingの表示位置の追加、サイドメニューのカスタマイズ、続きを読むボタン表示、設定の見直しなどについてのメモ(1)。</p>

<!-- more -->


<h1>色々設定変更してみた</h1>

<h2>はてブボタン追加</h2>

<p>はてなは使うことないけど、使ってる人は多いので媚売っとこってことで。</p>

<p>source/_includes/post/sharing.html</p>

<div><script src='https://gist.github.com/4979540.js'></script>
<noscript><pre><code>&lt;div class=&quot;sharing&quot;&gt;
  {% if site.twitter_tweet_button %}
  &lt;a href=&quot;http://twitter.com/share&quot; class=&quot;twitter-share-button&quot; data-url=&quot;{{ site.url }}{{ page.url }}&quot; data-via=&quot;{{ site.twitter_user }}&quot; data-counturl=&quot;{{ site.url }}{{ page.url }}&quot; &gt;Tweet&lt;/a&gt;
  {% endif %}
  {% if site.hatena_bookmark_button %}
  &lt;a href=&quot;http://b.hatena.ne.jp/entry/{{ site.url }}{{ page.url }}&quot; class=&quot;hatena-bookmark-button&quot; data-hatena-bookmark-layout=&quot;simple-balloon&quot; title=&quot;このエントリーをはてなブックマークに追加&quot;&gt;&lt;img src=&quot;http://b.st-hatena.com/images/entry-button/button-only.gif&quot; alt=&quot;このエントリーをはてなブックマークに追加&quot; width=&quot;20&quot; height=&quot;20&quot; style=&quot;border: none;&quot; /&gt;&lt;/a&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;http://b.st-hatena.com/js/bookmark_button.js&quot; charset=&quot;utf-8&quot; async=&quot;async&quot;&gt;&lt;/script&gt;
  {% endif %}
  {% if site.google_plus_one %}
  &lt;div class=&quot;g-plusone&quot; data-size=&quot;{{ site.google_plus_one_size }}&quot;&gt;&lt;/div&gt;
  {% endif %}
  {% if site.facebook_like %}
  &lt;div class=&quot;fb-like&quot; data-send=&quot;true&quot; data-width=&quot;400&quot; data-show-faces=&quot;false&quot;&gt;&lt;/div&gt;
  {% endif %}
&lt;/div&gt;
</code></pre></noscript></div>


<p>5～7の部分がそれ。後述のコンフィグファイルで表示制御も追加してます。</p>

<h2>記事タイトルの直下に sharing を追加</h2>

<p>スクロールせずに押したいかもしれないので。</p>

<p>source/_includes/article.html</p>

<div><script src='https://gist.github.com/4979575.js'></script>
<noscript><pre><code>{% unless page.no_header %}
  &lt;header&gt;
    {% if index %}
      &lt;h1 class=&quot;entry-title&quot;&gt;&lt;a href=&quot;{{ root_url }}{{ post.url }}&quot;&gt;{% if site.titlecase %}{{ post.title | titlecase }}{% else %}{{ post.title }}{% endif %}&lt;/a&gt;&lt;/h1&gt;
    {% else %}
      &lt;h1 class=&quot;entry-title&quot;&gt;{% if site.titlecase %}{{ page.title | titlecase }}{% else %}{{ page.title }}{% endif %}&lt;/h1&gt;
    {% include post/sharing.html %}
    {% endif %}
    {% unless page.meta == false %}
      &lt;p class=&quot;meta&quot;&gt;
        {% include post/date.html %}{{ time }}
        {% if site.disqus_short_name and page.comments != false and post.comments != false and site.disqus_show_comment_count == true %}
         | &lt;a href=&quot;{% if index %}{{ root_url }}{{ post.url }}{% endif %}#disqus_thread&quot;&gt;Comments&lt;/a&gt;
        {% endif %}
      &lt;/p&gt;
    {% endunless %}
  &lt;/header&gt;
{% endunless %}
{% if index %}
  &lt;div class=&quot;entry-content&quot;&gt;{{ content | excerpt }}&lt;/div&gt;
  {% capture excerpted %}{{ content | has_excerpt }}{% endcapture %}
  {% if excerpted == 'true' %}
    &lt;footer&gt;
      &lt;a rel=&quot;full-article&quot; href=&quot;{{ root_url }}{{ post.url }}&quot;&gt;{{ site.excerpt_link }}&lt;/a&gt;
    &lt;/footer&gt;
  {% endif %}
{% else %}
&lt;div class=&quot;entry-content&quot;&gt;{{ content }}&lt;/div&gt;
{% endif %}
</code></pre></noscript></div>


<p><del>8行目に読み込み処理追加しただけ。</del></p>

<p>(2012/02/24 追記) <code>{% endif %}</code> の後に <code>{% include post/sharing.html %}</code> を続けると、indexページにも表示されてしまうので、7行目に追加に修正しました。</p>

<h2>「続きを読む &rarr;」の表示方法</h2>

<p>excerpt_linkで設定した、「続きを読みたい場合わっふるわっふる」を追加するのは、記事中にHTMLコメントを書くだけ。</p>

<pre><code>　：
index にも表示される記事

&lt;!-- more --&gt;

個別ページに遷移しないと表示されない記事
　：
</code></pre>

<p>設定とか要らない。</p>

<h2>右メニューのカスタマイズ</h2>

<ul>
<li>AboutMeを追加</li>
</ul>


<p><a href="https://github.com/dharFr/octo-about-me-from-twitter" title="dharFr/octo-about-me-from-twitter · GitHub">これ</a>を流用。READMEにはcloneしてくる手順が書いてあるが、直接ファイルを開いて中身をコピペしてもOK。
ツイッターのフォローをこっちに追加したので、Latest Tweets のフォローボタンは削除。</p>

<div><script src='https://gist.github.com/4979398.js'></script>
<noscript><pre><code>{% if site.twitter_user %}
&lt;section&gt;
  &lt;h1&gt;About Me&lt;/h1&gt;
  &lt;div id=&quot;twitter-profile&quot; style=&quot;margin-top:0.5em;&quot;&gt;
    &lt;p&gt;
      &lt;strong&gt;{{site.author}}&lt;/strong&gt; 
      (&lt;a href=&quot;http://twitter.com/{{site.twitter_user}}&quot;&gt;@{{ site.twitter_user }}&lt;/a&gt;)
    &lt;/p&gt;
    &lt;p&gt;Getting profile from Twitter...&lt;/p&gt;
  &lt;/div&gt;
  &lt;script type=&quot;text/javascript&quot;&gt;
    $.domReady(function(){
        var container = $('#twitter-profile'),
            user = &quot;{{site.twitter_user}}&quot;;
        
        function parseTwLinks(s) {
          var twUrl = &quot;http://www.twitter.com/&quot;
          s = s.replace(/ (@([\w]+))/g, function(match, p1, p2) {
              return &quot; &lt;a href='&quot;+twUrl+p2+&quot;'&gt;&quot;+p1+&quot;&lt;/a&gt;&quot;
          }).replace(/ (#([\w]+))/g, function(match, p1, p2) {
              return &quot; &lt;a href='&quot;+twUrl+&quot;#!/search?q=%23&quot;+p2+&quot;'&gt;&quot;+p1+&quot;&lt;/a&gt;&quot;
          })
          return s
        }

        $.ajax({
            url: &quot;http://api.twitter.com/1/users/show.json?include_entities=false&amp;screen_name=&quot;+user+&quot;&amp;callback=?&quot;
          , type: 'jsonp'
          , error: function (err) { $('#twitter-profile').addClass('error');  }
          , success: function(data) {
              container.html('&lt;img class=&quot;left&quot; src=&quot;http://api.twitter.com/1/users/profile_image/'+user+'.json?size=bigger&quot; alt=&quot;@'+user+'&quot;&gt;&lt;div&gt;&lt;strong&gt;'+data.name+'&lt;/strong&gt; (&lt;a href=&quot;http://twitter.com/'+user+'&quot;&gt;@'+user+'&lt;/a&gt;)&lt;/div&gt;&lt;div style=&quot;font-size:80%&quot;&gt;'+data.location+'&lt;/div&gt;&lt;div&gt;&lt;a href=&quot;http://twitter.com/{{ site.twitter_user }}&quot; class=&quot;twitter-follow-button&quot; data-show-count=&quot;{{ site.twitter_show_follower_count }}&quot;&gt;Follow @{{ site.twitter_user }}&lt;/a&gt;&lt;/div&gt;&lt;p style=&quot;clear:both;font-size:80%&quot;&gt;'+parseTwLinks(data.description)+'&lt;/p&gt;');
            }
        })
      });
  &lt;/script&gt;
&lt;/section&gt;
{% endif %}
</code></pre></noscript></div>


<p>作成したファイルは source/_includes/custom/asides/aboutmetwitter.html に配置して使った。</p>

<h2>_config.yml で変更したもの</h2>

<pre><code># 続きを読む場合のリンクメッセージ
excerpt_link: "続きを読む &amp;rarr;"

# 右メニューに aboutmetwitter.html 追加
default_asides: [custom/asides/aboutmetwitter.html, asides/recent_posts.html...

* Disqus Comments を有効化
disqus_short_name: awalog
disqus_show_comment_count: true

# Google Analytics 有効化
google_analytics_tracking_id: UA-xxxxxxxx-x

# ツイートボタンの表示
twitter_tweet_button: true

# フォローボタン非表示
twitter_follow_button: false

# Google+1ボタン表示
google_plus_one: true

# Facebook Like
facebook_like: true
</code></pre>

<p>Disqus Comments は、Twitterアカウントで認証して short name を取得。Google Analytics も手持ちのgmail用のアカウントで取得。</p>

<p>あと、変えることはない気がするけど</p>

<pre><code># hatena bookmark
hatena_bookmark_button: true
</code></pre>

<p>も足してみた。</p>

<hr />

<p>とりあえず、これくらいかな。</p>

<p>あうあう寝なきゃ。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[java.awt.List とお別れする方法]]></title>
    <link href="http://blog.awairo.net/blog/2013/02/18/ignore-java-awt-list/"/>
    <updated>2013-02-18T01:28:00+09:00</updated>
    <id>http://blog.awairo.net/blog/2013/02/18/ignore-java-awt-list</id>
    <content type="html"><![CDATA[<p>Eclipseの使い方的な内容</p>

<!-- more -->


<h1>Modderあるあるｗｗｗ</h1>

<p>java.util.List が使いたいので、list とタイプして…</p>

<p><img src="http://blog.awairo.net/images/posts/2013/02/18/ignore-java-awt-list/list1.png" alt="listまでタイプしたソースコード画像" /></p>

<p>補完で自動インポートをかけようとすると…</p>

<p><img src="http://blog.awairo.net/images/posts/2013/02/18/ignore-java-awt-list/list2.png" alt="コンテンツアシストに java.util.List と java.awt.List が表示されているソースコード画像" /></p>

<p>java.awt.List…てめーはダメだ！</p>

<p>Eclipse で Java コーディングしてるとき、同じような経験をした事がある人は少なくないと思います。StringUtil(s) クラスあたりは、単純クラス名重複率のトップクラスなんじゃないでしょうか。プロジェクト毎、ライブラリ毎にいたりして、使うのはプロジェクト用のものと決まっているのに、毎度対話を求められたりすると、地味にめんどくさくて気になります。</p>

<h1>使わないクラスはフィルタしちゃおう</h1>

<p>実はちょうど Twitter でこの話題が出てたのと、前から気になってたので、調べてみました。</p>

<h2>参考にしたサイト</h2>

<p><a href="http://d.hatena.ne.jp/Yamashiro0217/20090322/1237707686" title="Yamashiro0217の日記">Eclipse のコード補完 (Complete) で java.awt.List とかを補完候補から除外したい場合の設定 &ndash; Yamashiro0217の日記</a></p>

<p>やっぱ同じこと思う人いますよね。一発でみつかりました。</p>

<h2>設定方法</h2>

<p>すごく簡単。
型フィルタの設定に、除外したいクラスの完全修飾名か、パッケージ名にワイルドカードを付けて追加するだけ。</p>

<ol>
<li>ウィンドウ</li>
<li>設定</li>
<li>Java</li>
<li>外観</li>
<li>型フィルター
<img src="http://blog.awairo.net/images/posts/2013/02/18/ignore-java-awt-list/typefilter.png" alt="型フィルタのウィンドウイメージ" /></li>
</ol>


<p>とりあえず、私は Entity や Point なども除外したかったので、以下を追加しました。</p>

<ul>
<li>java.awt.*</li>
<li>javax.swing.*</li>
<li>org.w3c.dom.*</li>
</ul>


<p><img src="http://blog.awairo.net/images/posts/2013/02/18/ignore-java-awt-list/list3.png" alt="java.awt.Listが表示されなくなったソースコード画像" /></p>

<p>これで邪魔者はいなくなった！</p>

<p>参考にしたサイトにも書いてありましたが、プロジェクト単位での設定ができないので、同一ワークスペース内でプロジェクトごとに変えることができない、ってのが難点ってとこでしょうか。でもまぁそのあたりは、コードテンプレートなんかを駆使し、完全修飾名を補完できるようにしてしまえば、多分困ることはないかなって気がします。</p>

<p>むしろそっちの方がクラスごとにインポートしてるクラスがちがう、なんてことも起きにくくなっていいのかも…？</p>

<hr />

<p>ん…？</p>

<p><img src="http://blog.awairo.net/images/posts/2013/02/18/ignore-java-awt-list/typefilter-example.png" alt="型フィルタのウィンドウイメージ" /></p>

<p>き、きっと &ldquo;a&rdquo; で始まるからだよね…(´・ω・｀)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GitHub + Octopress 試してみた]]></title>
    <link href="http://blog.awairo.net/blog/2013/02/17/tried-github-octopress/"/>
    <updated>2013-02-17T08:26:00+09:00</updated>
    <id>http://blog.awairo.net/blog/2013/02/17/tried-github-octopress</id>
    <content type="html"><![CDATA[<p>参考にしたサイト、設定、使い方などをメモ。</p>

<!-- more -->


<h1>なにこれ</h1>

<p><a href="https://github.com">GitHub</a>で<a href="http://octopress.org">Octpress</a>つかってblogっぽいことできるらしいので試してみた。</p>

<p>GitHub はここ見るような人なら知ってると思うので割愛。</p>

<p>Octpressは技術屋が好きそうな感じのCUIベースで静的HTMLを作成する、ブログっぽいウェブサイトの生成ツール的なものだという認識してます。なんか間違ってる気もしますが、とりあえずそういう使い方しかしてないので気にしないことにします。ruby製みたいなので、そこらを触れる人は本体も好きに弄れそう。</p>

<p>で、そのタコプレスがなんか GitHub と連携させれて、HitHubのユーザーIDのサブドメインも使わして貰えるらしいので、ちょっとやってみました。</p>

<p>手順は何番煎じだよって感じなので割愛。(めんどくさい)</p>

<p>なので、使用感とかそっちのほうを少し書いてってみます。</p>

<h2>参考にしたサイトとか</h2>

<ul>
<li><a href="http://tokkonopapa.github.com/blog/2011/12/30/octopress-on-github-and-bitbucket/" title="Octopressのインストールから運用管理まで - T.I.D.">Octopressのインストールから運用管理まで &ndash; T.I.D.</a></li>
<li><a href="http://blog.glidenote.com/blog/2011/11/07/install-octopress-on-github/" title="GithubとOctopressでモダンな技術系ブログを作ってみる - Glide Note - グライドノート">GithubとOctopressでモダンな技術系ブログを作ってみる &ndash; Glide Note &ndash; グライドノート</a></li>
<li><a href="http://mattn.kaoriya.net/software/lang/ruby/20111017205717.htm" title="Big Sky :: githubとjekyllとoctopressで作る簡単でモダンなブログ">Big Sky :: githubとjekyllとoctopressで作る簡単でモダンなブログ</a></li>
</ul>


<p>リポジトリの統合とかはとりあえず読み飛ばしてるけど、とりあえず動いたのでよし。</p>

<p>今度…いつか本気出す…。</p>

<h2>ちなみに環境はこんな感じ</h2>

<p>普段使ってるPCはWin7で、Rubyとかも基本使ったりしてないので未インストール、ってことでサーバー機のVM上で動かしてるSSHサーバーに一式インストールして環境構築しました。</p>

<p>サーバーのOSはCentOS5で、rubyのバージョンとか面倒なこともありましたが、参考にさせてもらったサイトでそのあたり既に解説されてたので特に苦労もなくさくっと環境できあがり。
しかし、記事書くのに TeraTerm で繋いでそこで編集して…ってのは、Vimビームも口からLispもまだ出せそうにはない、にわかのWin勢にはちょっと辛いので、メインPCのほうから記事を編集できる環境を用意してみました。</p>

<p>…といっても、特に手の込んだことはなにもなく、WinSCP で接続してーの、サクラエディタで編集してーの、TeraTermからデプロイを行いーの、っていう実にひねりのない環境。なので割愛。(めんどくさい)</p>

<p>WinSCPに触ったのはかなり久しぶりだけど、なんかダブルクリックで任意のエディタでファイル開けて、保存したら自動でアップロードしてくれる、なかなか使いやすい機能ついててとても便利になってました(前からあったっけ…？)。これだとエクスプローラからファイル操作してるのと殆ど変わらない感じ。</p>

<p>ブラウザから入力とかせずとも、使い慣れたエディタだけでサクサク書けるってのはやっぱいいね。基本ブラウザから書き込むことになる某所のトピックの編集では何度やらかしたことか…。</p>

<h2>設定とか</h2>

<p>とりあえずは _config.yml を弄るくらい。</p>

<p>日時フォーマットとかちょっと微妙かなー、なんて思ってたら、_config.yml にめっちゃ書いてありました。説明書を読まないっぷりがやばい。反省。</p>

<p>GitHub のリポジトリ表示とか、最近のツイート表示なんかも、デフォで連携プラグインが入ってるみたいで、上記設定ファイルを弄るだけで使えます。</p>

<p>他にも、FaceBook のいいねボタン、Google+のなんかのボタン(よく知らない)、<a href="http://disqus.com">Disqus</a> を利用したコメント欄とかもつけれるみたいだけど、アカウント準備面倒だったのでそのうち本気出すってことで先延ばし。</p>

<p>どうせコメントとかつかないので、コメ欄あっても寂しいだけじゃんか｡ﾟ(ﾟ∩´﹏`∩ﾟ)ﾟ｡</p>

<p>もし何かあったら、twitter のほうにでもリプ投げ付けてください。</p>

<h2>テーマとかないの</h2>

<p>あるっちゃあるけど<a href="https://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes" title="3rd Party Octopress Themes · imathis/octopress Wiki">公式にあるの</a>はめっちゃ少ないみたい。</p>

<p>いくつか試してみたけど、基本的に日本語向きじゃないし、どうもしっくり来なくてデフォの classic に戻しました。基本的には他のテーマを参考にしたりしつつ、自分の好みに合わせていじってくって方向になりそう。</p>

<p>とはいえセンス的なものが私に未実装なので、いつになるかは…。</p>

<p>探せばもすこし公式にないテーマも見つかる気はするけど、言語の壁が厚くて英語戦闘力2には難易度高そう…。</p>

<h2>記事の投稿とか</h2>

<p>一通りやることやったら、テキストファイルを編集するだけなのでCUIに抵抗がない人だとかなり楽そう。</p>

<p>カレントを octpress に移動して</p>

<pre><code>$ rake new_post["URL用の英語タイトル"]
</code></pre>

<p>こんな感じでコマンド実行すると、ポスト本文のファイルが <code>octpress/source/_posts/</code> 以下に生成される。
あと、生成されるファイルには生成日とかも入ってて、別に「タイトル」である必要はなさそうなので、その火の中で一意になる連番とかそういうのでも問題はないハズ。</p>

<p>あとは生成されたテキストファイルをゴリゴリ編集していくだけで完成。
書式は Markdown。これは、HTML簡単に理解してて、Wiki編集とかやる人だったら割と親しみやすい書式だと思う。基本使うのは見出しと本文とリスト、くらい。<a href="http://blog.2310.net/archives/6" title="blog::2310 » Markdown文法の全訳">このあたり</a>みればすぐ覚えれるくらい簡単。</p>

<p>ってか Markdown は某フォーラムでも使いたいね…。URLの参照すごい便利。</p>

<p>書いた内容の確認は</p>

<pre><code>$ rake preview
</code></pre>

<p>で、ポート4000でプレビュー用のHTTPサーバーが起動するので、<code>http://サーバーIP:4000/</code> でブラウザから直接動かせるサイトにアクセスしながら確認できる。HTMLはリクエスト毎に変更チェックして生成してるみたいで、ブラウザ更新するだけで編集結果が即反映されるから確認がすごい楽ちん。サクラエディタで書いて保存→(WinSCPが勝手にアップロードしてくれる)→ブラウザ更新ボタンを押せば最新プレビュー。やばい。ローカルで静的HTMLファイルを編集してるような感じで作業できるのはすごくいい。</p>

<p>あとは、プレビューサーバーを停止するときは、書いてあるとおりコンソールで<code>Ctrl+C</code>押すだけ。</p>

<p>特に問題なければ、生成してデプロイ(push)しておしまい。</p>

<pre><code>$ rake generate
$ rake deploy
</code></pre>

<p>2つもコマンド打つのがめんどくさかったら、</p>

<pre><code>$ rake gen_deploy
</code></pre>

<p>でやれば生成してpushまでやってくれる。</p>

<p>他にやったことは、ファイル生成のコマンド入力する作業の手抜きのために WinSCP のコマンドで <code>rake new_post['!?title?!']</code> ってやって、新規ポスト作成するように設定追加したくらい。これで記事を起こすとこまではコマンドライン操作なしでできるようになりました。他のもWinSCPからやれないかと画策してみたけど、プレビュー鯖起動とかデプロイは、応答待ちになったり鍵パスが対話式だったりして、WinSCPから直接やるのは難しそうなので、TeraTerm 経由で操作するって感じに落ち着きました。</p>

<h1>てことでblogはじまめした</h1>

<p>環境作って試したりしてみたのは少し前だけど、このまま放置しててもなんかもったいないので、メモ帳代わりに細々となにかしら書いてみようかと思い、記事おこしてみました。</p>

<p>調べたり覚えたりしたことを忘れないようにちゃんと書き残す習慣を身につけれるようになりたい。
そして出来る子アッピルしていきたい。</p>

<p>はてなダイヤリーを1記事で蒸発した経歴の持ち主なので、どうなることやらですが。</p>

<h2>方向性とか</h2>

<p>とりあえず、マイクラModding周りのこととか、お仕事で触ったりしたものとかのメモを残していく方向で。
見た目まわりは改めて少しずついじっていくつもり。いきたい。とりあえずは先延ばし。</p>

<hr />

<p>って寝落ちなど挟みつつ色々弄ってたらもう8時半じゃん…だめじゃん…。</p>
]]></content>
  </entry>
  
</feed>
