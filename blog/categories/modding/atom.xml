<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: modding | AwAlog]]></title>
  <link href="http://blog.awairo.net/blog/categories/modding/atom.xml" rel="self"/>
  <link href="http://blog.awairo.net/"/>
  <updated>2014-01-02T02:32:06+09:00</updated>
  <id>http://blog.awairo.net/</id>
  <author>
    <name><![CDATA[alalwww]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ちゃちゃっとマイクラMOD開発環境をつくる(1)]]></title>
    <link href="http://blog.awairo.net/blog/2014/01/02/shortcut-of-making-workspace-for-mc-modding1/"/>
    <updated>2014-01-02T02:25:00+09:00</updated>
    <id>http://blog.awairo.net/blog/2014/01/02/shortcut-of-making-workspace-for-mc-modding1</id>
    <content type="html"><![CDATA[<p>MinecraftのModding環境の構築手順についてのメモ。</p>

<p>前編的なやつで、主にEclipseについていろいろ。</p>

<!--more-->


<hr />

<p>もとは1記事で書いてたんですが、Eclipseについて長く書きすぎたので分割しました。</p>

<p>Forgeのインストール以降については次の記事になります。</p>

<h1>対象</h1>

<ul>
<li>Javaで開発ができる</li>
<li>IDE(Eclipse)が使える</li>
<li>Google先生と仲がいい</li>
</ul>


<h1>準備するもの</h1>

<ul>
<li>Java SE Development Kit(JDK) (Pleiadesのjava版のfullを使うならなくてもOK)</li>
<li>Eclipse (最低限JDTが入っていればOK)</li>
</ul>


<h1>JDKの準備</h1>

<ol>
<li><a href="http://www.oracle.com/technetwork/jp/java/javase/downloads/">Oracle</a>から任意のJDKをダウンロードする。</li>
<li>インストールする。</li>
<li>環境変数<code>JAVA_HOME</code>に、JDKへのパスを設定する。</li>
</ol>


<h2>どれをダウンロードすればいいの？</h2>

<p>この記事を書いている時点での最新はJava7のupdate45です。上記サイトからOracleの英語サイトに行き、JDKのダウンロードを選び、「Java SE Development Kit 7u45」の一番上のライセンスを確認したのち同意し、自分の環境用のJDKを選べばOK。Windowsの32bit版であればWindows x86、64Bit版であればx64を選びます。</p>

<p>ダウンロードが完了したら、実行してインストールします。環境設定を行う必要があるので、インストール先が何処になるかはちゃんと覚えて起きましょう。</p>

<p>注意するべき点は、JREではなくJDKをダウンロードする、ということくらいです。</p>

<p>ちなみに、JDKのインストーラーで追加されるJREは、インストールしなくても問題ないです。おそらく、自動更新で最新版になってるはずなので。</p>

<h2>Eclipse付属のを使うのでJDKインストールしないで進めたい。</h2>

<p>特に試してないので、動確はとってませんが、多分pleiades付属のJRE(JDKとかも同梱)を環境変数JAVA_HOMEに設定しておけば問題無いです。うろ覚えですが、たしかpleiades/java/jre7とかだった気がします。そのあたりのフォルダーのパスをJAVA_HOMEに設定すれば、多分いけます。</p>

<h2>環境変数の設定について</h2>

<p>のちの記事にでてくる、Gradleコマンドを実行するにあたり、<a href="http://gradle.monochromeroad.com/docs/userguide/installation.html">環境変数にJDKへのパス設定が必要</a>となります。環境変数の設定方法などは、<a href="http://goo.gl/orGSNA">この先生が詳しい</a>ので、どうしてもわからなければ聞いてください。</p>

<p>自分は、JAVA_HOMEにJDKを足して、パスに%JAVA_HOME%/binを足しています。ですが、JDKを頻繁に更新しなさそうであれば、パスへの追加はしないほうがいいかもしれません。(JDKはJREみたいな自動更新がないので、最新JREが参照されなくなるかもしれない)</p>

<p>なお、Gradleへのパス設定は、ForgeにGradleラッパーが付属しているので、特に行う必要はありません。そのため、事前にGradleのインストールも不要です。</p>

<h1>Eclipseの準備</h1>

<p>統合開発環境(IDE)にはEclipseを使用します。</p>

<p>Pleiades Java版 を使うケースと、Pleiades Platform版 を使うか、公式のEclipseを使う(日本語化しない)ケースについて、説明します。</p>

<h2>そもそもなぜPleiades？</h2>

<p>Eclipseは、日本語環境を用意するならPleiadesが手っ取り早いです。必要なプラグイン(や不要なプラグイン)を予め導入したうえに、初期設定を一部変更したオールインワンパッケージで配布されているため、とっかかりやすいです。</p>

<h2>Pleiades、沢山あるけどどれを選べばいいの？</h2>

<p>Java開発用か、Platformを選んでください。</p>

<p>Java開発用の場合は、Mod開発に不要なプラグインも多数導入されており、多機能すぎて意味不明なものがいっぱいあり、初心者は混乱しそうな感じだったりします。しかし、Platformの場合は、殆どプラグインが導入されていない状態なので、Java開発ツール(JDT)から全て自分で用意していく必要があり、やっぱり難易度は高いです。</p>

<p>(JavaSE用のPleiadesもあっていいと思うんだけどナァ…)</p>

<p>PleiadesのJavaであっても、TomcatLauncherを始め、いくつかの必要ないプラグインは削除が可能なので、Mod開発に不要なものを削除してから使えば、不要な設定やボタンがいくらか消せます。なので、こだわりがなければ、Java版を導入するほうがいいと思います。</p>

<p>また、さくっと消せないようになってるビルドインプラグインも、手動で頑張れば消せなくはないです。ですが、そこまでやるくらいなら、Platformに自分でJDTや必要なプラグインを導入した方が捗ると思うので、きっちりかっちり開発環境を整えたいのであれば、Platform版をおすすめしておきます。</p>

<p>もちろん、不要なプラグインが入っていて、いらないツールバーや設定があっても気にしないのであれば、Java版をそのまま使うこともできます。多くの人は、多分そうしている気がします。</p>

<p>もしあなたのコンピューターがロースペックであれば、Pleiades無しのEclipseを、選択肢に含めてもいいかもしれません。</p>

<p>Pleiadesは、比較的重たい処理を挟む(動的に日本語翻訳を行う)プラグインなので、ロースペック環境では、パフォーマンスに影響してくるかもしれません(比べた事はないです)。Pleiadesを使わない場合、日本語化されなくなり、JavaDocの日本語化などもなくなりますが、英語に抵抗がなければ、ありかも？</p>

<p>(静的ファイルによる部分的な日本語化方法もあるらしいですが、詳しく知らないので省略します)</p>

<h3>日本語化しない場合について補足</h3>

<p>Pleiadesの場合でも、dropinsフォルダーからPleiadesプラグイン本体を削除しちゃえば、日本語化されなくなります。また、eclipse.iniを編集し、一時的に無効化することもできるみたいです。公式のEclipseを落としてくる場合は、そこから英語と戦うことになるので、それが辛い場合はPleiadesを落としてきて、Pleiadesを削除して使う手もあります。やったことないですが。</p>

<h2>Pleiades Java版の導入手順</h2>

<ol>
<li>Pleiadesの4.3のJava版をダウンロード。</li>
<li>不要なdropinのプラグインを削除</li>
</ol>


<p>2はお好みで。</p>

<h3>Pleiadesダウンロード</h3>

<p><a href="http://mergedoc.sourceforge.jp/">mergedoc</a>からダウンロードしてきます。</p>

<p>32Bit版か64Bit版かは、自分のOSに合わせてください。Window環境であれば、ショートカット「<code>win</code>+<code>page break</code>(右上の方のキー)」か、コンピューター(もしくはマイコンピュータ)を右クリックし、プロパティを選び、「システムの種類」を確認すればわかります。</p>

<p>FullEditionとStandardEditionの違いは、いろいろおまけがついてくるかの違いです。差がわからない人はFullを選んで、いらないものは(Tomcatなど)削除しちゃえばOKです。</p>

<h3>削除してもよさそうなdropinプラグイン</h3>

<p>参考までに、私見と偏見だけで、Java版のプラグインのうち、Mod開発には要らなさそうなものをピックアップしていきます。</p>

<p>削除方法については、pleiadesのサイトのダウンロードのページの下のほうなんかを見てください。つっても、基本的にdropinsフォルダーから削除するだけですが。</p>

<p>MergeDoc(pleiades)だけは、eclipse.iniの修正も必要だと思うので、削除する場合は気を付けてください。</p>

<h4>AmaterasERD / AmaterasUML</h4>

<p>ER図作ったりUMLの図をGuiで作成する、設計関連のプラグイン。不要なら削除してOK。UMLツールとしては、できることが少なすぎて見た目もしょっぱい感じなので、おしごとでもこいつの出番はそんなに多くなかったりする。</p>

<h4>CheckStyle / FindBugs</h4>

<p>好ましくないコーディングスタイルや、バグの要因になりやすいコードをチェックし、指摘してくれる。おしごとコーダーにはほぼ必須プラグインだけれど、個人開発ならなくても問題はない。ただし、有効にすることで、勉強になる指摘を得れるかも知れない。不要であれば削除OK。</p>

<h4>DBViewer</h4>

<p>データベースビューワー。一般的なModdingには不要だと思うので削除してOK。</p>

<h4>EclipseRCP</h4>

<p>リッチクライアント(GUIでグイグイやる感じのアプリケーションとか)の開発用。ModはMinecraftの上で動くものが殆どなので、まず使わない。削除してダイジョブ。</p>

<h4>Limy</h4>

<p>特定パラメーターなどへのJavaDocの自動生成や、ヘッダーコメントの一括追加などができる。あってもなくてもって感じなのでお好みで。</p>

<h4>NTail</h4>

<p>ログファイルビューワー。<code>tail</code>コマンドっぽく巨大ファイルの末尾側だけ読んだりできる…んだと思う。Mod開発で巨大なログファイルを参照することはそうないので、削除OK。</p>

<h4>QuickJUnit</h4>

<p>単体テストツール(JUnit)を便利に使えるようにするプラグイン。テストクラス作成や、テストクラスと、テスト対象クラスの移動が簡単にでき、めっちゃ捗る神プラグイン。テストコードを書くことがあれば残しておくべきだけど、テストコードを書くことがないのなら、なくてもOK。</p>

<h4>Subversive / SubversiveJDT</h4>

<p>Subversion(バージョン管理システムの一種、通称SVN)用のプラグインの一つ。他のプラグインもあるので、入れ替える人もそこそこ居る。必要でなければ削除でOK</p>

<p>そもそも、昨今のバージョン管理の主流はGitになりつつある(偏見補正あり)ので、SVN自体おすすめはしないです。バージョン管理なんてよくわからないって人は、SVNも使わないだろうから、削除してOK。</p>

<h4>TomcatLauncher</h4>

<p>JavaでWebアプリケーションを作る場合によく利用される、Javaが動くWebサーバー「Tomcat」との連携をしやすくするプラグイン。Moddingでは間違いなく必要ないので削除でOK。</p>

<h2>Pleiades Platform版、または素のEclipseの導入</h2>

<p>PleiadesのPlatformは、PleiadesのJavaと同じ方法で入手できるので端折ります。</p>

<p>素のEclipseは、<a href="http://www.eclipse.org/">公式サイト</a>からダウンロードしてきます。この選択をする人なら事故解決できそうなので詳細は端折ります。</p>

<p>おわったおわった！</p>

<h3>JDTとマーケットプレイス・クライアントの導入</h3>

<p>そのままではJava開発ができないので、Java開発ツールプラグイン(JDT)を導入します。</p>

<p>また、プラグインを追加するなら、マーケットプレイスが使えないと始まらないです。最近のEclipseはデフォルトでクライアントが付属しなくなっているので、自分で導入します。ただし、Pleiadesならインストール済みだったと思います。</p>

<h4>手順</h4>

<p>英語でやる人ならわかると思うので、日本語で書きます。英語のままな場合は適せん読み替えてください。</p>

<ol>
<li>Eclipseを起動して、メニューからヘルプを選択。</li>
<li>新規ソフトウェアのインストール。</li>
<li>更新サイトでKeplerを選ぶ。※Eclipseのバージョンにあわせる</li>
<li>&ldquo;java"でフィルターし、プログラミング言語グループの「Eclipse Java 開発ツール」を選択。</li>
<li>&ldquo;market"でフィルターし、一般用ツールグループの「マーケットプレイス・クライアント」を選択。</li>
<li>次へを押して同意してインストール。</li>
</ol>


<p>終わったらEclipseを再起動、もしくは一旦終了してcleanを指定してから起動すれば、完了です。</p>

<h3>入れておいたほうがいいEclipseプラグインとかある？</h3>

<p>自分が導入してるやつから適当にピックアップしてみます。名前だけです。マーケットプレイスで検索すれば大抵はヒットするかと思います。</p>

<h4>Eclipse Color Theme</h4>

<p>テーマを選んで文字色や背景色を一括変更するプラグイン。プラグインで追加された専用エディタなんかだとテーマ変更だけじゃ変わらない場合もあるけど、黒背景勢には割と必須プラグイン。</p>

<h4>EGit</h4>

<p>GitのGUIクライアント。別のGitのGUIツールを使ってる場合でも、ソース管理にGitを使っているなら入れておいて損はないはず。Eclipse上から編集有無の確認をしたり、差分を確認したりできます。Pullのデフォルト動作の変更(rebaseにする)や、ローカル変更が有る際のpullが簡単で、一括Pushが使いやすいので、通常使いとしても割りとオススメです。(ただnon-ff margeができなかった気がします)</p>

<h4>Gradle Integration for Eclipse (GradleIDE)</h4>

<p>Forgeも対応したビルドツールGradleを、Eclipse上から便利に使えるようにするプラグイン。プロジェクト構成をGradleプロジェクトに変更し、ちゃんとプラグイン設定をしておけば、build.gradleを編集するだけで最新のForgeに更新したりできるのでおすすめ。</p>

<h4>GitHub Flavored Markdown viewer plugin</h4>

<p>GitHubで使うREADME.md用のGitHub風ビューワー。GitHubを使うならあって損はしないはず。GitHub風というかHTTP経由でスタイルシートとかもってきて表示してるみたい。使い方は、markdownファイルを開いた状態で、このプラグインで追加されたビューを開くだけ。ただし、関係ないときにビュー開くと、Eclipse側にエラーが出るのがちょっとうざい。</p>

<h4>Markdown Text Editor</h4>

<p>markdownエディタ。上と合わせてGitHubのREADME.mdを編集する用。</p>

<h4>YEdit</h4>

<p>YAMLエディタ。ちょいちょい出てくる設定ファイルなどで使えるので、いれといた。</p>

<h4>Eclipse Json Editor</h4>

<p>JSONエディタ。同上。</p>

<h4>プロパティエディタ</h4>

<p>日本語使う事考えるとやっぱ入れておいたほうがいいのかなと思って追加。プロパティファイル自体、最近のModdingじゃあまり使わないようになるかもしれないけれど。</p>

<h4>Groovy Eclipse Plugin</h4>

<p>build.gradle編集用に、Groovyに対応したエディターが欲しかったので追加。マーケットプレイスにEclipse4.3用が見当たらなかったので、手動で更新サイトを追加してインストールしました。</p>

<h4>Any Edit Tools</h4>

<p>キャメルケースとスネークケースの変換や、大文字小文字変換、改行コードの一括変換など、リファクタリング時や、コード整理などで便利な機能が用意されてるので、地味に有用。前は入れてあるだけって感じだったけど、最近機能に気づいてよく使うようになった。</p>

<h4>Quick JUnit</h4>

<p>JUnitを便利に使えるようにするプラグイン。Ctrl+9でテストターゲットクラスとテストクラスの移動が便利。Mod作成でテスト書くかはわからないけれど、後学のためって感じで。</p>

<h4>JMockit Eclipse Plug-in</h4>

<p>テスト用のモックツールJMockitを使いやすくするプラグイン。JMockit使う場合の起動構成の引数を書かなくてもよくなるので、Mockテストを書く機会があればかなり有用。テストコード自体を書くかは不明だけど、勉強のために少しやるかもなので、とりあえず入れといたって感じ。</p>

<h4>CheckStyle / FindBugs</h4>

<p>後学のためには、あっても損しないと思います。ニアミス回避にもなるかも。</p>

<h1>Eclipseの使い方わかんないよ！</h1>

<p>ぐぐって、どうぞ。</p>

<p>左側のパッケージエクスプローラーが、ファイルの一覧みたいなものです。ドットファイルなどは自動的にフィルターされ、ソースフォルダーなど、特別なフォルダーの表示方法が変わったりします。また、Eclipse内だけで有効な、シンボリックリンク(リンクフォルダー)を作成したりもできます。</p>

<p>プロジェクトエクスプローラーの場合も大体同じですが、表示内容が多少違います(違いは自分で感じて)。個人的にはパッケージエクスプローラーのほうが使いやすいと思うので、プロジェクトエクスプローラーは殆ど使ってないです。このビューが表示されていなければ、ウィンドウ→ビューの表示から追加してください。(その他のビューもここから追加が出来ます)</p>

<p>右上の方にあるのが、パースペクティブの切り替えボタンです。Java開発用、デバッグ用、リポジトリ管理用などがあり、切り替えて使います。パースペクティブを切り替えることで、ツールバーやビューを一括で変更できるので、シーンに合わせて使い分けをして行く感じです。プラグインや開発ツールが、デフォ設定としてパースペクティブを何パターンか用意してくれるので、自分で0から作ることはあんまりなく、元からあるのを自分の使いやすいようにカスタマイズして、使っていきます。</p>

<p>ツールバーの、緑色の三角ボタンと、緑色の虫のボタンが、実行とデバッグ実行のボタンです。作ったModを動作させる場合、ここから起動してあげます。起動構成を編集することで、複数のModを同時に動かしたりも出来ます。</p>

<p>デバッグ実行は、デバッガーを接続した状態で実行してくれます。デバッガーってのは、任意のコードがよばれた際に、処理を中断できる「ブレークポイント」を設定したり、ブレーク中に変数の値を直接書き換えたりすることができる、動作確認やテストを行うためのツールで、ぶっちゃけコレがないと開発なんぞやってられない、って代物です。</p>

<p>ものすごくさわりだけ説明すると、こんな感じです。あとは触りながら調べていってください。</p>

<p>IDEはできることが多いので、何ができるか覚えるまでが遠いですが、手作業でやるのは面倒だなって思うことの大半は、どうにかすればIDEで簡単に出来ます。例えば、クラス名の一括変更とか、参照元検索とか、親クラスや子クラスの一覧を表示したりとかは、簡単に行えます。また、そのままでは出来なくても、誰かが作ったプラグインがあったりもします。手探りしつつがんばってください。</p>

<hr />

<p>Eclipseプラグインはまだいろいろ試してないので、今後も追加や削除などをしていきながら検討していこうかと思ってます。</p>

<p>っていうかいい加減環境おちつけて開発にシフトしてかないと冬休み終わっちゃうネ。ﾔﾊﾞｰｲ。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[version.properties メモ]]></title>
    <link href="http://blog.awairo.net/blog/2013/05/05/version-dot-properties-memo/"/>
    <updated>2013-05-05T21:11:00+09:00</updated>
    <id>http://blog.awairo.net/blog/2013/05/05/version-dot-properties-memo</id>
    <content type="html"><![CDATA[<p>意外と知られていないメタ情報ファイル。自動生成と相性よさげ。</p>

<!-- more -->


<h1>version.properties についてメモ</h1>

<p>なにこれって思う modder のほうが多いような気がします。少なくとも日本のminecraft-modderでこれを用意してる人、見た記憶ないです。</p>

<h2>@Mod アノテーションの version とバイバイできる version.properties</h2>

<p>バージョンアップのたびに @Mod に設定した version を書き直し忘れて、リコンパイル、再難読化をもっかいやるハメになったことある modder は、少なくないんじゃないかなと思います。つか私はほぼ毎回更新を忘れます。だいたい zip が出来上がってから思い出します。画面殴りそうです。</p>

<p>きちんとクラスをわけていくと、@Mod をつけたModクラスは初期化以外での出番は殆どなくなってしまうので、あまり更新する機会がありません。そのため見る機会自体が減っていきます。また、更新のたびにバージョンを書き換えるのは意外と面倒でわすれがちです。</p>

<p>そうすると、プログラマーは自動更新を考えるわけです。ですが、ハードコーディングされているアノテーションを自動更新するのは、わりと大変。</p>

<p>そんなときにこの version.properties です。外部ファイルからバージョン情報を設定してあげることで、コード修正を行わずにバージョンを設定できるようになります。</p>

<h2>つかいかた</h2>

<p>前置きが無駄に長くなりましたが、なんのことはありません。ファイル名は version.properties で mcmod.info と同様にzipのルートに配置すれば読んでくれます。</p>

<p>プロパティファイルなのでコメントなども使えます。他の情報を追加することもできます。ただし日本語など、マルチバイト文字を使用する場合には、native2ascii などできちんと変換しないといけません。まぁ Pleiades Eclipse 使ってるならプロパティファイル用のエディタで編集するので、このあたりを意識する機会はあんまりないですが。</p>

<p>このプロパティファイルで、@Mod アノテーションの version を設定できます。ただし優先度はアノテーションによる設定よりも低く、アノテーションでバージョンを設定している場合、無視されるようです。</p>

<p>例えば、modid が &ldquo;net.awairo.minecraft.tooltipplus"、バージョンが "2.3.0&rdquo; であれば、こんな感じ。modid のあとに &ldquo;version&rdquo; を繋げたキーで値にバージョンの値です。</p>

<pre><code>net.awairo.minecraft.tooltipplus.version = 2.3.0
</code></pre>

<p>これで @Mod(～, version = &ldquo;2.3.0&rdquo;) と同じ設定ができます。</p>

<p>ちなみに、コード上からこのプロパティファイルを取得したい場合は、FMLPreInitialiseEvent から取得出来ます。@PreInitのほうです。</p>

<p>バージョンアップの際にコードの修正が必要ないのと、プロパティファイルなので、自動生成が楽ちんなのがメリットですね。それに、自動生成するようにしておけばコミットする必要もなくなるので、コミットログに余計なファイルが混ざらないってメリットもあります。</p>

<p>IronChest なんかは自動生成用のスクリプトをもっていて、それを使ってリリース毎に自動生成しているみたいです。私も真似してます。</p>

<hr />

<p>自動更新についても、気が向いたらそのうち書くかもしれませんが、向いたらで。</p>

<p>Tooltip Plus のほうはだいたい自動化しちゃってますが、いろいろ余計なことしてていま見直してる最中なので、あんま参考にはならないとおもいます。</p>

<p>SpawnCheckerのほうは作り直しが進んでないので、いまだにRML時代のままのクラス構成です。mod_SpawnCheckerです。毎回 getVersion() の戻り値の変更を忘れては「アアァァッ」って叫んでます。RMLバイバイしてFMLの機能つかいたいです。</p>

<p>つか、このあたりは IronChest 見たほうが早いです。困ったときの IronChest。IronChset is God。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[@Mod アノテーションメモ]]></title>
    <link href="http://blog.awairo.net/blog/2013/05/05/mod-annotation-memo/"/>
    <updated>2013-05-05T20:00:00+09:00</updated>
    <id>http://blog.awairo.net/blog/2013/05/05/mod-annotation-memo</id>
    <content type="html"><![CDATA[<p>Modのメインクラスに付けるアノテーションの解説とか。実はmodid以外はなくてもいける。</p>

<!-- more -->


<h1>@Modアノテーションについて</h1>

<p>FMF645 現在、以下の項目が設定可能です。</p>

<pre><code>String modid
String name default ""
String version default ""
String dependencies default ""
boolean useMetadata default false
String acceptedMinecraftVersions default ""
String bukkitPlugin default ""
String modExclusionList default ""
String certificateFingerprint default ""
String modLanguage default "java"
String asmHookClass default ""
</code></pre>

<p>簡単な解説をしてみます。</p>

<h2>@Modアノテーション 各項目の簡単な解説</h2>

<p>詳しくは @Mod アノテーションの JavaDoc に書いてあるのでさわりだけ。過度な期待はうんたらかんたら。</p>

<p>解説というよりは自分用の備忘録。</p>

<h3>String modid</h3>

<p>mod の識別子です。</p>

<p>ユニーク値かつ必須。mcmod.info の解説でやったので省略。</p>

<h3>String name default &ldquo;&rdquo;</h3>

<p>mod の名前です。</p>

<p>mcmod.info の値より優先度は低いみたいです。mcmod.info用意しているなら不要だと思います。</p>

<h3>String version default &ldquo;&rdquo;</h3>

<p>modのバージョンです。</p>

<p>mcmod.info の値とは別の内部的なバージョン値です。</p>

<p>依存チェックで使うバージョンのことも考えると</p>

<pre><code>メジャー.マイナー.ビルドナンバー.リビジョン
</code></pre>

<p>みたいなような指定にするのが無難だと思います。</p>

<p>このバージョンは version.properties からも設定できますが、アノテーションで指定したほうが優先度が高いようで、アノテーションに設定しちゃうと version.properties は無視されます。</p>

<p>version.properties を使うなら設定不要です。</p>

<h3>String dependencies default &ldquo;&rdquo;</h3>

<p>依存関係指定用の文字列の設定用。</p>

<p>javadocにも書いてあるように、RML (ModLoader) の BaseMod の getPriorities() を参照してください、とのことです。具体的には、require-before:mod-name とかって感じで設定する奴です。触ったことある人はあまりいない気がしますが。</p>

<p>確か最近の RML の javadoc にはこのあたりの仕様が記載されていないので、さらにわけわかめです。古いRMLの javadoc を探せば見つかると思います。</p>

<p>…思いますが、そんなもの漁るくらいなら mcmod.info  なりメタデータなりで指定した方が楽だし、バージョンでのチェックもできるのでオススメ。この文字列のパース機能は、BaseMod互換にするために残ってる機能みたいなもんだと思います。</p>

<h3>boolean useMetadata default false</h3>

<p>MetaData クラスを使用する場合 true に設定します。</p>

<p>この値を true にすると、mcmod.info の依存関係のチェック用の情報をクリアします。mcmod.info で useDependencyInformation を true にしても無視されます。</p>

<p>この設定は、Mod.Metadata アノテーションを利用するための設定なんじゃないかなーと思います。mcmod.infoは外部ファイルなので改変される可能性があるから、そのための制約なのではないかと。ちゃんと調べてないですが。</p>

<h3>String acceptedMinecraftVersions default &ldquo;&rdquo;</h3>

<p>許可するMinecraftのバージョンを設定します。</p>

<p>通常設定する必要はないです。が、あえて過去ver専用のmodなどを作製する場合は、こいつを指定しておくといいかもしれないです。バージョン指定の書式はきちんと把握仕切れていないので、調べた時にでも書こうと思います。たぶん。</p>

<p>簡単に具体例を上げておくと</p>

<pre><code>acceptedMinecraftVersions = "[1.5,)"
</code></pre>

<p>これで1.5.x 以降のマイクラでのみ実行できる、って指定になります。たぶん。</p>

<p>別にこれ、FML固有の書式ではなかったと思うので、検索すれば見つかると思います。Apache commons 関連のドキュメントだかで見た記憶があるような、ないような…。</p>

<h3>String bukkitPlugin default &ldquo;&rdquo;</h3>

<p>BukkitプラグインからロードされるためのプラグインのFQDNを設定します。</p>

<p>…だと思いますがちゃんと調べてないので省略。必要になったら調べるかもしれないですが、当面は必要ないかなーと…。</p>

<h3>String modExclusionList default &ldquo;&rdquo;</h3>

<p>カンマ区切りでmodidを記述し、他modとの共存可否の設定を行えます。</p>

<p>ようは拒否リストです。「貴方とは一緒に導入できないの」ってなるような設定をします。</p>

<p>競合するからこのmodとは一緒に使えないよ、とか、(作者の意向として、)このModとは共存させたくないよ、ってModがある場合などに利用します。競合することがわかってる場合に事前に回避したり、modが想定している難易度を崩してしまうような別のmodが導入されることを認めない、みたいな感じに使うものだと思います。</p>

<p>許可不許可を決める記号(+/&ndash;)を付与した modid をカンマ区切りで複数指定できます。許可する mod は modid の先頭に「+」、許可しない mod は先頭に「-」を指定します。modid の代わりに、すべての Mod を意味するワイルドカード「*」と、forge を意味するエイリアス「f」が使えます。何も指定しない場合は、全て許可「+*」と同じです。</p>

<h3>String certificateFingerprint default &ldquo;&rdquo;</h3>

<p>署名された jar を要求するようにするための設定。全て小文字で : が削除されたSHA-1の文字列。</p>

<p>デフォルトでは署名された jar を要求しません。</p>

<p>これはちょっとややこしいので省略。必要な人は自前で調べてください。</p>

<p>mod を jar ファイルとしてリリースして META-INF/ を同梱して署名を用意し、クラスファイルの破損や改変がないことをチェックしたりとか、そういうやつです(たぶん)。</p>

<p>本当はこの手のものは、開発者側がちゃんと理解して使用していくべきなんでしょうが、いろいろと敷居高い感がいなめない。それに、ユーザーもそういうの意識できる人って少ないですしね。</p>

<h3>String modLanguage default &ldquo;java&rdquo;</h3>

<p>mod を作製する際に用いられた言語の設定。</p>

<p>日本語とかそういう「言語」ではなく、「プログラミング言語」です。"java" 以外に &ldquo;scala&rdquo; が指定できます。バイトコード変換時に必要になってくるんだと思います。</p>

<p>まぁ scala で mod 作る好きものな人は説明しなくてもわかるはずなので省略。</p>

<h3>String asmHookClass default &ldquo;&rdquo;</h3>

<p>この mod からロードされるクラスに ASM を適用するための、フッククラスの FQDN を指定します。</p>

<p>たぶん簡易的な coremod 設定みたいな感じです。そういうことやるコア層に説明は不要だろうって事で省略。</p>

<h2>結局@Modには何を指定すればいいの？</h2>

<p>modid は必須です。それ以外は全部オプションです。つまりはそういうことです。</p>

<p>共存させたくない mod がある場合や、マイクラのバージョンを限定したい場合を除けば、普通は modid だけ指定すればOKでしょう。他の値のうちユーザーに伝える情報として重要になるものは mcmod.info と version.properties で指定ができるため、わざわざソースコード内ハードコードしておく必要はないとおもいます。</p>

<hr />

<p>しかし改めてみてみると、すごい充実してる。FMLヤバい。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mcmod.info の要素と機能についてのメモ]]></title>
    <link href="http://blog.awairo.net/blog/2013/05/05/mcmod-dot-info/"/>
    <updated>2013-05-05T19:24:00+09:00</updated>
    <id>http://blog.awairo.net/blog/2013/05/05/mcmod-dot-info</id>
    <content type="html"><![CDATA[<p>各項目の説明とか。</p>

<!-- more -->


<h1>mcmod.infoの要素と機能についてのメモ</h1>

<p>FML645現在、mcmod.info からは以下の項目がロードされていました。</p>

<pre><code>[
{
  "modid": "net.awairo.minecraft.xxx",
  "name": "awa sample mod",
  "description": "this mod is sample.",
  "url": "http://alalwww.github.io/",
  "updateUrl": "http://alalwww.github.io/",
  "logoFile": "logo.png",
  "version": "1.0.0",
  "credits": "By alalwww",
  "parent": "",
  "authors": ["alalwww"],
  "requiredMods": [],
  "dependencies": [],
  "dependants": [],
  "useDependencyInformation": "true"
}
]
</code></pre>

<h2>mcmod.info 各項目の簡単な解説</h2>

<p>mcmod.info は単純な json ファイルです。jsonの仕様については他文献などを漁ってください。javascriptのオブジェクトと似た書式なので、触ったことある人ならすぐに分かると思います。</p>

<p>値に指定できるのは「文字列」値と「配列」値の2種があり、項目ごとに決まっています。</p>

<h3>modid</h3>

<ul>
<li>文字列</li>
</ul>


<p>mod の識別子を設定します。</p>

<p>@Modアノテーションの modId で指定したものと一致させる必要があります。</p>

<p>id は必ずユニーク値でないといけないため、mod 固有のパッケージ名を指定するのがオススメ。</p>

<p>蛇足ですが、javaにおけるパッケージ名は、ユニークであることが保証されているドメイン名を利用するのが一般的です。とはいえ、最近は「どうせ重複することなんかねーよ！うちのドメイン長いから冗長になるんだよボケェ！」って界隈も増えてきているので、必ずドメインを使わないといけないわけではありません。</p>

<p>ドメインを使いたいけど持っていないって場合は GitHub Pages のURLを利用する手や、DDNSをとってそれを使う手もあります。modの名前と同じでも大丈夫ですが、世界中で常に一意であることが保証されているドメインと違い、重複する可能性は残ります。とはいえ現実的に考えて、minecraft の userid + mod名 とかなら重複する可能性はないと思いますので、そういうのでもOK。</p>

<p>さらに蛇足ですが、FMLがmodの情報を出力する際に指定しているロガーの名前も、modidが使用されています。そのため、logging.properties でmod毎にログ出力の制御なんかも可能みたいです。試してないけど。</p>

<h3>name</h3>

<ul>
<li>文字列</li>
</ul>


<p>mod の名称を設定します。</p>

<p>こちらは重複してもOKな値ですが、紛らわしいのでなるべく他と被らない「ステキ」で「ナイス」な名前を指定しましょう。ここで指定した名前が mod 一覧に表示されます。@Modアノテーションで指定した名前よりも優先されるようです。日本語も使えるようですが、英数のみのほうが無難じゃないかなと思います。</p>

<h3>description</h3>

<ul>
<li>文字列</li>
</ul>


<p>modの概要の説明文を設定します。</p>

<p>英文のほうが無難だとは思いますが、現在は日本語も大丈夫みたいです(昔はダメだった気がします)。Mod一覧でModを選択した際に、一番したに表示されます。長い文章も改行されて表示されます。</p>

<h3>url</h3>

<ul>
<li>文字列</li>
</ul>


<p>mod のサイトを示すURLです。ここ見れば最新版DLできるよ的なURLを設定しておきましょう。</p>

<h3>updateUrl</h3>

<ul>
<li>文字列</li>
</ul>


<p>mod のアップデートサイトを示すURLです。現在のところmod一覧に表示される以外では使われていません。</p>

<p>今後自動更新などに対応する目的で用意されているものかもしれません。(FMLのissueでそういった話題が出てた気がします。)</p>

<h3>logoFile</h3>

<ul>
<li>文字列</li>
</ul>


<p>mod一覧で表示されるmodのロゴファイルパスを設定します。</p>

<p>mod の zip ファイルのルートからのパスを指定します。対応している画像フォーマットは不明ですが、png では表示できるのを確認しています。画像サイズの制限があるのかも不明ですが、他modに合わせて 200 x 72 とするのが無難ではないかと思います。</p>

<h3>version</h3>

<ul>
<li>文字列</li>
</ul>


<p>modのバージョンを設定します。(多分表示のみで使われるバージョン。)</p>

<p>このバージョンは mod のメタデータに持つバージョンで、@Mod アノテーションで指定されるバージョン(version.propertiesからも指定可能)とは別のものとして扱われています。また、依存関係チェックの際のバージョンとしては使用されない値のようです。</p>

<p>mod一覧でにVersionはこのように表示されています。</p>

<pre><code>Version: [mcmod.infoで設定したバージョン] ([Modアノテーションまたはversion.propertiesで設定したバージョン])
</code></pre>

<p>先に表示されているのが、mcmod.info で指定したバージョンです。括弧書きのほうが @Mod アノテーションで設定されているバージョンとなります。おそらくユーザーライクな表示用バージョンと、依存関係のチェックなどでも使用する内部的なバージョンを分けるためのに分けてあるのだと思います。</p>

<p>なお、先にも記載していますが、@Modアノテーションで設定するバージョン値は version.properties ファイルから指定することができます。別記事で書きます。</p>

<h3>credits</h3>

<ul>
<li>文字列</li>
</ul>


<p>クレジットを設定します。</p>

<p>なんとなく馴染みが薄い感がありますが、個人開発のmodであれば個人名など、グループで開発しているのであれば、グループ名などを指定するような感じです。</p>

<p>アニメのEDの最後とかに表示される「○○製作委員会」とか、そういう感じです。</p>

<h3>parent</h3>

<ul>
<li>文字列</li>
</ul>


<p>親 mod のidを設定します。</p>

<p>他mod の add-on を作成する場合などに利用するものです。</p>

<p>ここで親modを指定した場合、mod一覧には表示されないようになり、親として指定したmodの情報に、子 mod 名として表示されるようになります。</p>

<h3>authors</h3>

<ul>
<li>配列</li>
</ul>


<p>modの作者の一覧を設定します。</p>

<p>配列で指定します。</p>

<h3>requiredMods</h3>

<ul>
<li>配列</li>
</ul>


<p>必須 mod の一覧を設定します。</p>

<p>useDependencyInformation を有効に指定しないと意味がありません。</p>

<p>「modid」または「modid@バージョン」という書式(別記事で解説予定)の文字列で複数指定ができます。ただし、ここで指定したバージョンはFML645現在チェックには使用されません。しかし、必須チェックが下記の依存関係チェックよりも先に行われ、エラーメッセージにもバージョンが表示されるようになります。そのため、必須modのバージョンも指定したいのであれば、ここにもバージョンを指定しておくほうが無難です。</p>

<h3>dependencies</h3>

<ul>
<li>配列</li>
</ul>


<p>自身より先に初期化が行われる必要がある mod の一覧を設定します。</p>

<p>useDependencyInformation を有効に指定しないと意味がありません。</p>

<p>ここで指定したmodは、自身より先に初期化が行われます。「modid」または「modid@バージョン」という書式(別記事で解説予定)の文字列で複数指定ができます。依存するModのバージョンによる条件の指定が有効です。</p>

<h3>dependants</h3>

<ul>
<li>配列</li>
</ul>


<p>自身より後に初期化が行われる必要がある mod の一覧を設定します。</p>

<p>useDependencyInformation を有効に指定しないと意味がありません。</p>

<p>ここで指定したmodは、自身より<del>先</del>後に初期化が行われます。「modid」または「modid@バージョン」という書式(別記事で解説予定)の文字列で複数指定ができます。依存するModのバージョンによる条件の指定が有効です。</p>

<h3>useDependencyInformation</h3>

<ul>
<li>文字列</li>
</ul>


<p>mcmod.info に書かれた依存関係の情報をmodの読み込み時に使用するかの設定です。</p>

<p>文字列 &ldquo;true&rdquo; を指定した場合のみ有効になります。それ以外の値が指定されたか、何も指定されていない場合、mcmod.infoの情報は実行時に全てクリアされます。つまり、この値をtrueにしないと依存関係チェックは行われません。ただし、@Mod の useMetadata より優先度が低いため、あちらが true に設定された場合は mcmod.info の情報はクリアされます。</p>

<hr />

<p>20 June, 2013 誤記を修正(つやぴん氏thx)</p>
]]></content>
  </entry>
  
</feed>
