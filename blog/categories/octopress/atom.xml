<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Octopress | AwAlog]]></title>
  <link href="http://blog.awairo.net/blog/categories/octopress/atom.xml" rel="self"/>
  <link href="http://blog.awairo.net/"/>
  <updated>2013-12-24T03:07:45+09:00</updated>
  <id>http://blog.awairo.net/</id>
  <author>
    <name><![CDATA[alalwww]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Gravatarのプロフィールを表示するOctopressのサイドバー]]></title>
    <link href="http://blog.awairo.net/blog/2013/12/24/octopress-aside-of-getting-profile-from-gravatar/"/>
    <updated>2013-12-24T02:35:00+09:00</updated>
    <id>http://blog.awairo.net/blog/2013/12/24/octopress-aside-of-getting-profile-from-gravatar</id>
    <content type="html"><![CDATA[<p>つくりました。</p>

<!--more-->


<p>右のAuthorの画像を、Twitterのアイコンを直リンクで参照する、とてもお行儀の悪いものにしていたのですが、Twitterのアイコン画像を更新するとURL変わってしまうので、<a href="http://www.gravatar.com/">Gravatar</a>を参照するように変更してみました。</p>

<p>誰か作ってるだろうと思って、コピペ元を探してみたんですが、<a href="https://github.com/joet3ch/gravatar-octopress">見つけれたの</a>は、設定にメアドを書いたらハッシュ生成して画像を参照するもので、ちょっと思ってたのと違う感じがして、自作に至った感じです。</p>

<p>rubyコードを噛ましたりしてないので、メアドのMD5ハッシュの生成はできないですが。</p>

<h1>用意するもの</h1>

<ul>
<li>GitHubPagesとOctopressの環境</li>
<li>Gravatarアカウント(GitHubでアバター画像を変えてるなら作ってるはず)と、登録時のメアドのMD5ハッシュ</li>
</ul>


<h1>つくりかた</h1>

<p><a href="http://www.gravatar.com/site/implement/profiles/">GravatarがJSONでプロフィール情報を返すAPIを提供している</a>ので、それを使って情報を持ってきて、画面に反映します。</p>

<p>だけ。</p>

<p>具体的には、<a href="https://github.com/alalwww/gravatar-aside/blob/master/gravatar.html">こんなかんじ</a>。</p>

<p>てぬき。</p>

<h1>コピペ</h1>

<p><a href="https://github.com/alalwww/gravatar-aside">GitHubにリポジトリつくった</a>ので、使いたい人がいたらそこからもってってください。MITです。好きにしてください的な感じです。</p>

<p>pluginとか、カスタムasideも、テーマみたいにサブモジュールとしてcloneできるような感じだと、楽なのになー。</p>

<h2>つかいかた</h2>

<ol>
<li><code>gravatar.html</code>を<code>/path/to/octopress-repos/source/_includes/custom/asides/</code>にコピーする。</li>
<li><code>_config.yml</code>を開く。</li>
<li><code>default_asides</code>プロパティの好きな位置に<code>custom/asides/gravatar.html</code>を追加する。</li>
<li>サードパーティ設定のあたりに<code>gravatar_hash</code>プロパティを追加し、Gravatarに登録したEメールのMD5ハッシュを設定する。</li>
<li><code>rake gen_deploy</code>で公開しておしまい。</li>
</ol>


<p>_config.ymlはこんな感じのを足せばいいです</p>

<pre><code>default_asides: [..., custom/asides/gravatar.html, ...]

# Gravatar email hash
gravatar_hash: 0bc83cb571cd1c50ba6f3e8a78ef1346
</code></pre>

<p>※<code>0bc83cb571cd1c50ba6f3e8a78ef1346</code>は<code>myemailaddress@example.com</code>のhashです。</p>

<p>Gravatarのヘルプには、連携アプリ向けの<a href="http://www.gravatar.com/site/implement/hash/">md5ハッシュの生成方法とかも書いてありますが</a>、GitHubのアバター画像のURLとかからでも参照できるので、そっからコピペでOK。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ツイーヨボタン復活]]></title>
    <link href="http://blog.awairo.net/blog/2013/12/14/enable-tweet-button/"/>
    <updated>2013-12-14T14:43:00+09:00</updated>
    <id>http://blog.awairo.net/blog/2013/12/14/enable-tweet-button</id>
    <content type="html"><![CDATA[<p>需要ないと思うけど、設定忘れで消えてたので復活。</p>

<!--more-->


<h1>やったこと</h1>

<p>_config.ymlで有効にしただけ。</p>

<pre><code>twitter_tweet_button: true
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GitHub Pagesで独自ドメインを使う方法]]></title>
    <link href="http://blog.awairo.net/blog/2013/12/14/custom-domain-for-gh-pages/"/>
    <updated>2013-12-14T14:23:00+09:00</updated>
    <id>http://blog.awairo.net/blog/2013/12/14/custom-domain-for-gh-pages</id>
    <content type="html"><![CDATA[<p>ドメインの延長更新のついでに、<a href="http://pages.github.com/">GitHub Pages</a>のカスタムドメインの設定したのでメモ。</p>

<!--more-->


<p><a href="https://help.github.com/articles/setting-up-a-custom-domain-with-pages">公式に書いてある事</a>をそのまま実践するだけのコピペ記事。自分が<a href="http://www.value-domain.com/">VALUE-DOMAIN</a>使ってるので、そこで管理している人には少しだけ役に立てるかもしれない。</p>

<h1>目的</h1>

<ol>
<li><code>http://blog.awairo.net/</code>にアクセスしたら、このblogが表示される。</li>
<li><code>http://alalwww.github.io/</code>にアクセスしたら、<code>http://blog.awairo.net/</code>にリダイレクトされる。</li>
</ol>


<h1>手順</h1>

<p>前提として以下が必要。</p>

<ul>
<li>自分で管理している(DNSの設定がいじれる)独自ドメインを持っている。</li>
<li>GitHub-Pagesを利用しており、公開してるサイトがある。</li>
</ul>


<p>DNSでGH-Pagesに飛ばす設定と、GH-Pagesから独自ドメインにリダイレクトするための設定を行う。設定は順不同だけど、GitHub側の設定が先に反映されると、まだGH-Pagesが表示出来ない状態の独自ドメインにリダイレクトされるようになるので、サービス停止ができないような状況なら、DNSの設定が終わってからやったほうがいいのかもしれない。ただ、どちらも反映に多少の時間がかかるので、しばらく(10分程度)の間アクセスが止まる事に、特に問題がないなら、平行作業しちゃっても問題ない。</p>

<h2>DNS側</h2>

<ol>
<li><code>blog.awairo.net</code>の別名として、<code>alalwww.github.io</code>を設定するための、CNAMEレコードを追加する。</li>
</ol>


<p>だけ。</p>

<p>具体的には、DNSの設定で以下を追加する。</p>

<pre><code>blog.awairo.net. IN CNAME alalwww.github.io.
</code></pre>

<p>検索してると、<a href="http://blog.livedoor.jp/techblog/archives/65340720.html" title="livedoor Techブログ : CNAMEの間違った使い方">CNAMEを設定したDNSでは他の設定が無視される(カモシレナイ)</a>って感じの記事を見つけちゃって、上手くいくのか不安だったけど、とりあえずVALUE-DOMAINではできた。というか、一般的なDNSサーバーなら他の設定の無視もしないと思うので、多分大丈夫だと思うけれど、一応気に留めておこう。( っ'ω'c)</p>

<h3>実際にやったこと</h3>

<p>VALUE-DOMAINのサイトから、専用の書式でCNAMEレコードを追加する。</p>

<ol>
<li>ログイン</li>
<li>DNSレコード/URL転送の変更</li>
<li>ドメイン選択</li>
<li><p>設定フィールドの一番上に、以下を追加。</p>

<p> cname blog alalwww.github.io.</p></li>
</ol>


<p>一番上というか、ワイルドカードで全部xreaのWebサーバーに向けてるAレコードがあるので、それより上に設定追加でうまくいった。一番最後のピリオド(<code>.</code>)は忘れやすいので要注意。</p>

<p>設定したら保存するボタンを押して完了。反映までしばらくかかると思うので(たぶん)、カフェオレをすすりながら待つ。</p>

<h3>確認</h3>

<p>コマンドプロンプトを開いて、<code>nslookup</code>コマンドで自宅のルーターに対し問い合わせて確認。</p>

<pre><code>Microsoft Windows [Version 6.1.7601]
Copyright (c) 2009 Microsoft Corporation.  All rights reserved.

C:\Users\username&gt; nslookup
既定のサーバー:  (ルーター名)
Address:  (ルーターのIP)

&gt;
</code></pre>

<p>反映されてない状態だと以下のような回答。向けてるxreaのウェブサーバーのIPが返ってくる。</p>

<pre><code>&gt; blog.awairo.net
サーバー:  (ルーター名)
Address:  (ルーターのIP)

権限のない回答:
名前:    blog.awairo.net
Address:  203.189.105.98 ← メインで使ってるxreaのサーバーのIP
</code></pre>

<p>しばらくするとこんな感じに変わった。</p>

<pre><code>&gt; blog.awairo.net
サーバー:  (ルーター名)
Address:  (ルーターのIP)

権限のない回答:
名前:    github.map.fastly.net
Address:  103.245.222.133
Aliases:  blog.awairo.net
          alalwww.github.io
</code></pre>

<p>できたっぽい。</p>

<h2>GitHub側</h2>

<ol>
<li>リダイレクト先のURL(<a href="http://blog.awairo.net/">http://blog.awairo.net/</a>)を書いた、「CNAME」というファイル名のテキストファイルを配置する。</li>
</ol>


<p>だけ。</p>

<h3>実際にやったこと</h3>

<p>OctopressのリポジトリをおいてるLinuxサーバーで、以下の作業。</p>

<pre><code>$ cd octopress
$ tee &gt; source/CNAME (リダイレクトしないと標準出力にもでてきてちょっとうざいので)
blog.awairo.net
(改行したあとctrl+Cを押して終了)
$ cat source/CNAME (確認)
blog.awairo.net
$ rake gen_deploy (Push)
</code></pre>

<p>名前が可愛いので<code>tee</code>コマンド好きです。Webにある解説じゃあまり見かけないけれど。ほら、ちょっとした内容のテキストファイル作るのによく見かける、おさわり(<code>touch</code>)してからエディタで開いて編集とかっての、ちょっとめんどくさいし。( っ'ω'c)</p>

<p>デプロイが終わったら、<a href="https://github.com/alalwww/alalwww.github.io">GitHubのリポジトリ</a>を確認してCNAMEファイルがちゃんとデプロイされてたら問題なし。</p>

<h3>確認</h3>

<p>Chromeで<code>F12</code>を押して開発用ツールを開いて、<code>Network</code>タブを選んで、<code>http://alalwww.github.io/</code>にアクセスし、<code>http://blog.awairo.net/</code>にリダイレクトされてる事を確認。
<img src="/images/posts/2013-12-14-custom-domain-for-gh-pages/chrome_devtools.png" alt="ChromeのDeveloperToolsのキャプチャー画像" /></p>

<p>できてるできてる。</p>

<h1>参考にさせて頂いたサイト</h1>

<ul>
<li><a href="http://bekkou68.hatenablog.com/entry/2013/01/05/210902">GitHub Pages に独自のトップレベルドメイン（TLD）を割り当てる &ndash; bekkou68の日記</a></li>
<li><a href="http://setup.value-domain.com/index.php?p=websrv">Easy Setup for VALUE DOMAIN Users</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopressにタグクラウドプラグインを追加]]></title>
    <link href="http://blog.awairo.net/blog/2013/12/09/add-tag-cloud-plugin-on-octopress/"/>
    <updated>2013-12-09T05:11:00+09:00</updated>
    <id>http://blog.awairo.net/blog/2013/12/09/add-tag-cloud-plugin-on-octopress</id>
    <content type="html"><![CDATA[<p>右のサイドバーに、「カテゴリリスト」と「タグクラウド」を追加したのでメモ。</p>

<!--more-->


<h1>タグクラウドプラグインの導入</h1>

<p><a href="http://tokkonopapa.github.io/blog/2012/01/04/octopress-plugin-for-categories-cloud/">このサイト</a>を参考にプラグイン導入。</p>

<h2>手順</h2>

<p>クローンしてきてコピーで導入。</p>

<pre><code>$ ~/git/
$ git clone https://github.com/tokkonopapa/octopress-tagcloud.git octopress-tagcloud
$ cp octopress-tagcloud/plugins ~/octopress/plugins
$ cp octopress-tagcloud/source/_includes/custom/asides/ ~/octopress/source/_includes/custom/asides/
</code></pre>

<p><code>_config.yml</code>の<code>default_asides</code>に追加。</p>

<pre><code>$ cd ~/octopress
$ vi _config.yml
    (追加)
</code></pre>

<p>再生成して確認し問題なさそうなのでDeploy</p>

<pre><code>$ rake generate
$ rake preview
    (動作確認、デザイン確認)
$ rake gen_deploy
</code></pre>

<p>あとは内容に応じて適当に分けてコミットしてって、bitbucketにもpushしておわり。</p>

<p>右側に感じてた違和感っぽいのが減ってきて、それっぽくなった気がするのでとても満足。</p>

<p>いい加減寝ないとまずそう…。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octpress再インストール]]></title>
    <link href="http://blog.awairo.net/blog/2013/12/09/reinstall-octopress/"/>
    <updated>2013-12-09T02:20:00+09:00</updated>
    <id>http://blog.awairo.net/blog/2013/12/09/reinstall-octopress</id>
    <content type="html"><![CDATA[<p>Octopressを再インストールしたのでその手順をメモしました。</p>

<!-- more -->


<p>前回同様に<a href="http://tokkonopapa.github.io/blog/2011/12/30/octopress-on-github-and-bitbucket/">こちらの記事</a>を参考にインストール。</p>

<h1>環境</h1>

<ul>
<li>CentOS5</li>
<li>ruby 1.9.3</li>
</ul>


<p>他割愛</p>

<h1>やった事メモ</h1>

<p>手探りと思いつきでやったので、行った順番はバラバラ。</p>

<h2>再インストール</h2>

<h3>GitHubPages用のリポジトリの作成</h3>

<p>GitHubPages用のドメインがgithub.comからgithub.ioに変わってるので、いい機会だしリポジトリも名前を変えて作り直しにしちゃおうと思います。</p>

<p>とりあえず既存のリポジトリはそのまま、新たにalalwww.github.ioリポジトリを作成。手順は割愛。</p>

<h3>Source用リポジトリ(リモート)の作成</h3>

<p>BitBucketに置くことにしました。</p>

<p>さくっとアカウントを作成してメール認証とSSHKey登録。Octopressのリポジトリを非公開で作成。手順は割愛。</p>

<p>GitHubを使ったことが有るからかもだけど、特に迷うこともなく完了。</p>

<h3>サーバーの更新ほったらかしていたのでとりあえず更新</h3>

<pre><code>$ sudo yum update
</code></pre>

<p>とかとか。いろいろ。</p>

<h3>Gemの更新</h3>

<pre><code>$ sudo gem update --system
</code></pre>

<p>実際はインストールとかひと通り終わった後に思い出してやりました。特に問題はなかったからよしってことにしました。</p>

<h3>Octopress再インストール</h3>

<p>Octopressをクローンしてきて準備。</p>

<pre><code>$ cd ~/git/
$ git clone git://github.com/imathis/octopress.git octopress
$ cd octopress
$ sudo gem install bundler // 既にインストール済みだし不要だったかも
$ bundle install           // 同上
$ bundle update rake
$ rake install
</code></pre>

<p><code>bundle update rake</code>は忘れてたのであとでやりなおしました。最初、更新を忘れていたせいか、<code>rake setup_github_pages</code>でブランチがmasterからsourceに変わらないといったハプニングはありましたが、やり直したら問題なくいけたっぽいので気にしないことに。</p>

<p>Octopressのインストール</p>

<pre><code>$ rake setup_github_pages
Enter the read/write url for your repository
(For example, 'git@github.com:your_username/your_username.github.io.git)
           or 'https://github.com/your_username/your_username.github.io')
Repository url: (GitHubのリポジトリのURLを入力)
Added remote git@github.com:username/username.github.io.git as origin
Set origin as default remote
Master branch renamed to 'source' for committing your blog source files
rm -rf _deploy
mkdir _deploy
cd _deploy
Initialized empty Git repository in /path/to/git_repos/octopress/_deploy/.git/
[master (root-commit) 81f3a5e] Octopress init
 1 file changed, 1 insertion(+)
 create mode 100644 index.html
cd -

---
## Now you can deploy to (入力したGitHubのリポジトリのURL) with `rake deploy` ##
</code></pre>

<p>ブランチを確認。やり直したあとはちゃんとmasterからsourceに変わってる事を確認。(先に書いたgemsの更新忘れてたときは、何故かこれができてなくてハマってた。)</p>

<pre><code>$ git branch
* source
</code></pre>

<p>変更されたファイルを確認。</p>

<pre><code>$ git status
# On branch source
# Changes not staged for commit:
#   (use "git add &lt;file&gt;..." to update what will be committed)
#   (use "git checkout -- &lt;file&gt;..." to discard changes in working directory)
#
#       modified:   Gemfile.lock
#       modified:   Rakefile
#       modified:   _config.yml
#
# Untracked files:
#   (use "git add &lt;file&gt;..." to include in what will be committed)
#
#       sass/
#       source/
no changes added to commit (use "git add" and/or "git commit -a")
</code></pre>

<p>とりあえず未編集状態でコミット。</p>

<pre><code>$ git add .
$ git commit -m 'first commit'
</code></pre>

<h3>リモートを追加してsourceブランチをpush</h3>

<p>作っておいたBitbucketのリポジトリを追加。</p>

<pre><code>$ git remote add bitbucket git@bitbucket.org:username/octopress.git
</code></pre>

<p>でもって確認も兼ねてプッシュ。</p>

<pre><code>$ git push bitbucket source
Enter passphrase for key '/path/to/sshkeydir/keyfile':
Counting objects: 4724, done.
Compressing objects: 100% (2027/2027), done.
Writing objects: 100% (4724/4724), 1.19 MiB, done.
Total 4724 (delta 2459), reused 4519 (delta 2321)
To git@bitbucket.org:username/octopress.git
 * [new branch]      source -&gt; source
</code></pre>

<p>Bitbucketサイトのコミットログを確認。
<img src="/images/posts/2013-12-09-reinstall-octopress/bitbucket_log.png" alt="Bitbucketのコミットログ画面" /></p>

<h3>動作の確認など</h3>

<p>最低限の設定を行った後、とりあえず生成してみようと記事をバックアップから復活し、<code>rake generate</code>を実行してみると失敗しました。</p>

<pre><code>$ rake generate
## Generating Site with Jekyll
directory source/stylesheets/
   create source/stylesheets/screen.css
Configuration from /path/to/git_repos/octopress/_config.yml
Building site: source -&gt; public
Liquid Exception: incompatible character encodings: UTF-8 and ASCII-8BIT in 2013-02-19-blog-customization1.markdown
/usr/local/lib/ruby/gems/1.9.1/gems/liquid-2.3.0/lib/liquid/block.rb:92:in `join'
/usr/local/lib/ruby/gems/1.9.1/gems/liquid-2.3.0/lib/liquid/block.rb:92:in `render_all'
/usr/local/lib/ruby/gems/1.9.1/gems/liquid-2.3.0/lib/liquid/block.rb:82:in `render'
/usr/local/lib/ruby/gems/1.9.1/gems/liquid-2.3.0/lib/liquid/template.rb:124:in `render'
/usr/local/lib/ruby/gems/1.9.1/gems/liquid-2.3.0/lib/liquid/template.rb:132:in `render!'
/usr/local/lib/ruby/gems/1.9.1/gems/jekyll-0.12.0/lib/jekyll/convertible.rb:79:in `do_layout'
/path/to/git_repos/octopress/plugins/post_filters.rb:167:in `do_layout'
/usr/local/lib/ruby/gems/1.9.1/gems/jekyll-0.12.0/lib/jekyll/post.rb:195:in `render'
/usr/local/lib/ruby/gems/1.9.1/gems/jekyll-0.12.0/lib/jekyll/site.rb:200:in `block in render'
/usr/local/lib/ruby/gems/1.9.1/gems/jekyll-0.12.0/lib/jekyll/site.rb:199:in `each'
/usr/local/lib/ruby/gems/1.9.1/gems/jekyll-0.12.0/lib/jekyll/site.rb:199:in `render'
/usr/local/lib/ruby/gems/1.9.1/gems/jekyll-0.12.0/lib/jekyll/site.rb:41:in `process'
/usr/local/lib/ruby/gems/1.9.1/gems/jekyll-0.12.0/bin/jekyll:264:in `&lt;top (required)&gt;'
/usr/local/bin/jekyll:23:in `load'
/usr/local/bin/jekyll:23:in `&lt;main&gt;'
Build Failed
</code></pre>

<p>しかしもう一度試してみると発生しなく…。</p>

<pre><code>$ rake generate
## Generating Site with Jekyll
identical source/stylesheets/screen.css
Configuration from /path/to/git_repos/octopress/_config.yml
Building site: source -&gt; public
Successfully generated site: source -&gt; public
</code></pre>

<p>よくわからないけどなんか大丈夫になってしまった。再現性がないのでとりあえず保留。このあとテーマ更新した際にもう一度だけ発生したけど、やっぱりそれ以降再現しないので忘れることに。</p>

<p>とりあえず目についたエラーメッセージをコピって<a href="http://goo.gl/IcRLrp">先生</a>に聞いてみたら、<a href="http://tokkonopapa.github.io/blog/2013/02/23/octopress-toc/">関連しそうな記事</a>はあったんだけれど、この後の記事でもOctopress側に問題があっておきてるような事が書いてあるし、原因調査に割く時間もないので、時が解決してくれることを期待しておきます。</p>

<h2>設定変更など</h2>

<h3>.gitignoreに.preview-modeを追加</h3>

<p><code>git status</code>してみると、新規ファイルが作成されてた。名前的にプレビュー時に生成されたっぽい。コミットは不要な気がするので<code>.gitignore</code>に<code>.preview-mode</code>ファイルを追加してまたコミット。</p>

<p>その他、追加した記事や設定の変更を、何度かに分けてコミット。</p>

<h3>テーマを変更</h3>

<p><a href="/blog/2013/12/05/theme-changed/">先日の記事</a>通りにさくさくっとテーマも変更。ついでにスタイルも少し修正。終わったらまたいくつかにわけてコミット。</p>

<h3>new_postなどのテンプレート変更。</h3>

<p><a href="/blog/2013/12/05/how-to-use-drafts//">先日の記事</a>通りにｒｙ</p>

<h3>ツイッタープラグイン死亡確認</h3>

<p>原因は単純で、OctopressのはAPI1.0系だから。っていうかAPI1.1じゃ認証必須だからどのみち従来のような取得はできない。そんな理由からこのプラグインの更新自体も打ち切られてるみたい。</p>

<p>APIが使えなくなったかわりにTwitter公式が<a href="https://dev.twitter.com/ja/docs/embedded-timelines">埋め込みタイムラインウィジェット</a>を提供しているので、こっちを利用するものを作成。(<a href="http://msaisai.github.io/blog/2013/06/19/octopress-twitter/">参考</a>)</p>

<p><div><script src='https://gist.github.com/7860557.js'></script>
<noscript><pre><code>&lt;section style=&quot;position:relative&quot;&gt;
&lt;h1&gt;Twitter&lt;/h1&gt;
&lt;div style=&quot;position:absolute;top:0;right:16px&quot;&gt;
&lt;a href=&quot;https://twitter.com/alalwww&quot; class=&quot;twitter-follow-button&quot; data-show-count=&quot;false&quot; data-lang=&quot;ja&quot; data-show-screen-name=&quot;false&quot;&gt;Follow @alalwww&lt;/a&gt;
&lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=&quot;//platform.twitter.com/widgets.js&quot;;fjs.parentNode.insertBefore(js,fjs);}}(document,&quot;script&quot;,&quot;twitter-wjs&quot;);&lt;/script&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;a class=&quot;twitter-timeline&quot; href=&quot;https://twitter.com/alalwww&quot; data-widget-id=&quot;408658474638118912&quot; data-chrome=&quot;noheader nofooter transparent&quot; data-lang=&quot;ja&quot;&gt;@alalwww からのツイート&lt;/a&gt;
&lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+&quot;://platform.twitter.com/widgets.js&quot;;fjs.parentNode.insertBefore(js,fjs);}}(document,&quot;script&quot;,&quot;twitter-wjs&quot;);&lt;/script&gt;
&lt;/div&gt;
&lt;/section&gt;
</code></pre></noscript></div>
</p>

<p>ヘッダーがいまいちだったので消して、自前で用意し、こんな感じに落ち着きました。出来たものは<code>source/_includes/custom/asides/twitter.html</code>に配置して<code>_config.yml</code>の<code>default_aside</code>に追加。</p>

<p>しかしGistのずれは、前から気になってたけどやっぱ気持ち悪い。今度直そう。(<a href="http://rcmdnk.github.io/blog/2013/05/06/blog-octopress/">修正の参考</a>)</p>

<h3>about.htmlを修正し追加</h3>

<p>ブログの概要、というか自己紹介的なやつ。</p>

<p>前はTwitterのプロフィールを取得して表示してたけど、そこもAPI1.0系なので死んでてもう使えない。ので普通に書きます。内容はとりあえずあとで考えるとして適当に形だけ。おなかすいた。</p>

<p>アイコンだけはTwitterから取得するようにしました。Guavaterでもよかったかも。(<a href="https://retrorocket.biz/archives/77">参考</a>)</p>

<p><code>source/_includes/custom/asides/about.html</code> を適当に修正。終わったら<code>_config.yml</code>の<code>default_aside</code>に追加。</p>

<h1>再インストールに至った理由</h1>

<p>そもそも何故再インストールなんてしたかって言いますと、先日間違って<code>~/git/octopress</code>ディレクトリを勘違いで<code>rm -rf</code>してしまったから、だったりします。まるっと全消去です。見る影どころか跡形もありません…。</p>

<p>思えばGitとかをまだ全然理解していない頃に、解説サイトに書いてあるコマンドをコピペしながら作成だけし、そのまま放置しつつ、テーマ弄ったり、記事だけ追加する、みたいなことを繰り返していたので、変更を全くコミットしていませんでした。そのため復旧は早々に諦めましたが、幸いなことに記事だけは直前にバックアップしてあったので、おさらいも兼ねて、いちからOctopressをインストールをし直してしまった、といった感じです。</p>

<p>Octopress本体の更新もだいぶ長いこと放置してたので、実にいい機会です。むしろ計画通り。</p>

<p>というか、いつかまたやらかしそうな気もするので、その時用に作業メモを残した感じ。</p>

<hr />

<p>何度かに分けて書いてるので文体バラバラ。っていうか、めんどくさい文章になるのでですます調はやめようと思いつつも、つい使ってしまう…。余計な文章書きすぎるクセも抜けない…。</p>
]]></content>
  </entry>
  
</feed>
