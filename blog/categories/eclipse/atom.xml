<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: eclipse | AwAlog]]></title>
  <link href="http://blog.awairo.net/blog/categories/eclipse/atom.xml" rel="self"/>
  <link href="http://blog.awairo.net/"/>
  <updated>2014-01-05T23:28:58+09:00</updated>
  <id>http://blog.awairo.net/</id>
  <author>
    <name><![CDATA[alalwww]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[GradleIDEでForgeを更新する方法]]></title>
    <link href="http://blog.awairo.net/blog/2014/01/05/how-to-update-forge-on-gradleide/"/>
    <updated>2014-01-05T23:28:00+09:00</updated>
    <id>http://blog.awairo.net/blog/2014/01/05/how-to-update-forge-on-gradleide</id>
    <content type="html"><![CDATA[<p>Eclipse上からForgeを更新する方法</p>

<!--more-->


<h1>GradleIDEって？</h1>

<p>Eclipseプラグインの<a href="https://marketplace.eclipse.org/content/gradle-integration-eclipse">Gradle Integration for Eclipse</a>(<a href="https://github.com/spring-projects/eclipse-integration-gradle/">GitHub</a>)です。</p>

<p>先日のポスト、<a href="/blog/2014/01/02/shortcut-of-making-workspace-for-mc-modding1/">ちゃちゃっとマイクラMOD開発環境をつくる(1)</a>、<a href="/blog/2014/01/02/shortcut-of-making-workspace-for-mc-modding2/">ちゃちゃっとマイクラMOD開発環境をつくる(2)</a>にも少しだけ書いた気がしますが、Eclipse上からAntを実行するような感じで、Gradleのタスクを実行したりできるようになるプラグインで、ForgeGradleを使う上でも結構便利です。</p>

<p><a href="http://news.mynavi.jp/column/ide/153/index.html">日本語、画像つきで簡単に解説してあるサイト</a>もあるので、知らない人はそちらもどうぞ。</p>

<h1>Forgeの更新のしかた</h1>

<h2>前提条件</h2>

<ul>
<li>Eclipse

<ul>
<li>GradleIDEプラグインを導入済み</li>
</ul>
</li>
</ul>


<h2>事前準備</h2>

<p>プロジェクトをGradleプロジェクトとして構成しておきます。</p>

<p>以下2ケースを紹介します。</p>

<ul>
<li>既にプロジェクトを作成している場合</li>
<li>新規にForge開発環境を作成する場合</li>
</ul>


<h3>既にプロジェクトを作成している場合</h3>

<p>Eclipseのエクスプローラーより、プロジェクトを右クリックし、構成からGradleプロジェクトに変換してください。</p>

<p><img src="/images/posts/2014/01/05/how-to-update-forge-on-gradleide/1_context-menu.png" alt="コンテキストメニューからGradleプロジェクトに変換を選んでいる画像" /></p>

<h3>新規にForge開発環境を作成する場合</h3>

<p>Forgeを落としてきただけで、プロジェクトをインポートしていない場合は、インポート時にGradleプロジェクトとしてインポートする方法が使えます。</p>

<p>こちらの手順のほうが、細かい設定を最初に指定することができます。</p>

<ol>
<li>Forgeのsrcを展開する。</li>
<li>コンテキストメニューからインポートを選ぶ。</li>
<li>開いたインポートウィンドウからGradleProjectを選択。</li>
<li>1のフォルダーへのパスを入力し、「BuildModel」ボタンを押下。</li>
</ol>


<h3>Forgeのsrcを展開する</h3>

<p><img src="/images/posts/2014/01/05/how-to-update-forge-on-gradleide/2-1_start.png" alt="Forgeのsrcを展開したフォルダーの画像" /></p>

<h3>コンテキストメニューからインポートを選ぶ</h3>

<p><img src="/images/posts/2014/01/05/how-to-update-forge-on-gradleide/2-2_import.png" alt="コンテキストメニューからインポートを選んでいる画像" /></p>

<h3>開いたインポートウィンドウからGradleProjectを選択</h3>

<p><img src="/images/posts/2014/01/05/how-to-update-forge-on-gradleide/2-3_import-gradle-project.png" alt="インポートウィンドウの画像" /></p>

<h3>フォルダーへのパスを入力し、「BuildModel」ボタンを押下</h3>

<p><img src="/images/posts/2014/01/05/how-to-update-forge-on-gradleide/2-4_build-model.png" alt="GradleProjectのインポートウィンドウの上部" /></p>

<ul>
<li>GradleProjectインポートウィンドウの下部はこんな感じ。</li>
</ul>


<p><img src="/images/posts/2014/01/05/how-to-update-forge-on-gradleide/2-5_project-configure.png" alt="GradleProjectのインポートウィンドウの下部" /></p>

<ul>
<li>Run Beforeが全てリフレッシュ時に実行されるタスク。スペースで複数指定可能。例えば、<code>setupDecompWorkspace</code>タスクも実行したい場合は、ここに足そう。</li>
<li>Run Afterが上記の後に実行されるタスク。<a href="https://issuetracker.springsource.com/browse/STS-3057"><code>.classpath</code>ファイルのカスタマイズなどに使える</a>みたい。</li>
<li>依存関係管理はそのまんまの意味、だと思うので有効にしておいたほうが良さそう。</li>
<li>Create resource filtersはよくわからないのでデフォルトのままにしました。</li>
<li>Create workingset &lsquo;<your project name>&rsquo; はそのまんま。不要なのでチェック外しました。</li>
<li>Enable DSL Suportはきちんと理解していないですが、有効だと、build.gradleのエディターで、一部のタイプのマークアップや参照検索が有効になったので、チェックを入れておいたほうが良さそうな感じです。</li>
<li>Use hierarchical project names はよくわからないのでチェックしませんでした。</li>
</ul>


<p>これで完了を押すと、GradleProjectの構成になった状態でインポートされます。</p>

<p>依存関係管理、DSLサポートなんかは後からも変更できるみたいですが、他の設定は、後からGUI上で変更する方法が見当たらなかったため、rubBeforeなどを変更しておきた場合は、こちらの方法でプロジェクトを構成しておいたほうがよさそうかも。</p>

<p>設定値の意味は、時間がないので調べきれていません。また後日気が向いたら調べてみます。</p>

<p>もう眠い( っ'ω'c)</p>

<h2>更新手順</h2>

<ol>
<li>Forgeのバージョンを調べbuild.gradleに反映する。</li>
<li>コンテキストメニューのGradleからすべてリフレッシュを選択する。</li>
</ol>


<h3>Forgeのバージョンを調べbuild.gradleに反映する</h3>

<p><a href="http://files.minecraftforge.net/">ダウンロードのページ</a>から、更新したいForgeのバージョンを調べ、build.gradleファイルを更新します。</p>

<p><img src="/images/posts/2014/01/05/how-to-update-forge-on-gradleide/3-1_build.gradle.png" alt="img3-1" /></p>

<h3>コンテキストメニューのGradleからすべてリフレッシュを選択</h3>

<p><img src="/images/posts/2014/01/05/how-to-update-forge-on-gradleide/3-2_refresh-all.png" alt="img3-2" /></p>

<p>これで、Forgeの最新版がダウンロードされ、開発環境が更新されます。</p>

<hr />

<p>参考:
&ndash; <a href="http://www.glamenv-septzen.net/index.php?id=1216_1">Groovy/Gradle/Eclipseとの連携/SpringのEclipsePlugin使用メモ (v1) &ndash; Glamenv-Septzen.net</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ちゃちゃっとマイクラMOD開発環境をつくる(1)]]></title>
    <link href="http://blog.awairo.net/blog/2014/01/02/shortcut-of-making-workspace-for-mc-modding1/"/>
    <updated>2014-01-02T02:25:00+09:00</updated>
    <id>http://blog.awairo.net/blog/2014/01/02/shortcut-of-making-workspace-for-mc-modding1</id>
    <content type="html"><![CDATA[<p>MinecraftのModding環境の構築手順についてのメモ。</p>

<p>前編的なやつで、主にEclipseについていろいろ。</p>

<!--more-->


<hr />

<p>もとは1記事で書いてたんですが、Eclipseについて長く書きすぎたので分割しました。</p>

<p>Forgeのインストール以降については次の記事になります。</p>

<h1>対象</h1>

<ul>
<li>Javaで開発ができる</li>
<li>IDE(Eclipse)が使える</li>
<li>Google先生と仲がいい</li>
</ul>


<h1>準備するもの</h1>

<ul>
<li>Java SE Development Kit(JDK) (Pleiadesのjava版のfullを使うならなくてもOK)</li>
<li>Eclipse (最低限JDTが入っていればOK)</li>
</ul>


<h1>JDKの準備</h1>

<ol>
<li><a href="http://www.oracle.com/technetwork/jp/java/javase/downloads/">Oracle</a>から任意のJDKをダウンロードする。</li>
<li>インストールする。</li>
<li>環境変数<code>JAVA_HOME</code>に、JDKへのパスを設定する。</li>
</ol>


<h2>どれをダウンロードすればいいの？</h2>

<p>この記事を書いている時点での最新はJava7のupdate45です。上記サイトからOracleの英語サイトに行き、JDKのダウンロードを選び、「Java SE Development Kit 7u45」の一番上のライセンスを確認したのち同意し、自分の環境用のJDKを選べばOK。Windowsの32bit版であればWindows x86、64Bit版であればx64を選びます。</p>

<p>ダウンロードが完了したら、実行してインストールします。環境設定を行う必要があるので、インストール先が何処になるかはちゃんと覚えて起きましょう。</p>

<p>注意するべき点は、JREではなくJDKをダウンロードする、ということくらいです。</p>

<p>ちなみに、JDKのインストーラーで追加されるJREは、インストールしなくても問題ないです。おそらく、自動更新で最新版になってるはずなので。</p>

<h2>Eclipse付属のを使うのでJDKインストールしないで進めたい。</h2>

<p>特に試してないので、動確はとってませんが、多分pleiades付属のJRE(JDKとかも同梱)を環境変数JAVA_HOMEに設定しておけば問題無いです。うろ覚えですが、たしかpleiades/java/jre7とかだった気がします。そのあたりのフォルダーのパスをJAVA_HOMEに設定すれば、多分いけます。</p>

<h2>環境変数の設定について</h2>

<p>のちの記事にでてくる、Gradleコマンドを実行するにあたり、<a href="http://gradle.monochromeroad.com/docs/userguide/installation.html">環境変数にJDKへのパス設定が必要</a>となります。環境変数の設定方法などは、<a href="http://goo.gl/orGSNA">この先生が詳しい</a>ので、どうしてもわからなければ聞いてください。</p>

<p>自分は、JAVA_HOMEにJDKを足して、パスに%JAVA_HOME%/binを足しています。ですが、JDKを頻繁に更新しなさそうであれば、パスへの追加はしないほうがいいかもしれません。(JDKはJREみたいな自動更新がないので、最新JREが参照されなくなるかもしれない)</p>

<p>なお、Gradleへのパス設定は、ForgeにGradleラッパーが付属しているので、特に行う必要はありません。そのため、事前にGradleのインストールも不要です。</p>

<h1>Eclipseの準備</h1>

<p>統合開発環境(IDE)にはEclipseを使用します。</p>

<p>Pleiades Java版 を使うケースと、Pleiades Platform版 を使うか、公式のEclipseを使う(日本語化しない)ケースについて、説明します。</p>

<h2>そもそもなぜPleiades？</h2>

<p>Eclipseは、日本語環境を用意するならPleiadesが手っ取り早いです。必要なプラグイン(や不要なプラグイン)を予め導入したうえに、初期設定を一部変更したオールインワンパッケージで配布されているため、とっかかりやすいです。</p>

<h2>Pleiades、沢山あるけどどれを選べばいいの？</h2>

<p>Java開発用か、Platformを選んでください。</p>

<p>Java開発用の場合は、Mod開発に不要なプラグインも多数導入されており、多機能すぎて意味不明なものがいっぱいあり、初心者は混乱しそうな感じだったりします。しかし、Platformの場合は、殆どプラグインが導入されていない状態なので、Java開発ツール(JDT)から全て自分で用意していく必要があり、やっぱり難易度は高いです。</p>

<p>(JavaSE用のPleiadesもあっていいと思うんだけどナァ…)</p>

<p>PleiadesのJavaであっても、TomcatLauncherを始め、いくつかの必要ないプラグインは削除が可能なので、Mod開発に不要なものを削除してから使えば、不要な設定やボタンがいくらか消せます。なので、こだわりがなければ、Java版を導入するほうがいいと思います。</p>

<p>また、さくっと消せないようになってるビルドインプラグインも、手動で頑張れば消せなくはないです。ですが、そこまでやるくらいなら、Platformに自分でJDTや必要なプラグインを導入した方が捗ると思うので、きっちりかっちり開発環境を整えたいのであれば、Platform版をおすすめしておきます。</p>

<p>もちろん、不要なプラグインが入っていて、いらないツールバーや設定があっても気にしないのであれば、Java版をそのまま使うこともできます。多くの人は、多分そうしている気がします。</p>

<p>もしあなたのコンピューターがロースペックであれば、Pleiades無しのEclipseを、選択肢に含めてもいいかもしれません。</p>

<p>Pleiadesは、比較的重たい処理を挟む(動的に日本語翻訳を行う)プラグインなので、ロースペック環境では、パフォーマンスに影響してくるかもしれません(比べた事はないです)。Pleiadesを使わない場合、日本語化されなくなり、JavaDocの日本語化などもなくなりますが、英語に抵抗がなければ、ありかも？</p>

<p>(静的ファイルによる部分的な日本語化方法もあるらしいですが、詳しく知らないので省略します)</p>

<h3>日本語化しない場合について補足</h3>

<p>Pleiadesの場合でも、dropinsフォルダーからPleiadesプラグイン本体を削除しちゃえば、日本語化されなくなります。また、eclipse.iniを編集し、一時的に無効化することもできるみたいです。公式のEclipseを落としてくる場合は、そこから英語と戦うことになるので、それが辛い場合はPleiadesを落としてきて、Pleiadesを削除して使う手もあります。やったことないですが。</p>

<h2>Pleiades Java版の導入手順</h2>

<ol>
<li>Pleiadesの4.3のJava版をダウンロード。</li>
<li>不要なdropinのプラグインを削除</li>
</ol>


<p>2はお好みで。</p>

<h3>Pleiadesダウンロード</h3>

<p><a href="http://mergedoc.sourceforge.jp/">mergedoc</a>からダウンロードしてきます。</p>

<p>32Bit版か64Bit版かは、自分のOSに合わせてください。Window環境であれば、ショートカット「<code>win</code>+<code>page break</code>(右上の方のキー)」か、コンピューター(もしくはマイコンピュータ)を右クリックし、プロパティを選び、「システムの種類」を確認すればわかります。</p>

<p>FullEditionとStandardEditionの違いは、いろいろおまけがついてくるかの違いです。差がわからない人はFullを選んで、いらないものは(Tomcatなど)削除しちゃえばOKです。</p>

<h3>削除してもよさそうなdropinプラグイン</h3>

<p>参考までに、私見と偏見だけで、Java版のプラグインのうち、Mod開発には要らなさそうなものをピックアップしていきます。</p>

<p>削除方法については、pleiadesのサイトのダウンロードのページの下のほうなんかを見てください。つっても、基本的にdropinsフォルダーから削除するだけですが。</p>

<p>MergeDoc(pleiades)だけは、eclipse.iniの修正も必要だと思うので、削除する場合は気を付けてください。</p>

<h4>AmaterasERD / AmaterasUML</h4>

<p>ER図作ったりUMLの図をGuiで作成する、設計関連のプラグイン。不要なら削除してOK。UMLツールとしては、できることが少なすぎて見た目もしょっぱい感じなので、おしごとでもこいつの出番はそんなに多くなかったりする。</p>

<h4>CheckStyle / FindBugs</h4>

<p>好ましくないコーディングスタイルや、バグの要因になりやすいコードをチェックし、指摘してくれる。おしごとコーダーにはほぼ必須プラグインだけれど、個人開発ならなくても問題はない。ただし、有効にすることで、勉強になる指摘を得れるかも知れない。不要であれば削除OK。</p>

<h4>DBViewer</h4>

<p>データベースビューワー。一般的なModdingには不要だと思うので削除してOK。</p>

<h4>EclipseRCP</h4>

<p>リッチクライアント(GUIでグイグイやる感じのアプリケーションとか)の開発用。ModはMinecraftの上で動くものが殆どなので、まず使わない。削除してダイジョブ。</p>

<h4>Limy</h4>

<p>特定パラメーターなどへのJavaDocの自動生成や、ヘッダーコメントの一括追加などができる。あってもなくてもって感じなのでお好みで。</p>

<h4>NTail</h4>

<p>ログファイルビューワー。<code>tail</code>コマンドっぽく巨大ファイルの末尾側だけ読んだりできる…んだと思う。Mod開発で巨大なログファイルを参照することはそうないので、削除OK。</p>

<h4>QuickJUnit</h4>

<p>単体テストツール(JUnit)を便利に使えるようにするプラグイン。テストクラス作成や、テストクラスと、テスト対象クラスの移動が簡単にでき、めっちゃ捗る神プラグイン。テストコードを書くことがあれば残しておくべきだけど、テストコードを書くことがないのなら、なくてもOK。</p>

<h4>Subversive / SubversiveJDT</h4>

<p>Subversion(バージョン管理システムの一種、通称SVN)用のプラグインの一つ。他のプラグインもあるので、入れ替える人もそこそこ居る。必要でなければ削除でOK</p>

<p>そもそも、昨今のバージョン管理の主流はGitになりつつある(偏見補正あり)ので、SVN自体おすすめはしないです。バージョン管理なんてよくわからないって人は、SVNも使わないだろうから、削除してOK。</p>

<h4>TomcatLauncher</h4>

<p>JavaでWebアプリケーションを作る場合によく利用される、Javaが動くWebサーバー「Tomcat」との連携をしやすくするプラグイン。Moddingでは間違いなく必要ないので削除でOK。</p>

<h2>Pleiades Platform版、または素のEclipseの導入</h2>

<p>PleiadesのPlatformは、PleiadesのJavaと同じ方法で入手できるので端折ります。</p>

<p>素のEclipseは、<a href="http://www.eclipse.org/">公式サイト</a>からダウンロードしてきます。この選択をする人なら自己解決できそうなので詳細は端折ります。</p>

<p>おわったおわった！</p>

<h3>JDTとマーケットプレイス・クライアントの導入</h3>

<p>そのままではJava開発ができないので、Java開発ツールプラグイン(JDT)を導入します。</p>

<p>また、プラグインを追加するなら、マーケットプレイスが使えないと始まらないです。最近のEclipseはデフォルトでクライアントが付属しなくなっているので、自分で導入します。ただし、Pleiadesならインストール済みだったと思います。</p>

<h4>手順</h4>

<p>英語でやる人ならわかると思うので、日本語で書きます。英語のままな場合は適せん読み替えてください。</p>

<ol>
<li>Eclipseを起動して、メニューからヘルプを選択。</li>
<li>新規ソフトウェアのインストール。</li>
<li>更新サイトでKeplerを選ぶ。※Eclipseのバージョンにあわせる</li>
<li>&ldquo;java"でフィルターし、プログラミング言語グループの「Eclipse Java 開発ツール」を選択。</li>
<li>&ldquo;market"でフィルターし、一般用ツールグループの「マーケットプレイス・クライアント」を選択。</li>
<li>次へを押して同意してインストール。</li>
</ol>


<p>終わったらEclipseを再起動、もしくは一旦終了してcleanを指定してから起動すれば、完了です。</p>

<h3>入れておいたほうがいいEclipseプラグインとかある？</h3>

<p>自分が導入してるやつから適当にピックアップしてみます。名前だけです。マーケットプレイスで検索すれば大抵はヒットするかと思います。</p>

<h4>Eclipse Color Theme</h4>

<p>テーマを選んで文字色や背景色を一括変更するプラグイン。プラグインで追加された専用エディタなんかだとテーマ変更だけじゃ変わらない場合もあるけど、黒背景勢には割と必須プラグイン。</p>

<h4>EGit</h4>

<p>GitのGUIクライアント。別のGitのGUIツールを使ってる場合でも、ソース管理にGitを使っているなら入れておいて損はないはず。Eclipse上から編集有無の確認をしたり、差分を確認したりできます。Pullのデフォルト動作の変更(rebaseにする)や、ローカル変更が有る際のpullが簡単で、一括Pushが使いやすいので、通常使いとしても割りとオススメです。(ただnon-ff margeができなかった気がします)</p>

<h4>Gradle Integration for Eclipse (GradleIDE)</h4>

<p>Forgeも対応したビルドツールGradleを、Eclipse上から便利に使えるようにするプラグイン。プロジェクト構成をGradleプロジェクトに変更し、ちゃんとプラグイン設定をしておけば、build.gradleを編集するだけで最新のForgeに更新したりできるのでおすすめ。</p>

<h4>GitHub Flavored Markdown viewer plugin</h4>

<p>GitHubで使うREADME.md用のGitHub風ビューワー。GitHubを使うならあって損はしないはず。GitHub風というかHTTP経由でスタイルシートとかもってきて表示してるみたい。使い方は、markdownファイルを開いた状態で、このプラグインで追加されたビューを開くだけ。ただし、関係ないときにビュー開くと、Eclipse側にエラーが出るのがちょっとうざい。</p>

<h4>Markdown Text Editor</h4>

<p>markdownエディタ。上と合わせてGitHubのREADME.mdを編集する用。</p>

<h4>YEdit</h4>

<p>YAMLエディタ。ちょいちょい出てくる設定ファイルなどで使えるので、いれといた。</p>

<h4>Eclipse Json Editor</h4>

<p>JSONエディタ。同上。</p>

<h4>プロパティエディタ</h4>

<p>日本語使う事考えるとやっぱ入れておいたほうがいいのかなと思って追加。プロパティファイル自体、最近のModdingじゃあまり使わないようになるかもしれないけれど。</p>

<h4>Groovy Eclipse Plugin</h4>

<p>build.gradle編集用に、Groovyに対応したエディターが欲しかったので追加。マーケットプレイスにEclipse4.3用が見当たらなかったので、手動で更新サイトを追加してインストールしました。</p>

<h4>Any Edit Tools</h4>

<p>キャメルケースとスネークケースの変換や、大文字小文字変換、改行コードの一括変換など、リファクタリング時や、コード整理などで便利な機能が用意されてるので、地味に有用。前は入れてあるだけって感じだったけど、最近機能に気づいてよく使うようになった。</p>

<h4>Quick JUnit</h4>

<p>JUnitを便利に使えるようにするプラグイン。Ctrl+9でテストターゲットクラスとテストクラスの移動が便利。Mod作成でテスト書くかはわからないけれど、後学のためって感じで。</p>

<h4>JMockit Eclipse Plug-in</h4>

<p>テスト用のモックツールJMockitを使いやすくするプラグイン。JMockit使う場合の起動構成の引数を書かなくてもよくなるので、Mockテストを書く機会があればかなり有用。テストコード自体を書くかは不明だけど、勉強のために少しやるかもなので、とりあえず入れといたって感じ。</p>

<h4>CheckStyle / FindBugs</h4>

<p>後学のためには、あっても損しないと思います。ニアミス回避にもなるかも。</p>

<h1>Eclipseの使い方わかんないよ！</h1>

<p>ぐぐって、どうぞ。</p>

<p>左側のパッケージエクスプローラーが、ファイルの一覧みたいなものです。ドットファイルなどは自動的にフィルターされ、ソースフォルダーなど、特別なフォルダーの表示方法が変わったりします。また、Eclipse内だけで有効な、シンボリックリンク(リンクフォルダー)を作成したりもできます。</p>

<p>プロジェクトエクスプローラーの場合も大体同じですが、表示内容が多少違います(違いは自分で感じて)。個人的にはパッケージエクスプローラーのほうが使いやすいと思うので、プロジェクトエクスプローラーは殆ど使ってないです。このビューが表示されていなければ、ウィンドウ→ビューの表示から追加してください。(その他のビューもここから追加が出来ます)</p>

<p>右上の方にあるのが、パースペクティブの切り替えボタンです。Java開発用、デバッグ用、リポジトリ管理用などがあり、切り替えて使います。パースペクティブを切り替えることで、ツールバーやビューを一括で変更できるので、シーンに合わせて使い分けをして行く感じです。プラグインや開発ツールが、デフォ設定としてパースペクティブを何パターンか用意してくれるので、自分で0から作ることはあんまりなく、元からあるのを自分の使いやすいようにカスタマイズして、使っていきます。</p>

<p>ツールバーの、緑色の三角ボタンと、緑色の虫のボタンが、実行とデバッグ実行のボタンです。作ったModを動作させる場合、ここから起動してあげます。起動構成を編集することで、複数のModを同時に動かしたりも出来ます。</p>

<p>デバッグ実行は、デバッガーを接続した状態で実行してくれます。デバッガーってのは、任意のコードがよばれた際に、処理を中断できる「ブレークポイント」を設定したり、ブレーク中に変数の値を直接書き換えたりすることができる、動作確認やテストを行うためのツールで、ぶっちゃけコレがないと開発なんぞやってられない、って代物です。</p>

<p>ものすごくさわりだけ説明すると、こんな感じです。あとは触りながら調べていってください。</p>

<p>IDEはできることが多いので、何ができるか覚えるまでが遠いですが、手作業でやるのは面倒だなって思うことの大半は、どうにかすればIDEで簡単に出来ます。例えば、クラス名の一括変更とか、参照元検索とか、親クラスや子クラスの一覧を表示したりとかは、簡単に行えます。また、そのままでは出来なくても、誰かが作ったプラグインがあったりもします。手探りしつつがんばってください。</p>

<hr />

<p>Eclipseプラグインはまだいろいろ試してないので、今後も追加や削除などをしていきながら検討していこうかと思ってます。</p>

<p>っていうかいい加減環境おちつけて開発にシフトしてかないと冬休み終わっちゃうネ。ﾔﾊﾞｰｲ。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Eclipse起動時に開くSTSのダッシュボードを無効化]]></title>
    <link href="http://blog.awairo.net/blog/2013/12/15/disable-spring-tool-suite-dashboard-on-eclipse-startup/"/>
    <updated>2013-12-15T02:43:00+09:00</updated>
    <id>http://blog.awairo.net/blog/2013/12/15/disable-spring-tool-suite-dashboard-on-eclipse-startup</id>
    <content type="html"><![CDATA[<p>STSのダッシュボードが起動時に開くの邪魔いのでメモ。</p>

<!--more-->


<h1>概要</h1>

<p><a href="http://shootingstar.fm/">星を投げつけるタイプのTwitterクライアント</a>ではなくて、<a href="http://spring.io/tools/sts">SpringToolSuite</a>です。
<img src="/images/posts/2013/12/15/disable-spring-tool-suite-dashboard-on-eclipse-startup/dashbard.png" title="これが起動時毎回でてくるのでちょっと邪魔に感じてた。" alt="ダッシュボードの画像" /></p>

<p>たしかGradleIDEインスコしたとき、Groovyエディタとかもあったほうがいいかなって、Groovyのプラグインを導入したのだけれど、そのときセットで要求されて導入したSTSが、Eclipseの起動時に毎回ダッシュボードを開いてくるので、ちょっと邪魔っぽい。</p>

<p>設定を探すのが面倒だったので<a href="http://goo.gl/kcpQOO">グーグル先生</a>にきいてみた。</p>

<p>一発目でHit。<a href="http://stackoverflow.com/questions/5158116/can-i-disable-the-dashboard-window-when-springsource-tool-suite-starts-up" title="ide - Can I disable the Dashboard window when SpringSource Tool Suite starts up? - Stack Overflow">StackOverflow</a>に書いてあった。備忘録を兼ねてメモ。</p>

<h1>手順</h1>

<p>以下はPleiadesで日本語化されたKepler(Eclipse4.3)での説明。</p>

<ol>
<li>メニューから「ウィンドウ」→「設定」で設定ウィンドウを開く。</li>
<li>「SpringSource」選択。</li>
<li>「Dashboard」選択。</li>
<li>「Show Dashboard On Startup」のチェックを外す。</li>
</ol>


<p><img src="/images/posts/2013/12/15/disable-spring-tool-suite-dashboard-on-eclipse-startup/preferences.png" alt="Eclipseの設定ウィンドウのスクリーンショット" /></p>

<p>おしまい♪</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[java.awt.List とお別れする方法]]></title>
    <link href="http://blog.awairo.net/blog/2013/02/18/ignore-java-awt-list/"/>
    <updated>2013-02-18T01:28:00+09:00</updated>
    <id>http://blog.awairo.net/blog/2013/02/18/ignore-java-awt-list</id>
    <content type="html"><![CDATA[<p>Eclipseの使い方的な内容</p>

<!-- more -->


<h1>Modderあるあるｗｗｗ</h1>

<p>java.util.List が使いたいので、list とタイプして…</p>

<p><img src="/images/posts/2013/02/18/ignore-java-awt-list/list1.png" alt="listまでタイプしたソースコード画像" /></p>

<p>補完で自動インポートをかけようとすると…</p>

<p><img src="/images/posts/2013/02/18/ignore-java-awt-list/list2.png" alt="コンテンツアシストに java.util.List と java.awt.List が表示されているソースコード画像" /></p>

<p>java.awt.List…てめーはダメだ！</p>

<p>Eclipse で Java コーディングしてるとき、同じような経験をした事がある人は少なくないと思います。StringUtil(s) クラスあたりは、単純クラス名重複率のトップクラスなんじゃないでしょうか。プロジェクト毎、ライブラリ毎にいたりして、使うのはプロジェクト用のものと決まっているのに、毎度対話を求められたりすると、地味にめんどくさくて気になります。</p>

<h1>使わないクラスはフィルタしちゃおう</h1>

<p>実はちょうど Twitter でこの話題が出てたのと、前から気になってたので、調べてみました。</p>

<h2>参考にしたサイト</h2>

<p><a href="http://d.hatena.ne.jp/Yamashiro0217/20090322/1237707686" title="Yamashiro0217の日記">Eclipse のコード補完 (Complete) で java.awt.List とかを補完候補から除外したい場合の設定 &ndash; Yamashiro0217の日記</a></p>

<p>やっぱ同じこと思う人いますよね。一発でみつかりました。</p>

<h2>設定方法</h2>

<p>すごく簡単。
型フィルタの設定に、除外したいクラスの完全修飾名か、パッケージ名にワイルドカードを付けて追加するだけ。</p>

<ol>
<li>ウィンドウ</li>
<li>設定</li>
<li>Java</li>
<li>外観</li>
<li>型フィルター
<img src="/images/posts/2013/02/18/ignore-java-awt-list/typefilter.png" alt="型フィルタのウィンドウイメージ" /></li>
</ol>


<p>とりあえず、私は Entity や Point なども除外したかったので、以下を追加しました。</p>

<ul>
<li>java.awt.*</li>
<li>javax.swing.*</li>
<li>org.w3c.dom.*</li>
</ul>


<p><img src="/images/posts/2013/02/18/ignore-java-awt-list/list3.png" alt="java.awt.Listが表示されなくなったソースコード画像" /></p>

<p>これで邪魔者はいなくなった！</p>

<p>参考にしたサイトにも書いてありましたが、プロジェクト単位での設定ができないので、同一ワークスペース内でプロジェクトごとに変えることができない、ってのが難点ってとこでしょうか。でもまぁそのあたりは、コードテンプレートなんかを駆使し、完全修飾名を補完できるようにしてしまえば、多分困ることはないかなって気がします。</p>

<p>むしろそっちの方がクラスごとにインポートしてるクラスがちがう、なんてことも起きにくくなっていいのかも…？</p>

<hr />

<p>ん…？</p>

<p><img src="/images/posts/2013/02/18/ignore-java-awt-list/typefilter-example.png" alt="型フィルタのウィンドウイメージ" /></p>

<p>き、きっと &ldquo;a&rdquo; で始まるからだよね…(´・ω・｀)</p>
]]></content>
  </entry>
  
</feed>
