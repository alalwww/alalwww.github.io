<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: MinecraftForge | AwAlog]]></title>
  <link href="http://blog.awairo.net/blog/categories/minecraftforge/atom.xml" rel="self"/>
  <link href="http://blog.awairo.net/"/>
  <updated>2014-01-05T23:54:52+09:00</updated>
  <id>http://blog.awairo.net/</id>
  <author>
    <name><![CDATA[alalwww]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[GradleIDEでForgeを更新する方法]]></title>
    <link href="http://blog.awairo.net/blog/2014/01/05/how-to-update-forge-on-gradleide/"/>
    <updated>2014-01-05T23:28:00+09:00</updated>
    <id>http://blog.awairo.net/blog/2014/01/05/how-to-update-forge-on-gradleide</id>
    <content type="html"><![CDATA[<p>Eclipse上からForgeを更新する方法</p>

<!--more-->


<h1>GradleIDEって？</h1>

<p>Eclipseプラグインの<a href="https://marketplace.eclipse.org/content/gradle-integration-eclipse">Gradle Integration for Eclipse</a>(<a href="https://github.com/spring-projects/eclipse-integration-gradle/">GitHub</a>)です。</p>

<p>先日のポスト、<a href="/blog/2014/01/02/shortcut-of-making-workspace-for-mc-modding1/">ちゃちゃっとマイクラMOD開発環境をつくる(1)</a>、<a href="/blog/2014/01/02/shortcut-of-making-workspace-for-mc-modding2/">ちゃちゃっとマイクラMOD開発環境をつくる(2)</a>にも少しだけ書いた気がしますが、Eclipse上からAntを実行するような感じで、Gradleのタスクを実行したりできるようになるプラグインで、ForgeGradleを使う上でも結構便利です。</p>

<p><a href="http://news.mynavi.jp/column/ide/153/index.html">日本語、画像つきで簡単に解説してあるサイト</a>もあるので、知らない人はそちらもどうぞ。</p>

<p>英語ですが、<a href="ttps://github.com/spring-projects/eclipse-integration-gradle/wiki/Gradle-Import-Wizard">GradleIDEのwiki</a>にも解説があります。</p>

<p>(まだほとんど読んでません)</p>

<h1>Forgeの更新のしかた</h1>

<h2>前提条件</h2>

<ul>
<li>Eclipse

<ul>
<li>GradleIDEプラグインを導入済み</li>
</ul>
</li>
</ul>


<h2>事前準備</h2>

<p>プロジェクトをGradleプロジェクトとして構成しておきます。</p>

<p>以下2ケースを紹介します。</p>

<ul>
<li>既にプロジェクトを作成している場合</li>
<li>新規にForge開発環境を作成する場合</li>
</ul>


<h3>既にプロジェクトを作成している場合</h3>

<p>Eclipseのエクスプローラーより、プロジェクトを右クリックし、構成からGradleプロジェクトに変換してください。</p>

<p><img src="/images/posts/2014/01/05/how-to-update-forge-on-gradleide/1_context-menu.png" alt="コンテキストメニューからGradleプロジェクトに変換を選んでいる画像" /></p>

<h3>新規にForge開発環境を作成する場合</h3>

<p>Forgeを落としてきただけで、プロジェクトをインポートしていない場合は、インポート時にGradleプロジェクトとしてインポートする方法が使えます。</p>

<p>こちらの手順のほうが、細かい設定を最初に指定することができます。</p>

<ol>
<li>Forgeのsrcを展開する。</li>
<li>コンテキストメニューからインポートを選ぶ。</li>
<li>開いたインポートウィンドウからGradleProjectを選択。</li>
<li>1のフォルダーへのパスを入力し、「BuildModel」ボタンを押下。</li>
</ol>


<h3>Forgeのsrcを展開する</h3>

<p><img src="/images/posts/2014/01/05/how-to-update-forge-on-gradleide/2-1_start.png" alt="Forgeのsrcを展開したフォルダーの画像" /></p>

<h3>コンテキストメニューからインポートを選ぶ</h3>

<p><img src="/images/posts/2014/01/05/how-to-update-forge-on-gradleide/2-2_import.png" alt="コンテキストメニューからインポートを選んでいる画像" /></p>

<h3>開いたインポートウィンドウからGradleProjectを選択</h3>

<p><img src="/images/posts/2014/01/05/how-to-update-forge-on-gradleide/2-3_import-gradle-project.png" alt="インポートウィンドウの画像" /></p>

<h3>フォルダーへのパスを入力し、「BuildModel」ボタンを押下</h3>

<p><img src="/images/posts/2014/01/05/how-to-update-forge-on-gradleide/2-4_build-model.png" alt="GradleProjectのインポートウィンドウの上部" /></p>

<ul>
<li>GradleProjectインポートウィンドウの下部はこんな感じ。</li>
</ul>


<p><img src="/images/posts/2014/01/05/how-to-update-forge-on-gradleide/2-5_project-configure.png" alt="GradleProjectのインポートウィンドウの下部" /></p>

<ul>
<li>Run Beforeが全てリフレッシュ時に実行されるタスク。開始タスクで、afterと対になっている。スペースで複数指定可能。例えば、<code>setupDecompWorkspace</code>タスクも実行したい場合は、ここに足そう。</li>
<li>Run Afterが上記の後に実行されるタスク。終了タスク。例えば、<a href="https://issuetracker.springsource.com/browse/STS-3057">.classpathファイルのカスタマイズをするために使ったり</a>するみたい。標準で定義されているタスクではないけど、<a href="https://github.com/spring-projects/eclipse-integration-gradle/wiki/Gradle-Import-Wizard#use-case-2-execute-aftereclipseimport-task">初期値のタスクのまま有効にしておいたほうがいい</a>、っぽい。</li>
<li>依存関係管理はそのまんまの意味、だと思うので有効にしておいたほうが良さそう。</li>
<li>Create resource filtersはよくわからないのでデフォルトのままにしました。</li>
<li>Create workingset &lsquo;<your project name>&rsquo; はそのまんま。不要なのでチェック外しました。</li>
<li>Enable DSL Suportはきちんと理解していないですが、有効だと、build.gradleのエディターで、一部のタイプのマークアップや参照検索が有効になったので、チェックを入れておいたほうが良さそうな感じです。</li>
<li>Use hierarchical project names はよくわからないのでチェックしませんでした。</li>
</ul>


<p>上記の設定をおこない、完了を押すと、GradleProjectの構成になった状態でインポートされます。</p>

<p>依存関係管理、DSLサポートなんかは後からも変更できるみたいですが、他の設定は、後からGUI上で変更する方法が見当たらなかったため、rubBeforeなどを変更しておきた場合は、こちらの方法でプロジェクトを構成しておいたほうがよさそうかも。</p>

<p>設定値の意味は、時間がないので調べきれていません。また後日、気が向いたらGradleIDEのWiki読みなおしてみます。</p>

<p>もう眠い( っ'ω'c)</p>

<h2>更新手順</h2>

<ol>
<li>Forgeのバージョンを調べbuild.gradleに反映する。</li>
<li>コンテキストメニューのGradleからすべてリフレッシュを選択する。</li>
</ol>


<h3>Forgeのバージョンを調べbuild.gradleに反映する</h3>

<p><a href="http://files.minecraftforge.net/">ダウンロードのページ</a>から、更新したいForgeのバージョンを調べ、build.gradleファイルを更新します。</p>

<p><img src="/images/posts/2014/01/05/how-to-update-forge-on-gradleide/3-1_build.gradle.png" alt="img3-1" /></p>

<h3>コンテキストメニューのGradleからすべてリフレッシュを選択</h3>

<p><img src="/images/posts/2014/01/05/how-to-update-forge-on-gradleide/3-2_refresh-all.png" alt="img3-2" /></p>

<p>これで、Forgeの最新版がダウンロードされ、開発環境が更新されます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ちゃちゃっとマイクラMOD開発環境をつくる(2)]]></title>
    <link href="http://blog.awairo.net/blog/2014/01/02/shortcut-of-making-workspace-for-mc-modding2/"/>
    <updated>2014-01-02T11:45:00+09:00</updated>
    <id>http://blog.awairo.net/blog/2014/01/02/shortcut-of-making-workspace-for-mc-modding2</id>
    <content type="html"><![CDATA[<p>MinecraftのModding環境の構築手順についてのメモ。</p>

<p>後編的なやつで、Forgeを導入してリリースファイル作成まで。</p>

<!--more-->


<p>Eclipseの準備などは1つ前の記事を参照してください。</p>

<h1>対象</h1>

<ul>
<li>Javaで開発ができる</li>
<li>IDE(Eclipse)が使える</li>
<li>Google先生と仲がいい</li>
</ul>


<p>あと、Gitについても少しだけ書いています。</p>

<h1>準備するもの</h1>

<ul>
<li><a href="/blog/2014/01/02/shortcut-of-making-workspace-for-mc-modding1">EclipseとJDK</a></li>
<li>MnecraftForgeのsrc版(開発用)</li>
</ul>


<h2>やだやだEclipseやだIntelliJ IDEA使いたい</h2>

<p>開発用ワークスペースを作成後、<code>gradlew idea</code>コマンドでそれ用の開発環境が生成されます。あとはインポートして使ってください。起動構成などは自分で作成する必要がありますが、<a href="http://goo.gl/ZrMEuZ">検索すれば沢山情報は見つかります</a>。</p>

<p>それか、最近IDEAわいわいしていた <a href="http://nk0t.hatenablog.com/entry/2013/12/01/142608" title="ﾝｺﾂﾁｬﾝ">この</a> <a href="http://reginn666.hatenablog.com/entry/2013/12/25/031356" title="ｸﾏｰ">あたり</a> を見たり、チュートリアル作成の進捗確認をしてきて、どうぞ。</p>

<h2>GradleIDEは要らないの？</h2>

<p>リリースファイル生成や、ライブラリやForgeの更新時に、コマンドプロンプトでの操作が殆ど不要になるので、あったほうが便利です。ですが、使い方の日本語情報がまだ少ないようなのと、自分自身、説明書けるほど使いこなせていないので、今回は説明を端折りました。使えるなら導入をおすすめします。マーケットプレイスからインストールできるので、導入自体は簡単です。</p>

<p>プラグインをインストールしたら、Eclipse上でプロジェクトを右クリックし、「構成」→「Convert to Gradle Project」でプロジェクト構成をGradleプロジェクトにできます。</p>

<p>インストール直後のままだと、JDKがみつからなかったり、日本語を含むソースのコンパイルで文字コードが原因で失敗する事があります。その場合、build.gradleを修正したり、Eclipseの設定からJDKの指定や、JVM引数を足してあげれば、Eclipse上からビルドしてくれるようになります。</p>

<p>build.gradleを更新して保存するだけで、自動で依存関係が解決されるのは、ちょっとワクワクする感じでした。(maven未経験)</p>

<ul>
<li>手前味噌な参考情報

<ul>
<li><a href="https://twitter.com/alalwww/status/411868768550137856">https://twitter.com/alalwww/status/411868768550137856</a></li>
<li><a href="https://twitter.com/alalwww/status/411868963593670656">https://twitter.com/alalwww/status/411868963593670656</a></li>
<li><a href="https://twitter.com/alalwww/status/411871400035504128">https://twitter.com/alalwww/status/411871400035504128</a></li>
</ul>
</li>
</ul>


<h1>Forgeのインストール</h1>

<p>以下の順で、簡単に解説します</p>

<ol>
<li>Forgeのファイルを任意のフォルダーに配置</li>
<li>コマンドプロンプトからGradleを実行しEclipse用の環境を生成</li>
<li>EclipseでインポートしてMOD開発を行う</li>
<li>デバッグ起動してみる</li>
</ol>


<h2>1. Forgeのファイルを任意のフォルダーに配置</h2>

<p>好きなフォルダーにForgeのsrc版のZIPファイルを展開します。</p>

<p>Javaはファイル名が冗長になりやすいため、ドライブ直下など、あまり階層の深くない場所に配置するのをおすすめします。</p>

<p>今回は、Fドライブの直下にMod用フォルダーを作成し、その下に対象Modの開発環境を作成しました。
<img src="/images/posts/2014/01/02/shortcut-of-making-workspace-for-mc-modding2/1_unzip.png" title="画像から生み出される安心感" alt="ZIP展開直後のフォルダーのスクリーンショット" /></p>

<p>なお、ライセンスやクレジット、changelogは今後必要としないファイルなので、削除してOKです。</p>

<h2>2. コマンドプロンプトからGradleを実行しEclipse用の環境を生成</h2>

<p>以下、<code>F:\mod\TestMod</code>に展開したものとし、説明していきます。</p>

<p>コマンドプロンプトを開いて、上記のフォルダーに移動します。</p>

<pre><code>Microsoft Windows [Version 6.1.7601]
Copyright (c) 2009 Microsoft Corporation.  All rights reserved.

C:\Users\username&gt;f:

F:\&gt;cd mod\TestMod

F:\mod\TestMod&gt;
</code></pre>

<p><code>gradlew eclipse</code>コマンドを実行し、Eclipse用の開発環境を準備します。</p>

<pre><code>F:\mod\TestMod&gt;gradlew eclipse
****************************
 Powered By MCP:
 http://mcp.ocean-labs.de/
 Searge, ProfMobius, Fesh0r,
 R4wk, ZeuX, IngisKahn
 MCP Data version : unknown
****************************

(以下必要なファイルがなければダウンロードが行われ、必要なファイルが生成され、開発環境が構築される)

BUILD SUCCESSFUL

Total time: xx.xxx secs
F:\mod\TestMod&gt;
</code></pre>

<p>ForgeのGitHubのREADMEや、その他環境構築の解説記事などでは、最初に<code>setupDevWorkspace</code>タスクを実行する手順として書かれて居ることが多いです。</p>

<p>しかし実は<code>setupDevWorkspace</code>タスクは、<code>eclipse</code>タスクの依存タスクなので、明示的に指定しなくても勝手に実行されます。なので個別に実行する必要はなかったりします。(でも<code>idea</code>タスクは依存してないみたいなので、両方実行しないとダメっぽい。なんで統一されてないんだろう…。)</p>

<p>フォルダーの中は、こんな感じになりました。</p>

<p><img src="/images/posts/2014/01/02/shortcut-of-making-workspace-for-mc-modding2/2_setup.png" alt="gradleコマンド実行後のフォルダーのスクリーンショット" /></p>

<p>増えたファイルやフォルダーは、Gradle(ForgeGradle)によって自動生成されたものです。また、元からあったeclipseフォルダーの中に、assetsフォルダーなんかも生成されています。</p>

<p>これで、Eclipseを使った開発用の環境が生成されました。</p>

<h3>ついでにソース管理もやっちゃう？</h3>

<p>ソース管理を行うのであれば、このあたりで一度コミットをしておくとよいかもしれません。何も変更してない状態のコミットがあれば、途中でなにかやらかしても、最初まで立ち戻るときに役立ちます。</p>

<p>ここでは、Gitの導入方法については特に説明しませんが、ソース管理にGitを使う場合を、簡単に紹介しておきます。Guiツールを使ってやったほうが楽ちんですが、スクリーンショットの準備が面倒だったので、コマンドプロンプトからやっちゃいます。</p>

<p>また、Gitリポジトリを作成したあとに、Eclipseでプロジェクトを右クリックし、「チーム」→「プロジェクトの共用」から、EclipseでGitに接続できるように設定出来ます。こうすることで、変更したファイルがわかるようになり、Eclipse上からコミットなども行えるようになります。</p>

<h4>1. リポジトリ作成</h4>

<pre><code>F:\mod\TestMod&gt;cd ..

F:\mod&gt;git init TestMod
Initialized empty Git repository in F:/mod/TestMod/.git/
</code></pre>

<h4>2. コミット対象を確認してみる。</h4>

<pre><code>F:\mod\TestMod&gt;git status
# On branch master
#
# Initial commit
#
# Untracked files:
#   (use "git add &lt;file&gt;..." to include in what will be committed)
#
#       .classpath
#       .gitignore
#       .gradle/
#       .project
#       .settings/
#       build.gradle
#       build/
#       eclipse/
#       gradle/
#       gradlew
#       gradlew.bat
#       src/
nothing added to commit but untracked files present (use "git add" to track)
</code></pre>

<p>管理不要な、自動生成されたファイルなどローカル開発環境固有のものがいっぱいあります。</p>

<p>リポジトリを外部公開しないのであれば、ローカル依存の設定ファイルなどもコミットしてしまったほうが、変更の追跡や設定のロールバックなどもしやすく、便利な場合もあります。しかし、GitHubなどにPushし外部公開するのであれば、ローカル依存なファイルはコミットしないほうがいいでしょう。</p>

<h4>3. 余計な物が多いので無視設定を追加</h4>

<p>外部公開する場合を想定し、.gitignoreファイルを作成して、無視対象を追加していきます。</p>

<pre><code>F:\mod&gt;cd TestMod
F:\mod\TestMod&gt;echo /.classpath&gt;&gt;.gitignore
F:\mod\TestMod&gt;echo /.project&gt;&gt;.gitignore
F:\mod\TestMod&gt;echo /.settings/&gt;&gt;.gitignore
F:\mod\TestMod&gt;echo /.gradle/&gt;&gt;.gitignore
F:\mod\TestMod&gt;echo /bin/&gt;&gt;.gitignore
F:\mod\TestMod&gt;echo /build/&gt;&gt;.gitignore
F:\mod\TestMod&gt;echo /eclipse/&gt;&gt;.gitignore
</code></pre>

<p>ものぐさなので、コマンドプロンプトから直接書き出していきました。</p>

<p>&ldquo;.classpath"、&rdquo;.project"、および".settings/&ldquo;フォルダーは、eclipse用のプロジェクト設定ファイル、または設定ファイル用のフォルダーです。いずれも自分専用の開発環境用の設定なので、このあたりは個々の開発者が管理すべき内容であり、公開予定のリポジトリにはコミットするべきではありません。</p>

<p>&ldquo;.gradle/"フォルダーは名前の通りgradle用で、一時ファイルやログなどが出力されます。これもバージョン管理を行うべきではないため、無視対象に含めます。</p>

<p>&ldquo;bin/"フォルダーは、今はフォルダーも作成されていませんが、Eclipseで自動ビルドを行った際にクラスファイルが生成される場所になります。クラスファイルはソースがあれば生成でき、バージョン管理対象ではありません。</p>

<p>&ldquo;build/"フォルダーは、Gradleでビルドを行う際の、一時ファイルや生成したファイルの出力先になっています。</p>

<p>&ldquo;eclipse/"フォルダーは、ダウンロードしてきたassetsや、Eclipse上でサーバーやクライアントを起動した際の、セーブデータファイルなどが生成される場所です。</p>

<p>.gitignoreファイルが生成できたら、もう一度確認。</p>

<pre><code>F:\mod\TestMod&gt;git status
# On branch master
#
# Initial commit
#
# Untracked files:
#   (use "git add &lt;file&gt;..." to include in what will be committed)
#
#       .gitignore
#       build.gradle
#       gradle/
#       gradlew
#       gradlew.bat
#       src/
nothing added to commit but untracked files present (use "git add" to track)
</code></pre>

<p>これで必要なファイルだけが変更対象になりました。</p>

<h4>4. ステージに追加しコミット</h4>

<p>さくっとステージングしてコミット。</p>

<pre><code>F:\mod\TestMod&gt;git add .

F:\mod\TestMod&gt;git commit -m "initial commit"
[master (root-commit) 42591b1] initial commit
 10 files changed, 904 insertions(+)
 create mode 100644 .gitignore
 create mode 100644 build.gradle
 create mode 100644 gradle/wrapper/gradle-wrapper.jar
 create mode 100644 gradle/wrapper/gradle-wrapper.properties
 create mode 100644 gradlew
 create mode 100644 gradlew.bat
 create mode 100644 src/main/java/com/example/examplemod/ExampleMod.java
 create mode 100644 src/main/resources/mcmod.info
</code></pre>

<p>これで、最初のコミットが作成されました。</p>

<p>以降、上記ファイルが変更されたか、新しいファイルが追加された場合、差分などが簡単に追いかけれるようになります。</p>

<p>※サンプルModは、あとでどのみち削除するので、コミットする意味はないです。<code>git add ～</code>で対象を選んでステージングするか、一旦全部追加したあとに<code>git rm --cached ～</code>などでステージからサンプルModだけを削除し、コミットした方がいいかもしれません。</p>

<h2>3. EclipseでインポートしてMOD開発を行う</h2>

<p>ここからは、Eclipseでの作業です。</p>

<p>個人的にはこの方法は好みでないので、自前でワークスペースを用意し、起動構成などを作成するつもりですが、簡単な導入ってことで、今回はForgeについているワークスペースを使っていきます。</p>

<p>Eclipseを起動し、<code>F:\mod\TestMod\eclipse</code>フォルダーをワークスペースに指定します。</p>

<p><img src="/images/posts/2014/01/02/shortcut-of-making-workspace-for-mc-modding2/3-1_select_workspace.png" alt="ワークスペース選択ダイアログ" /></p>

<p>ワークスペース設定は新規作成になるため、これまで開発に使っていたワークスペース設定がある場合、諸々の再設定が必要となります。(エディタ背景を黒にしたりとか！)</p>

<p>一部の設定は、設定エクスポート→インポートで引き継いだり、パースペクティブの設定などワークスペース切り替え時にコピーし持ち越すことも出来ますが、できないものは手動で設定するか、ワークスペースの<code>.metadata/</code>フォルダー以下の設定ファイルを、手作業でコピーすることで引き継げます。ただしコピーは、設定値をみて必要なファイルのコピーや設定値のマージを行う必要があり、項目多数で説明のしようもないので、詳細は省略します。多分、よくわからなければ、一から再設定したほうが楽です。</p>

<p>Eclipseが起動したら、こんなかんじの表示です。ただし、ビューやツールバーなど、パースペクティブ内の状態は、個々の環境で異なるかと思います。</p>

<p><img src="/images/posts/2014/01/02/shortcut-of-making-workspace-for-mc-modding2/3-2_eclipse.png" alt="Forgeのワークスペースに切り替えた直後のEclipse" />
※この画像では、パースペクティブをJavaに切り替えてあります。</p>

<p>あとは、プロジェクト名"Minecraft"を、Mod名など任意の名前に変更し、ソースフォルダーの、サンプルModを参考に、自分独自のModを作成していくだけです。(サンプルModは不要になったら、パッケージごと削除しちゃてOK)</p>

<p>なお、ソースコード内に日本語を含める場合は、文字コードをUTF-8にするようにしてください。MS932で突き進みたい場合、ビルド時の文字コード問題を頑張って解決する必要があります。</p>

<p>また、おそらくFMLの修正漏れだと思いますが、Forge977付属のワークスペースを使うと、以下の不要なリンクフォルダーが生成されてしまいました。</p>

<ul>
<li>common</li>
<li>jars</li>
<li>lib</li>
</ul>


<p>これらのリンクフォルダーはに参照されず、リンク先も見つからない状態になっているため、削除してしまって問題はありません。(タブン)</p>

<h2>4. デバッグ起動してみる</h2>

<p>テスト実行は、Eclipse上の緑色の三角のボタン、またはデバッグ実行用の虫のマークのボタンから行えます。</p>

<p>なお、ForgeGradle対応後のForgeにも、マイクラを起動できるまでのワークスペース設定が付属しています。</p>

<p><img src="/images/posts/2014/01/02/shortcut-of-making-workspace-for-mc-modding2/4-1_launch-configuration.png" alt="Eclipseの起動構成" /></p>

<p>もちろん自前で起動構成の作成を行ってもいいのですが、その手順はあちこちで紹介されているみたいなので、省略します。また、ここで使用されている起動構成を真似れば、自分で作成することも出来ます。</p>

<h3>クライアントの起動</h3>

<p>上記からClientを選択するだけです。</p>

<p>参考までに、起動構成(上記画像の「実行の構成」または隣のボタンの「デバッグの構成」)のキャプチャーを紹介しておきます。</p>

<p><img src="/images/posts/2014/01/02/shortcut-of-making-workspace-for-mc-modding2/4-2_launch_client_mein.png" alt="実行の構成ウィンドウでClientの構成のメインタブ内容" /></p>

<p><img src="/images/posts/2014/01/02/shortcut-of-making-workspace-for-mc-modding2/4-3_launch_client_args.png" alt="実行の構成ウィンドウでClientの構成の引数タブ内容" /></p>

<p>なお、クライアントの生成するセーブデータなどのファイル群は、全てeclipseフォルダー直下にぶちまけられてしまいます。</p>

<p>2つ目の画像の一番した、「引数」タブの、「作業ディレクトリー」を任意の場所に修正することで、出力されるファイルの場所は変更できます。ただし、assetsへの参照ができなくなり、正しく動作しなくなる可能性があるため、おすすめはしません。</p>

<p>assetsもきちんと動かせば、タブンいけるんじゃないかな？(試してはないですが、<a href="https://github.com/HeisenBugDev/QuantumCraft/blob/develop/build.gradle">おそらくrunフォルダーに変更してそうなModのbuild.gradleを見た感じ</a>、build.gradleでassetDirを変えれば、いけそう…？)</p>

<p>なお、同じ名前の起動構成が複数表示されていますが、どちらも同じファイルを指しているので、気にしなくてOKです。これは、現状とプロジェクトの中にワークスペースが存在する、不思議な構成になってしまっているため、Eclipseがeclipse/.metadata/フォルダーの中にある、ローカルファイルに保管されている起動構成の設定ファイルの実態を、見つけてしまっているために起きているのだと思われます。</p>

<p>なので、ローカルファイル保管の起動構成を修正した場合、構成ウィンドウを開き直すと、ファイルを参照している起動構成も更新されます。</p>

<p>※ただし、逆は開きなおしても更新されていませんでした。起動構成を修正する場合は、「共通」タブの「保管」先が、ローカルファイルになっているものを修正したほうが、よさそうです。</p>

<p>※あと、自環境では起動中に何かエラーメッセージが出ていました。起動はでき、Modもロードされてるっぽいので、とりあえず忘れることにしました。</p>

<h3>サーバーの起動</h3>

<p>クライアントと同じですが、初回のみ、一度起動したあとに生成されたサーバー設定を変更し、起動し直す必要があります。</p>

<p>クライアントと同様に、サーバーの起動時にも、eclipseフォルダー以下に、サーバーの設定ファイル群がぶちまけられます。そのなかにあるserver.propertiesファイルで、<code>online-mode</code>の値が、デフォルト値の<code>true</code>(有効)になっているので、ここを<code>false</code>(無効)に設定してください。</p>

<p><code>online-mode</code>を無効にしたあと、Eclipseからサーバーを起動して、クライアントを実行し、<code>localhost</code>に接続を行うことでマルチプレイでのテストも行えます。</p>

<p>起動構成はこんなかんじになっています。</p>

<p><img src="/images/posts/2014/01/02/shortcut-of-making-workspace-for-mc-modding2/4-4_launch_server_main.png" alt="実行の構成ウィンドウでServerの構成のメインタブ内容" /></p>

<p><img src="/images/posts/2014/01/02/shortcut-of-making-workspace-for-mc-modding2/4-5_launch_server_args.png" alt="実行の構成ウィンドウでServerの構成の引数タブ内容" /></p>

<h1>リリースファイル作成</h1>

<ol>
<li>自分のMod用に、build.gradleファイルを編集する。</li>
<li>gradlewでビルドタスクを実行する。</li>
</ol>


<h2>build.gradleの編集</h2>

<p>サンプルModをそのまま残しているため、以下のように修正してみました。</p>

<pre><code>--- a/build.gradle
+++ b/build.gradle
@@ -18,8 +18,8 @@
 buildscript {
 apply plugin: 'forge'

 version = "1.0"
-group= "com.yourname.modid"
-archivesBaseName = "modid"
+group= "com.example.examplemod"
+archivesBaseName = "examplemod"

 minecraft {
     version = "1.7.2-10.12.0.977"
</code></pre>

<p>groupには通常Modのルートパッケージを、archivesBaseNameにはリリースファイルにつけるファイル名の接頭辞を設定します。</p>

<p>GroupIDの詳細については、<a href="http://maven.apache.org/guides/mini/guide-naming-conventions.html">build.gradleにコメントで記載されている、Mavenのガイド</a>や、Mavenについて説明しているサイトなどを参照してください。</p>

<h2>Gladleラッパーの設定を修正</h2>

<p>Javaのソースコードに日本語が含まれる場合、エンコード設定を変更する必要が有るかもしれません。デフォルトのエンコードは環境のデフォルトとなっており、Windows環境ではMS932(Shift_JIS互換のエンコード)になってしまいます。</p>

<h3>「エラー: この文字は、エンコーディングMS932にマップできません」</h3>

<p>このメッセージが出る場合、build.gradleに以下を追加すると、Javaのコンパイルがutf-8になり、エラーを回避できるようになります。ただし、JavaのソースコードがUTF-8でないといけません。</p>

<pre><code>[compileJava, compileTestJava].each{ it.options.encoding = 'UTF-8' }
</code></pre>

<h3>build.gradleに日本語が含まれてるとタスクが実行できなくなった</h3>

<p>日本語を含む場合、その前後行が読めなくなったりして、正しくタスクが実行できなくなったり、ビルドスクリプト自体が読めなくなったりします。</p>

<p>もし日本語を含めるのであれば、build.gradleをUTF-8で保存し、gradlew.batの<code>DEFAULT_JVM_OPTS</code>に、<code>-Dfile.encoding=UTF-8</code>を追加することで回避できます。</p>

<pre><code>diff --git a/gradlew.bat b/gradlew.bat
index aec9973..88f1f51 100644
--- a/gradlew.bat
+++ b/gradlew.bat
@@ -9,7 +9,7 @@
 if "%OS%"=="Windows_NT" setlocal

 @rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
-set DEFAULT_JVM_OPTS=
+set DEFAULT_JVM_OPTS=-Dfile.encoding=UTF-8

 set DIRNAME=%~dp0
 if "%DIRNAME%" == "" set DIRNAME=.
</code></pre>

<p>gradlewファイルは、Windows環境では影響ありませんが、リポジトリを公開する予定があるなら、あわせて修正しておくほうがいいかもしれません。</p>

<h2>ビルドタスクの実行</h2>

<p>コマンドプロンプトから、<code>build</code>タスクを実行してください。</p>

<pre><code>F:\mod\TestMod&gt;gradlew build
</code></pre>

<p>作成されたjarファイルは<code>build/libs</code>以下に、Jarファイルとして生成されます。(たぶん)</p>

<p>なお、2014/01/02の11時時点で、Forge977および982、ForgeGradle1.1のSNAPSHOTな環境で試してみましたが、再難読化(reobf)のタスクで失敗してビルドが成功しませんでした。ForgeやFGのIssue、Forgeのフォーラムでは解決済みという回答が見つかるのですが、上手く行きません。</p>

<p>後日ちゃんと動作したらこの部分は書きなおそうかとおもいます。</p>

<h1>Forgeの更新</h1>

<p>build.gradleを任意のテキストエディタ開いてください。</p>

<p>以下の箇所を、更新したいForgeのバージョンに修正します。</p>

<pre><code> minecraft {
     version = "1.7.2-10.12.0.982"
}
</code></pre>

<p>build.gradleを修正したら、再度<code>gradlew eclipse</code>を実行して、.classpathなどを更新し、最新の状態をプロジェクトに反映させてください。</p>

<p>これマジで神ですね。٩(๑╹ヮ╹)۶</p>

<hr />

<hr />

<p>( っ'ω'c)ﾞ</p>

<h1>あとがき</h1>

<p>また余計な情報足しすぎて長文になってしまった。ビルドこけるのにハマってめっちゃ時間もかかったし。成長ない氏…。</p>

<p>上記とは関係ない、めっちゃ余談だけど、環境構築中にEclipseプラグインLimyのライセンスがGPLになってるのに気づいた。EPLとGPLって非互換だから、プラグインをGPLで公開してもEclipseじゃ使えないんじゃ…って思ったけれど、<a href="http://nippondanji.blogspot.jp/2010/05/eclipsegpl.html">例外規定</a>ってのがあるみたい。</p>

<p>Limyがそうなのかはわからないけど、なるほどそういうのもあるのかーって勉強になったので、カテゴリ外だけどついでにメモ。(･ω･)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[version.properties メモ]]></title>
    <link href="http://blog.awairo.net/blog/2013/05/05/version-dot-properties-memo/"/>
    <updated>2013-05-05T21:11:00+09:00</updated>
    <id>http://blog.awairo.net/blog/2013/05/05/version-dot-properties-memo</id>
    <content type="html"><![CDATA[<p>意外と知られていないメタ情報ファイル。自動生成と相性よさげ。</p>

<!-- more -->


<h1>version.properties についてメモ</h1>

<p>なにこれって思う modder のほうが多いような気がします。少なくとも日本のminecraft-modderでこれを用意してる人、見た記憶ないです。</p>

<h2>@Mod アノテーションの version とバイバイできる version.properties</h2>

<p>バージョンアップのたびに @Mod に設定した version を書き直し忘れて、リコンパイル、再難読化をもっかいやるハメになったことある modder は、少なくないんじゃないかなと思います。つか私はほぼ毎回更新を忘れます。だいたい zip が出来上がってから思い出します。画面殴りそうです。</p>

<p>きちんとクラスをわけていくと、@Mod をつけたModクラスは初期化以外での出番は殆どなくなってしまうので、あまり更新する機会がありません。そのため見る機会自体が減っていきます。また、更新のたびにバージョンを書き換えるのは意外と面倒でわすれがちです。</p>

<p>そうすると、プログラマーは自動更新を考えるわけです。ですが、ハードコーディングされているアノテーションを自動更新するのは、わりと大変。</p>

<p>そんなときにこの version.properties です。外部ファイルからバージョン情報を設定してあげることで、コード修正を行わずにバージョンを設定できるようになります。</p>

<h2>つかいかた</h2>

<p>前置きが無駄に長くなりましたが、なんのことはありません。ファイル名は version.properties で mcmod.info と同様にzipのルートに配置すれば読んでくれます。</p>

<p>プロパティファイルなのでコメントなども使えます。他の情報を追加することもできます。ただし日本語など、マルチバイト文字を使用する場合には、native2ascii などできちんと変換しないといけません。まぁ Pleiades Eclipse 使ってるならプロパティファイル用のエディタで編集するので、このあたりを意識する機会はあんまりないですが。</p>

<p>このプロパティファイルで、@Mod アノテーションの version を設定できます。ただし優先度はアノテーションによる設定よりも低く、アノテーションでバージョンを設定している場合、無視されるようです。</p>

<p>例えば、modid が &ldquo;net.awairo.minecraft.tooltipplus"、バージョンが "2.3.0&rdquo; であれば、こんな感じ。modid のあとに &ldquo;version&rdquo; を繋げたキーで値にバージョンの値です。</p>

<pre><code>net.awairo.minecraft.tooltipplus.version = 2.3.0
</code></pre>

<p>これで @Mod(～, version = &ldquo;2.3.0&rdquo;) と同じ設定ができます。</p>

<p>ちなみに、コード上からこのプロパティファイルを取得したい場合は、FMLPreInitialiseEvent から取得出来ます。@PreInitのほうです。</p>

<p>バージョンアップの際にコードの修正が必要ないのと、プロパティファイルなので、自動生成が楽ちんなのがメリットですね。それに、自動生成するようにしておけばコミットする必要もなくなるので、コミットログに余計なファイルが混ざらないってメリットもあります。</p>

<p>IronChest なんかは自動生成用のスクリプトをもっていて、それを使ってリリース毎に自動生成しているみたいです。私も真似してます。</p>

<hr />

<p>自動更新についても、気が向いたらそのうち書くかもしれませんが、向いたらで。</p>

<p>Tooltip Plus のほうはだいたい自動化しちゃってますが、いろいろ余計なことしてていま見直してる最中なので、あんま参考にはならないとおもいます。</p>

<p>SpawnCheckerのほうは作り直しが進んでないので、いまだにRML時代のままのクラス構成です。mod_SpawnCheckerです。毎回 getVersion() の戻り値の変更を忘れては「アアァァッ」って叫んでます。RMLバイバイしてFMLの機能つかいたいです。</p>

<p>つか、このあたりは IronChest 見たほうが早いです。困ったときの IronChest。IronChset is God。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[@Mod アノテーションメモ]]></title>
    <link href="http://blog.awairo.net/blog/2013/05/05/mod-annotation-memo/"/>
    <updated>2013-05-05T20:00:00+09:00</updated>
    <id>http://blog.awairo.net/blog/2013/05/05/mod-annotation-memo</id>
    <content type="html"><![CDATA[<p>Modのメインクラスに付けるアノテーションの解説とか。実はmodid以外はなくてもいける。</p>

<!-- more -->


<h1>@Modアノテーションについて</h1>

<p>FMF645 現在、以下の項目が設定可能です。</p>

<pre><code>String modid
String name default ""
String version default ""
String dependencies default ""
boolean useMetadata default false
String acceptedMinecraftVersions default ""
String bukkitPlugin default ""
String modExclusionList default ""
String certificateFingerprint default ""
String modLanguage default "java"
String asmHookClass default ""
</code></pre>

<p>簡単な解説をしてみます。</p>

<h2>@Modアノテーション 各項目の簡単な解説</h2>

<p>詳しくは @Mod アノテーションの JavaDoc に書いてあるのでさわりだけ。過度な期待はうんたらかんたら。</p>

<p>解説というよりは自分用の備忘録。</p>

<h3>String modid</h3>

<p>mod の識別子です。</p>

<p>ユニーク値かつ必須。mcmod.info の解説でやったので省略。</p>

<h3>String name default &ldquo;&rdquo;</h3>

<p>mod の名前です。</p>

<p>mcmod.info の値より優先度は低いみたいです。mcmod.info用意しているなら不要だと思います。</p>

<h3>String version default &ldquo;&rdquo;</h3>

<p>modのバージョンです。</p>

<p>mcmod.info の値とは別の内部的なバージョン値です。</p>

<p>依存チェックで使うバージョンのことも考えると</p>

<pre><code>メジャー.マイナー.ビルドナンバー.リビジョン
</code></pre>

<p>みたいなような指定にするのが無難だと思います。</p>

<p>このバージョンは version.properties からも設定できますが、アノテーションで指定したほうが優先度が高いようで、アノテーションに設定しちゃうと version.properties は無視されます。</p>

<p>version.properties を使うなら設定不要です。</p>

<h3>String dependencies default &ldquo;&rdquo;</h3>

<p>依存関係指定用の文字列の設定用。</p>

<p>javadocにも書いてあるように、RML (ModLoader) の BaseMod の getPriorities() を参照してください、とのことです。具体的には、require-before:mod-name とかって感じで設定する奴です。触ったことある人はあまりいない気がしますが。</p>

<p>確か最近の RML の javadoc にはこのあたりの仕様が記載されていないので、さらにわけわかめです。古いRMLの javadoc を探せば見つかると思います。</p>

<p>…思いますが、そんなもの漁るくらいなら mcmod.info  なりメタデータなりで指定した方が楽だし、バージョンでのチェックもできるのでオススメ。この文字列のパース機能は、BaseMod互換にするために残ってる機能みたいなもんだと思います。</p>

<h3>boolean useMetadata default false</h3>

<p>MetaData クラスを使用する場合 true に設定します。</p>

<p>この値を true にすると、mcmod.info の依存関係のチェック用の情報をクリアします。mcmod.info で useDependencyInformation を true にしても無視されます。</p>

<p>この設定は、Mod.Metadata アノテーションを利用するための設定なんじゃないかなーと思います。mcmod.infoは外部ファイルなので改変される可能性があるから、そのための制約なのではないかと。ちゃんと調べてないですが。</p>

<h3>String acceptedMinecraftVersions default &ldquo;&rdquo;</h3>

<p>許可するMinecraftのバージョンを設定します。</p>

<p>通常設定する必要はないです。が、あえて過去ver専用のmodなどを作製する場合は、こいつを指定しておくといいかもしれないです。バージョン指定の書式はきちんと把握仕切れていないので、調べた時にでも書こうと思います。たぶん。</p>

<p>簡単に具体例を上げておくと</p>

<pre><code>acceptedMinecraftVersions = "[1.5,)"
</code></pre>

<p>これで1.5.x 以降のマイクラでのみ実行できる、って指定になります。たぶん。</p>

<p>別にこれ、FML固有の書式ではなかったと思うので、検索すれば見つかると思います。Apache commons 関連のドキュメントだかで見た記憶があるような、ないような…。</p>

<h3>String bukkitPlugin default &ldquo;&rdquo;</h3>

<p>BukkitプラグインからロードされるためのプラグインのFQDNを設定します。</p>

<p>…だと思いますがちゃんと調べてないので省略。必要になったら調べるかもしれないですが、当面は必要ないかなーと…。</p>

<h3>String modExclusionList default &ldquo;&rdquo;</h3>

<p>カンマ区切りでmodidを記述し、他modとの共存可否の設定を行えます。</p>

<p>ようは拒否リストです。「貴方とは一緒に導入できないの」ってなるような設定をします。</p>

<p>競合するからこのmodとは一緒に使えないよ、とか、(作者の意向として、)このModとは共存させたくないよ、ってModがある場合などに利用します。競合することがわかってる場合に事前に回避したり、modが想定している難易度を崩してしまうような別のmodが導入されることを認めない、みたいな感じに使うものだと思います。</p>

<p>許可不許可を決める記号(+/&ndash;)を付与した modid をカンマ区切りで複数指定できます。許可する mod は modid の先頭に「+」、許可しない mod は先頭に「-」を指定します。modid の代わりに、すべての Mod を意味するワイルドカード「*」と、forge を意味するエイリアス「f」が使えます。何も指定しない場合は、全て許可「+*」と同じです。</p>

<h3>String certificateFingerprint default &ldquo;&rdquo;</h3>

<p>署名された jar を要求するようにするための設定。全て小文字で : が削除されたSHA-1の文字列。</p>

<p>デフォルトでは署名された jar を要求しません。</p>

<p>これはちょっとややこしいので省略。必要な人は自前で調べてください。</p>

<p>mod を jar ファイルとしてリリースして META-INF/ を同梱して署名を用意し、クラスファイルの破損や改変がないことをチェックしたりとか、そういうやつです(たぶん)。</p>

<p>本当はこの手のものは、開発者側がちゃんと理解して使用していくべきなんでしょうが、いろいろと敷居高い感がいなめない。それに、ユーザーもそういうの意識できる人って少ないですしね。</p>

<h3>String modLanguage default &ldquo;java&rdquo;</h3>

<p>mod を作製する際に用いられた言語の設定。</p>

<p>日本語とかそういう「言語」ではなく、「プログラミング言語」です。"java" 以外に &ldquo;scala&rdquo; が指定できます。バイトコード変換時に必要になってくるんだと思います。</p>

<p>まぁ scala で mod 作る好きものな人は説明しなくてもわかるはずなので省略。</p>

<h3>String asmHookClass default &ldquo;&rdquo;</h3>

<p>この mod からロードされるクラスに ASM を適用するための、フッククラスの FQDN を指定します。</p>

<p>たぶん簡易的な coremod 設定みたいな感じです。そういうことやるコア層に説明は不要だろうって事で省略。</p>

<h2>結局@Modには何を指定すればいいの？</h2>

<p>modid は必須です。それ以外は全部オプションです。つまりはそういうことです。</p>

<p>共存させたくない mod がある場合や、マイクラのバージョンを限定したい場合を除けば、普通は modid だけ指定すればOKでしょう。他の値のうちユーザーに伝える情報として重要になるものは mcmod.info と version.properties で指定ができるため、わざわざソースコード内ハードコードしておく必要はないとおもいます。</p>

<hr />

<p>しかし改めてみてみると、すごい充実してる。FMLヤバい。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mcmod.info の要素と機能についてのメモ]]></title>
    <link href="http://blog.awairo.net/blog/2013/05/05/mcmod-dot-info/"/>
    <updated>2013-05-05T19:24:00+09:00</updated>
    <id>http://blog.awairo.net/blog/2013/05/05/mcmod-dot-info</id>
    <content type="html"><![CDATA[<p>各項目の説明とか。</p>

<!-- more -->


<h1>mcmod.infoの要素と機能についてのメモ</h1>

<p>FML645現在、mcmod.info からは以下の項目がロードされていました。</p>

<pre><code>[
{
  "modid": "net.awairo.minecraft.xxx",
  "name": "awa sample mod",
  "description": "this mod is sample.",
  "url": "http://alalwww.github.io/",
  "updateUrl": "http://alalwww.github.io/",
  "logoFile": "logo.png",
  "version": "1.0.0",
  "credits": "By alalwww",
  "parent": "",
  "authors": ["alalwww"],
  "requiredMods": [],
  "dependencies": [],
  "dependants": [],
  "useDependencyInformation": "true"
}
]
</code></pre>

<h2>mcmod.info 各項目の簡単な解説</h2>

<p>mcmod.info は単純な json ファイルです。jsonの仕様については他文献などを漁ってください。javascriptのオブジェクトと似た書式なので、触ったことある人ならすぐに分かると思います。</p>

<p>値に指定できるのは「文字列」値と「配列」値の2種があり、項目ごとに決まっています。</p>

<h3>modid</h3>

<ul>
<li>文字列</li>
</ul>


<p>mod の識別子を設定します。</p>

<p>@Modアノテーションの modId で指定したものと一致させる必要があります。</p>

<p>id は必ずユニーク値でないといけないため、mod 固有のパッケージ名を指定するのがオススメ。</p>

<p>蛇足ですが、javaにおけるパッケージ名は、ユニークであることが保証されているドメイン名を利用するのが一般的です。とはいえ、最近は「どうせ重複することなんかねーよ！うちのドメイン長いから冗長になるんだよボケェ！」って界隈も増えてきているので、必ずドメインを使わないといけないわけではありません。</p>

<p>ドメインを使いたいけど持っていないって場合は GitHub Pages のURLを利用する手や、DDNSをとってそれを使う手もあります。modの名前と同じでも大丈夫ですが、世界中で常に一意であることが保証されているドメインと違い、重複する可能性は残ります。とはいえ現実的に考えて、minecraft の userid + mod名 とかなら重複する可能性はないと思いますので、そういうのでもOK。</p>

<p>さらに蛇足ですが、FMLがmodの情報を出力する際に指定しているロガーの名前も、modidが使用されています。そのため、logging.properties でmod毎にログ出力の制御なんかも可能みたいです。試してないけど。</p>

<h3>name</h3>

<ul>
<li>文字列</li>
</ul>


<p>mod の名称を設定します。</p>

<p>こちらは重複してもOKな値ですが、紛らわしいのでなるべく他と被らない「ステキ」で「ナイス」な名前を指定しましょう。ここで指定した名前が mod 一覧に表示されます。@Modアノテーションで指定した名前よりも優先されるようです。日本語も使えるようですが、英数のみのほうが無難じゃないかなと思います。</p>

<h3>description</h3>

<ul>
<li>文字列</li>
</ul>


<p>modの概要の説明文を設定します。</p>

<p>英文のほうが無難だとは思いますが、現在は日本語も大丈夫みたいです(昔はダメだった気がします)。Mod一覧でModを選択した際に、一番したに表示されます。長い文章も改行されて表示されます。</p>

<h3>url</h3>

<ul>
<li>文字列</li>
</ul>


<p>mod のサイトを示すURLです。ここ見れば最新版DLできるよ的なURLを設定しておきましょう。</p>

<h3>updateUrl</h3>

<ul>
<li>文字列</li>
</ul>


<p>mod のアップデートサイトを示すURLです。現在のところmod一覧に表示される以外では使われていません。</p>

<p>今後自動更新などに対応する目的で用意されているものかもしれません。(FMLのissueでそういった話題が出てた気がします。)</p>

<h3>logoFile</h3>

<ul>
<li>文字列</li>
</ul>


<p>mod一覧で表示されるmodのロゴファイルパスを設定します。</p>

<p>mod の zip ファイルのルートからのパスを指定します。対応している画像フォーマットは不明ですが、png では表示できるのを確認しています。画像サイズの制限があるのかも不明ですが、他modに合わせて 200 x 72 とするのが無難ではないかと思います。</p>

<h3>version</h3>

<ul>
<li>文字列</li>
</ul>


<p>modのバージョンを設定します。(多分表示のみで使われるバージョン。)</p>

<p>このバージョンは mod のメタデータに持つバージョンで、@Mod アノテーションで指定されるバージョン(version.propertiesからも指定可能)とは別のものとして扱われています。また、依存関係チェックの際のバージョンとしては使用されない値のようです。</p>

<p>mod一覧でにVersionはこのように表示されています。</p>

<pre><code>Version: [mcmod.infoで設定したバージョン] ([Modアノテーションまたはversion.propertiesで設定したバージョン])
</code></pre>

<p>先に表示されているのが、mcmod.info で指定したバージョンです。括弧書きのほうが @Mod アノテーションで設定されているバージョンとなります。おそらくユーザーライクな表示用バージョンと、依存関係のチェックなどでも使用する内部的なバージョンを分けるためのに分けてあるのだと思います。</p>

<p>なお、先にも記載していますが、@Modアノテーションで設定するバージョン値は version.properties ファイルから指定することができます。別記事で書きます。</p>

<h3>credits</h3>

<ul>
<li>文字列</li>
</ul>


<p>クレジットを設定します。</p>

<p>なんとなく馴染みが薄い感がありますが、個人開発のmodであれば個人名など、グループで開発しているのであれば、グループ名などを指定するような感じです。</p>

<p>アニメのEDの最後とかに表示される「○○製作委員会」とか、そういう感じです。</p>

<h3>parent</h3>

<ul>
<li>文字列</li>
</ul>


<p>親 mod のidを設定します。</p>

<p>他mod の add-on を作成する場合などに利用するものです。</p>

<p>ここで親modを指定した場合、mod一覧には表示されないようになり、親として指定したmodの情報に、子 mod 名として表示されるようになります。</p>

<h3>authors</h3>

<ul>
<li>配列</li>
</ul>


<p>modの作者の一覧を設定します。</p>

<p>配列で指定します。</p>

<h3>requiredMods</h3>

<ul>
<li>配列</li>
</ul>


<p>必須 mod の一覧を設定します。</p>

<p>useDependencyInformation を有効に指定しないと意味がありません。</p>

<p>「modid」または「modid@バージョン」という書式(別記事で解説予定)の文字列で複数指定ができます。ただし、ここで指定したバージョンはFML645現在チェックには使用されません。しかし、必須チェックが下記の依存関係チェックよりも先に行われ、エラーメッセージにもバージョンが表示されるようになります。そのため、必須modのバージョンも指定したいのであれば、ここにもバージョンを指定しておくほうが無難です。</p>

<h3>dependencies</h3>

<ul>
<li>配列</li>
</ul>


<p>自身より先に初期化が行われる必要がある mod の一覧を設定します。</p>

<p>useDependencyInformation を有効に指定しないと意味がありません。</p>

<p>ここで指定したmodは、自身より先に初期化が行われます。「modid」または「modid@バージョン」という書式(別記事で解説予定)の文字列で複数指定ができます。依存するModのバージョンによる条件の指定が有効です。</p>

<h3>dependants</h3>

<ul>
<li>配列</li>
</ul>


<p>自身より後に初期化が行われる必要がある mod の一覧を設定します。</p>

<p>useDependencyInformation を有効に指定しないと意味がありません。</p>

<p>ここで指定したmodは、自身より<del>先</del>後に初期化が行われます。「modid」または「modid@バージョン」という書式(別記事で解説予定)の文字列で複数指定ができます。依存するModのバージョンによる条件の指定が有効です。</p>

<h3>useDependencyInformation</h3>

<ul>
<li>文字列</li>
</ul>


<p>mcmod.info に書かれた依存関係の情報をmodの読み込み時に使用するかの設定です。</p>

<p>文字列 &ldquo;true&rdquo; を指定した場合のみ有効になります。それ以外の値が指定されたか、何も指定されていない場合、mcmod.infoの情報は実行時に全てクリアされます。つまり、この値をtrueにしないと依存関係チェックは行われません。ただし、@Mod の useMetadata より優先度が低いため、あちらが true に設定された場合は mcmod.info の情報はクリアされます。</p>

<hr />

<p>20 June, 2013 誤記を修正(つやぴん氏thx)</p>
]]></content>
  </entry>
  
</feed>
