<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: GitHub | AwAlog]]></title>
  <link href="http://blog.awairo.net/blog/categories/github/atom.xml" rel="self"/>
  <link href="http://blog.awairo.net/"/>
  <updated>2014-01-02T02:32:06+09:00</updated>
  <id>http://blog.awairo.net/</id>
  <author>
    <name><![CDATA[alalwww]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[GitHub Pagesで独自ドメインを使う方法]]></title>
    <link href="http://blog.awairo.net/blog/2013/12/14/custom-domain-for-gh-pages/"/>
    <updated>2013-12-14T14:23:00+09:00</updated>
    <id>http://blog.awairo.net/blog/2013/12/14/custom-domain-for-gh-pages</id>
    <content type="html"><![CDATA[<p>ドメインの延長更新のついでに、<a href="http://pages.github.com/">GitHub Pages</a>のカスタムドメインの設定したのでメモ。</p>

<!--more-->


<p><a href="https://help.github.com/articles/setting-up-a-custom-domain-with-pages">公式に書いてある事</a>をそのまま実践するだけのコピペ記事。自分が<a href="http://www.value-domain.com/">VALUE-DOMAIN</a>使ってるので、そこで管理している人には少しだけ役に立てるかもしれない。</p>

<h1>目的</h1>

<ol>
<li><code>http://blog.awairo.net/</code>にアクセスしたら、このblogが表示される。</li>
<li><code>http://alalwww.github.io/</code>にアクセスしたら、<code>http://blog.awairo.net/</code>にリダイレクトされる。</li>
</ol>


<h1>手順</h1>

<p>前提として以下が必要。</p>

<ul>
<li>自分で管理している(DNSの設定がいじれる)独自ドメインを持っている。</li>
<li>GitHub-Pagesを利用しており、公開してるサイトがある。</li>
</ul>


<p>DNSでGH-Pagesに飛ばす設定と、GH-Pagesから独自ドメインにリダイレクトするための設定を行う。設定は順不同だけど、GitHub側の設定が先に反映されると、まだGH-Pagesが表示出来ない状態の独自ドメインにリダイレクトされるようになるので、サービス停止ができないような状況なら、DNSの設定が終わってからやったほうがいいのかもしれない。ただ、どちらも反映に多少の時間がかかるので、しばらく(10分程度)の間アクセスが止まる事に、特に問題がないなら、平行作業しちゃっても問題ない。</p>

<h2>DNS側</h2>

<ol>
<li><code>blog.awairo.net</code>の別名として、<code>alalwww.github.io</code>を設定するための、CNAMEレコードを追加する。</li>
</ol>


<p>だけ。</p>

<p>具体的には、DNSの設定で以下を追加する。</p>

<pre><code>blog.awairo.net. IN CNAME alalwww.github.io.
</code></pre>

<p>検索してると、<a href="http://blog.livedoor.jp/techblog/archives/65340720.html" title="livedoor Techブログ : CNAMEの間違った使い方">CNAMEを設定したDNSでは他の設定が無視される(カモシレナイ)</a>って感じの記事を見つけちゃって、上手くいくのか不安だったけど、とりあえずVALUE-DOMAINではできた。というか、一般的なDNSサーバーなら他の設定の無視もしないと思うので、多分大丈夫だと思うけれど、一応気に留めておこう。( っ'ω'c)</p>

<h3>実際にやったこと</h3>

<p>VALUE-DOMAINのサイトから、専用の書式でCNAMEレコードを追加する。</p>

<ol>
<li>ログイン</li>
<li>DNSレコード/URL転送の変更</li>
<li>ドメイン選択</li>
<li><p>設定フィールドの一番上に、以下を追加。</p>

<p> cname blog alalwww.github.io.</p></li>
</ol>


<p>一番上というか、ワイルドカードで全部xreaのWebサーバーに向けてるAレコードがあるので、それより上に設定追加でうまくいった。一番最後のピリオド(<code>.</code>)は忘れやすいので要注意。</p>

<p>設定したら保存するボタンを押して完了。反映までしばらくかかると思うので(たぶん)、カフェオレをすすりながら待つ。</p>

<h3>確認</h3>

<p>コマンドプロンプトを開いて、<code>nslookup</code>コマンドで自宅のルーターに対し問い合わせて確認。</p>

<pre><code>Microsoft Windows [Version 6.1.7601]
Copyright (c) 2009 Microsoft Corporation.  All rights reserved.

C:\Users\username&gt; nslookup
既定のサーバー:  (ルーター名)
Address:  (ルーターのIP)

&gt;
</code></pre>

<p>反映されてない状態だと以下のような回答。向けてるxreaのウェブサーバーのIPが返ってくる。</p>

<pre><code>&gt; blog.awairo.net
サーバー:  (ルーター名)
Address:  (ルーターのIP)

権限のない回答:
名前:    blog.awairo.net
Address:  203.189.105.98 ← メインで使ってるxreaのサーバーのIP
</code></pre>

<p>しばらくするとこんな感じに変わった。</p>

<pre><code>&gt; blog.awairo.net
サーバー:  (ルーター名)
Address:  (ルーターのIP)

権限のない回答:
名前:    github.map.fastly.net
Address:  103.245.222.133
Aliases:  blog.awairo.net
          alalwww.github.io
</code></pre>

<p>できたっぽい。</p>

<h2>GitHub側</h2>

<ol>
<li>リダイレクト先のURL(<a href="http://blog.awairo.net/">http://blog.awairo.net/</a>)を書いた、「CNAME」というファイル名のテキストファイルを配置する。</li>
</ol>


<p>だけ。</p>

<h3>実際にやったこと</h3>

<p>OctopressのリポジトリをおいてるLinuxサーバーで、以下の作業。</p>

<pre><code>$ cd octopress
$ tee &gt; source/CNAME (リダイレクトしないと標準出力にもでてきてちょっとうざいので)
blog.awairo.net
(改行したあとctrl+Cを押して終了)
$ cat source/CNAME (確認)
blog.awairo.net
$ rake gen_deploy (Push)
</code></pre>

<p>名前が可愛いので<code>tee</code>コマンド好きです。Webにある解説じゃあまり見かけないけれど。ほら、ちょっとした内容のテキストファイル作るのによく見かける、おさわり(<code>touch</code>)してからエディタで開いて編集とかっての、ちょっとめんどくさいし。( っ'ω'c)</p>

<p>デプロイが終わったら、<a href="https://github.com/alalwww/alalwww.github.io">GitHubのリポジトリ</a>を確認してCNAMEファイルがちゃんとデプロイされてたら問題なし。</p>

<h3>確認</h3>

<p>Chromeで<code>F12</code>を押して開発用ツールを開いて、<code>Network</code>タブを選んで、<code>http://alalwww.github.io/</code>にアクセスし、<code>http://blog.awairo.net/</code>にリダイレクトされてる事を確認。
<img src="/images/posts/2013/12/14/custom-domain-for-gh-pages/chrome_devtools.png" alt="ChromeのDeveloperToolsのキャプチャー画像" /></p>

<p>できてるできてる。</p>

<h1>参考にさせて頂いたサイト</h1>

<ul>
<li><a href="http://bekkou68.hatenablog.com/entry/2013/01/05/210902">GitHub Pages に独自のトップレベルドメイン（TLD）を割り当てる &ndash; bekkou68の日記</a></li>
<li><a href="http://setup.value-domain.com/index.php?p=websrv">Easy Setup for VALUE DOMAIN Users</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopressカスタマイズ2]]></title>
    <link href="http://blog.awairo.net/blog/2013/02/24/blog-customization2/"/>
    <updated>2013-02-24T11:31:00+09:00</updated>
    <id>http://blog.awairo.net/blog/2013/02/24/blog-customization2</id>
    <content type="html"><![CDATA[<p>主にテーマの改造など。</p>

<!-- more -->


<h1>色々設定変更してみた2</h1>

<h2>サイトの言語を日本語に変更</h2>

<p>HTMLのlang属性が英語 (en) になっているのを日本語 (ja) に変更する。</p>

<p>octopress/source/_includes/head.html</p>

<pre><code>&lt;html class="no-js" lang="en"&gt;
</code></pre>

<p>を</p>

<pre><code>&lt;html class="no-js" lang="ja"&gt;
</code></pre>

<p>に変えるだけ。</p>

<p>日本語しか書かないならやっておいていいと思います。英語ページになってると、Chromeさんの翻訳するかの確認とか出てきたりして地味にうざったかったです。</p>

<h2>スタイル変更など</h2>

<p>octpress/sass/ 以下の各 *.scss ファイルを修正するだけ。sass については、ぐぐればもっと詳しいサイトが出てくると思うので詳細は割愛します。</p>

<p>デフォルトのテーマを使っているので、以下はデフォルトのテーマについてのみ。だけどおそらく他のテーマでもおおよそ同じはず。</p>

<h3>読み込み順</h3>

<p>最初に読み込まれるのは screen.scss ファイルで、このファイルを基点に、他の scss ファイルが読み込まれる。この screen.scss に定義されている読み込み順序はカスタマイズする上で重要になる。</p>

<p>scss ファイルには、多くの値に変更できるデフォルト値が定義されている。そして、custom/ 以下の scss ファイルでデフォルト値を上書きできるようになっている。そのため、殆どのスタイル設定変更は custom/ 以下のファイルを修正するだけで行える。</p>

<p>_styles.scss は独自スタイル設定を追加するためのファイルで、最初は何も記載されていない。見た目を変更するようなスタイルをここで定義できる。読み込み順序は一番最後なので、優先度を変えたりして、他かのスタイル設定を上書きしたりする事が可能になる。</p>

<p>何処のスタイルが修正されるかが分かり辛いものが多いのが難点。私は、Chromeの開発者ツール(F12キー)を見ながら、要素に適用されているスタイルを追っかけ、スタイルセレクタを確認して、scssから探し出して…とやりましたが、ちょっとめんどくさかったです…。</p>

<h3></h3>

<p>とりあえず、以下のように設定してみました。</p>

<p>_colors.scss</p>

<pre><code>$header-bg: #520;
</code></pre>

<p>_fonts.scss</p>

<pre><code>$sans: "MeiryoKe_PGothic", "メイリオ", sans-serif;
$serif: "MeiryoKe_PGothic", "メイリオ", sans-serif;
$mono: "MeiryoKe_Gothic", monospace;
$heading-font-family: "MeiryoKe_PGothic", "メイリオ", sans-serif;
$header-title-font-family: "Tekton Pro Ext", "MeiryoKe_PGothic", "メイリオ", sans-serif;
$header-subtitle-font-family: "MeiryoKe_PGothic", "メイリオ", sans-serif;
</code></pre>

<p>_layout.scss</p>

<pre><code>$header-font-size: 1em;
$header-padding-top: 1.5em;
$header-padding-bottom: 1.5em;
$indented-lists: true;
</code></pre>

<p>_styles.scss</p>

<pre><code>.entry-title {
    padding-left: 5px;
    padding-bottom: 3px;
    border-left: 15px solid #520;
    border-bottom: 3px solid #520;
}
.blog-index &gt; article &gt; header p.meta {
    margin-left: -15px;
    a {
        font-size: 60%;
    }
}
.entry-content h1 {
    margin-left: 5px;
    margin-right: 5px;
    border-top   : 2px dotted #ccc;
    border-bottom: 2px dotted #ccc;
}
</code></pre>

<p>MeiryoKe勢です。デフォメイリオの文字間落ち着かない、他OSのデフォフォントを華麗にスルーしちゃってますが、その手のOS使いは自分で解決してるはずなので気にしないことに。どうせ確認する環境ないし。</p>

<hr />

<p>他にもなにか変えたとこあった気もするけど、忘れちゃったのでここまで。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopressカスタマイズ1]]></title>
    <link href="http://blog.awairo.net/blog/2013/02/19/blog-customization1/"/>
    <updated>2013-02-19T03:47:00+09:00</updated>
    <id>http://blog.awairo.net/blog/2013/02/19/blog-customization1</id>
    <content type="html"><![CDATA[<p>はてブボタン追加やsharingの表示位置の追加、サイドメニューのカスタマイズ、続きを読むボタン表示、設定の見直しなどについてのメモ(1)。</p>

<!-- more -->


<h1>色々設定変更してみた</h1>

<h2>はてブボタン追加</h2>

<p>はてなは使うことないけど、使ってる人は多いので媚売っとこってことで。</p>

<p>source/_includes/post/sharing.html
<div><script src='https://gist.github.com/4979540.js'></script>
<noscript><pre><code>&lt;div class=&quot;sharing&quot;&gt;
  {% if site.twitter_tweet_button %}
  &lt;a href=&quot;http://twitter.com/share&quot; class=&quot;twitter-share-button&quot; data-url=&quot;{{ site.url }}{{ page.url }}&quot; data-via=&quot;{{ site.twitter_user }}&quot; data-counturl=&quot;{{ site.url }}{{ page.url }}&quot; &gt;Tweet&lt;/a&gt;
  {% endif %}
  {% if site.hatena_bookmark_button %}
  &lt;a href=&quot;http://b.hatena.ne.jp/entry/{{ site.url }}{{ page.url }}&quot; class=&quot;hatena-bookmark-button&quot; data-hatena-bookmark-layout=&quot;simple-balloon&quot; title=&quot;このエントリーをはてなブックマークに追加&quot;&gt;&lt;img src=&quot;http://b.st-hatena.com/images/entry-button/button-only.gif&quot; alt=&quot;このエントリーをはてなブックマークに追加&quot; width=&quot;20&quot; height=&quot;20&quot; style=&quot;border: none;&quot; /&gt;&lt;/a&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;http://b.st-hatena.com/js/bookmark_button.js&quot; charset=&quot;utf-8&quot; async=&quot;async&quot;&gt;&lt;/script&gt;
  {% endif %}
  {% if site.google_plus_one %}
  &lt;div class=&quot;g-plusone&quot; data-size=&quot;{{ site.google_plus_one_size }}&quot;&gt;&lt;/div&gt;
  {% endif %}
  {% if site.facebook_like %}
  &lt;div class=&quot;fb-like&quot; data-send=&quot;true&quot; data-width=&quot;400&quot; data-show-faces=&quot;false&quot;&gt;&lt;/div&gt;
  {% endif %}
&lt;/div&gt;
</code></pre></noscript></div>
</p>

<p>5～7の部分がそれ。後述のコンフィグファイルで表示制御も追加してます。</p>

<h2>記事タイトルの直下に sharing を追加</h2>

<p>スクロールせずに押したいかもしれないので。</p>

<p>source/_includes/article.html
<div><script src='https://gist.github.com/4979575.js'></script>
<noscript><pre><code>{% unless page.no_header %}
  &lt;header&gt;
    {% if index %}
      &lt;h1 class=&quot;entry-title&quot;&gt;&lt;a href=&quot;{{ root_url }}{{ post.url }}&quot;&gt;{% if site.titlecase %}{{ post.title | titlecase }}{% else %}{{ post.title }}{% endif %}&lt;/a&gt;&lt;/h1&gt;
    {% else %}
      &lt;h1 class=&quot;entry-title&quot;&gt;{% if site.titlecase %}{{ page.title | titlecase }}{% else %}{{ page.title }}{% endif %}&lt;/h1&gt;
    {% include post/sharing.html %}
    {% endif %}
    {% unless page.meta == false %}
      &lt;p class=&quot;meta&quot;&gt;
        {% include post/date.html %}{{ time }}
        {% if site.disqus_short_name and page.comments != false and post.comments != false and site.disqus_show_comment_count == true %}
         | &lt;a href=&quot;{% if index %}{{ root_url }}{{ post.url }}{% endif %}#disqus_thread&quot;&gt;Comments&lt;/a&gt;
        {% endif %}
      &lt;/p&gt;
    {% endunless %}
  &lt;/header&gt;
{% endunless %}
{% if index %}
  &lt;div class=&quot;entry-content&quot;&gt;{{ content | excerpt }}&lt;/div&gt;
  {% capture excerpted %}{{ content | has_excerpt }}{% endcapture %}
  {% if excerpted == 'true' %}
    &lt;footer&gt;
      &lt;a rel=&quot;full-article&quot; href=&quot;{{ root_url }}{{ post.url }}&quot;&gt;{{ site.excerpt_link }}&lt;/a&gt;
    &lt;/footer&gt;
  {% endif %}
{% else %}
&lt;div class=&quot;entry-content&quot;&gt;{{ content }}&lt;/div&gt;
{% endif %}
</code></pre></noscript></div>
</p>

<p><del>8行目に読み込み処理追加しただけ。</del></p>

<p>(2012/02/24 追記) <code>{% endif %}</code> の後に <code>{% include post/sharing.html %}</code> を続けると、indexページにも表示されてしまうので、7行目に追加に修正しました。</p>

<h2>「続きを読む &rarr;」の表示方法</h2>

<p>excerpt_linkで設定した、「続きを読みたい場合わっふるわっふる」を追加するのは、記事中にHTMLコメントを書くだけ。</p>

<pre><code>　：
index にも表示される記事

&lt;!-- more --&gt;

個別ページに遷移しないと表示されない記事
　：
</code></pre>

<p>設定とか要らない。</p>

<h2>右メニューのカスタマイズ</h2>

<ul>
<li>AboutMeを追加</li>
</ul>


<p><a href="https://github.com/dharFr/octo-about-me-from-twitter" title="dharFr/octo-about-me-from-twitter · GitHub">これ</a>を流用。READMEにはcloneしてくる手順が書いてあるが、直接ファイルを開いて中身をコピペしてもOK。
ツイッターのフォローをこっちに追加したので、Latest Tweets のフォローボタンは削除。</p>

<p><div><script src='https://gist.github.com/4979398.js'></script>
<noscript><pre><code>{% if site.twitter_user %}
&lt;section&gt;
  &lt;h1&gt;About Me&lt;/h1&gt;
  &lt;div id=&quot;twitter-profile&quot; style=&quot;margin-top:0.5em;&quot;&gt;
    &lt;p&gt;
      &lt;strong&gt;{{site.author}}&lt;/strong&gt; 
      (&lt;a href=&quot;http://twitter.com/{{site.twitter_user}}&quot;&gt;@{{ site.twitter_user }}&lt;/a&gt;)
    &lt;/p&gt;
    &lt;p&gt;Getting profile from Twitter...&lt;/p&gt;
  &lt;/div&gt;
  &lt;script type=&quot;text/javascript&quot;&gt;
    $.domReady(function(){
        var container = $('#twitter-profile'),
            user = &quot;{{site.twitter_user}}&quot;;
        
        function parseTwLinks(s) {
          var twUrl = &quot;http://www.twitter.com/&quot;
          s = s.replace(/ (@([\w]+))/g, function(match, p1, p2) {
              return &quot; &lt;a href='&quot;+twUrl+p2+&quot;'&gt;&quot;+p1+&quot;&lt;/a&gt;&quot;
          }).replace(/ (#([\w]+))/g, function(match, p1, p2) {
              return &quot; &lt;a href='&quot;+twUrl+&quot;#!/search?q=%23&quot;+p2+&quot;'&gt;&quot;+p1+&quot;&lt;/a&gt;&quot;
          })
          return s
        }

        $.ajax({
            url: &quot;http://api.twitter.com/1/users/show.json?include_entities=false&amp;screen_name=&quot;+user+&quot;&amp;callback=?&quot;
          , type: 'jsonp'
          , error: function (err) { $('#twitter-profile').addClass('error');  }
          , success: function(data) {
              container.html('&lt;img class=&quot;left&quot; src=&quot;http://api.twitter.com/1/users/profile_image/'+user+'.json?size=bigger&quot; alt=&quot;@'+user+'&quot;&gt;&lt;div&gt;&lt;strong&gt;'+data.name+'&lt;/strong&gt; (&lt;a href=&quot;http://twitter.com/'+user+'&quot;&gt;@'+user+'&lt;/a&gt;)&lt;/div&gt;&lt;div style=&quot;font-size:80%&quot;&gt;'+data.location+'&lt;/div&gt;&lt;div&gt;&lt;a href=&quot;http://twitter.com/{{ site.twitter_user }}&quot; class=&quot;twitter-follow-button&quot; data-show-count=&quot;{{ site.twitter_show_follower_count }}&quot;&gt;Follow @{{ site.twitter_user }}&lt;/a&gt;&lt;/div&gt;&lt;p style=&quot;clear:both;font-size:80%&quot;&gt;'+parseTwLinks(data.description)+'&lt;/p&gt;');
            }
        })
      });
  &lt;/script&gt;
&lt;/section&gt;
{% endif %}
</code></pre></noscript></div>

作成したファイルは source/_includes/custom/asides/aboutmetwitter.html に配置して使った。</p>

<h2>_config.yml で変更したもの</h2>

<pre><code># 続きを読む場合のリンクメッセージ
excerpt_link: "続きを読む &amp;rarr;"

# 右メニューに aboutmetwitter.html 追加
default_asides: [custom/asides/aboutmetwitter.html, asides/recent_posts.html...

* Disqus Comments を有効化
disqus_short_name: awalog
disqus_show_comment_count: true

# Google Analytics 有効化
google_analytics_tracking_id: UA-xxxxxxxx-x

# ツイートボタンの表示
twitter_tweet_button: true

# フォローボタン非表示
twitter_follow_button: false

# Google+1ボタン表示
google_plus_one: true

# Facebook Like
facebook_like: true
</code></pre>

<p>Disqus Comments は、Twitterアカウントで認証して short name を取得。Google Analytics も手持ちのgmail用のアカウントで取得。</p>

<p>あと、変えることはない気がするけど</p>

<pre><code># hatena bookmark
hatena_bookmark_button: true
</code></pre>

<p>も足してみた。</p>

<hr />

<p>とりあえず、これくらいかな。</p>

<p>あうあう寝なきゃ。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GitHub + Octopress 試してみた]]></title>
    <link href="http://blog.awairo.net/blog/2013/02/17/tried-github-octopress/"/>
    <updated>2013-02-17T08:26:00+09:00</updated>
    <id>http://blog.awairo.net/blog/2013/02/17/tried-github-octopress</id>
    <content type="html"><![CDATA[<p>参考にしたサイト、設定、使い方などをメモ。</p>

<!-- more -->


<h1>なにこれ</h1>

<p><a href="https://github.com">GitHub</a>で<a href="http://octopress.org">Octpress</a>つかってblogっぽいことできるらしいので試してみた。</p>

<p>GitHub はここ見るような人なら知ってると思うので割愛。</p>

<p>Octpressは技術屋が好きそうな感じのCUIベースで静的HTMLを作成する、ブログっぽいウェブサイトの生成ツール的なものだという認識してます。なんか間違ってる気もしますが、とりあえずそういう使い方しかしてないので気にしないことにします。ruby製みたいなので、そこらを触れる人は本体も好きに弄れそう。</p>

<p>で、そのタコプレスがなんか GitHub と連携させれて、HitHubのユーザーIDのサブドメインも使わして貰えるらしいので、ちょっとやってみました。</p>

<p>手順は何番煎じだよって感じなので割愛。(めんどくさい)</p>

<p>なので、使用感とかそっちのほうを少し書いてってみます。</p>

<h2>参考にしたサイトとか</h2>

<ul>
<li><a href="http://tokkonopapa.github.com/blog/2011/12/30/octopress-on-github-and-bitbucket/" title="Octopressのインストールから運用管理まで - T.I.D.">Octopressのインストールから運用管理まで &ndash; T.I.D.</a></li>
<li><a href="http://blog.glidenote.com/blog/2011/11/07/install-octopress-on-github/" title="GithubとOctopressでモダンな技術系ブログを作ってみる - Glide Note - グライドノート">GithubとOctopressでモダンな技術系ブログを作ってみる &ndash; Glide Note &ndash; グライドノート</a></li>
<li><a href="http://mattn.kaoriya.net/software/lang/ruby/20111017205717.htm" title="Big Sky :: githubとjekyllとoctopressで作る簡単でモダンなブログ">Big Sky :: githubとjekyllとoctopressで作る簡単でモダンなブログ</a></li>
</ul>


<p>リポジトリの統合とかはとりあえず読み飛ばしてるけど、とりあえず動いたのでよし。</p>

<p>今度…いつか本気出す…。</p>

<h2>ちなみに環境はこんな感じ</h2>

<p>普段使ってるPCはWin7で、Rubyとかも基本使ったりしてないので未インストール、ってことでサーバー機のVM上で動かしてるSSHサーバーに一式インストールして環境構築しました。</p>

<p>サーバーのOSはCentOS5で、rubyのバージョンとか面倒なこともありましたが、参考にさせてもらったサイトでそのあたり既に解説されてたので特に苦労もなくさくっと環境できあがり。
しかし、記事書くのに TeraTerm で繋いでそこで編集して…ってのは、Vimビームも口からLispもまだ出せそうにはない、にわかのWin勢にはちょっと辛いので、メインPCのほうから記事を編集できる環境を用意してみました。</p>

<p>…といっても、特に手の込んだことはなにもなく、WinSCP で接続してーの、サクラエディタで編集してーの、TeraTermからデプロイを行いーの、っていう実にひねりのない環境。なので割愛。(めんどくさい)</p>

<p>WinSCPに触ったのはかなり久しぶりだけど、なんかダブルクリックで任意のエディタでファイル開けて、保存したら自動でアップロードしてくれる、なかなか使いやすい機能ついててとても便利になってました(前からあったっけ…？)。これだとエクスプローラからファイル操作してるのと殆ど変わらない感じ。</p>

<p>ブラウザから入力とかせずとも、使い慣れたエディタだけでサクサク書けるってのはやっぱいいね。基本ブラウザから書き込むことになる某所のトピックの編集では何度やらかしたことか…。</p>

<h2>設定とか</h2>

<p>とりあえずは _config.yml を弄るくらい。</p>

<p>日時フォーマットとかちょっと微妙かなー、なんて思ってたら、_config.yml にめっちゃ書いてありました。説明書を読まないっぷりがやばい。反省。</p>

<p>GitHub のリポジトリ表示とか、最近のツイート表示なんかも、デフォで連携プラグインが入ってるみたいで、上記設定ファイルを弄るだけで使えます。</p>

<p>他にも、FaceBook のいいねボタン、Google+のなんかのボタン(よく知らない)、<a href="http://disqus.com">Disqus</a> を利用したコメント欄とかもつけれるみたいだけど、アカウント準備面倒だったのでそのうち本気出すってことで先延ばし。</p>

<p>どうせコメントとかつかないので、コメ欄あっても寂しいだけじゃんか｡ﾟ(ﾟ∩´﹏`∩ﾟ)ﾟ｡</p>

<p>もし何かあったら、twitter のほうにでもリプ投げ付けてください。</p>

<h2>テーマとかないの</h2>

<p>あるっちゃあるけど<a href="https://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes" title="3rd Party Octopress Themes · imathis/octopress Wiki">公式にあるの</a>はめっちゃ少ないみたい。</p>

<p>いくつか試してみたけど、基本的に日本語向きじゃないし、どうもしっくり来なくてデフォの classic に戻しました。基本的には他のテーマを参考にしたりしつつ、自分の好みに合わせていじってくって方向になりそう。</p>

<p>とはいえセンス的なものが私に未実装なので、いつになるかは…。</p>

<p>探せばもすこし公式にないテーマも見つかる気はするけど、言語の壁が厚くて英語戦闘力2には難易度高そう…。</p>

<h2>記事の投稿とか</h2>

<p>一通りやることやったら、テキストファイルを編集するだけなのでCUIに抵抗がない人だとかなり楽そう。</p>

<p>カレントを octpress に移動して</p>

<pre><code>$ rake new_post["URL用の英語タイトル"]
</code></pre>

<p>こんな感じでコマンド実行すると、ポスト本文のファイルが <code>octpress/source/_posts/</code> 以下に生成される。
あと、生成されるファイルには生成日とかも入ってて、別に「タイトル」である必要はなさそうなので、その火の中で一意になる連番とかそういうのでも問題はないハズ。</p>

<p>あとは生成されたテキストファイルをゴリゴリ編集していくだけで完成。
書式は Markdown。これは、HTML簡単に理解してて、Wiki編集とかやる人だったら割と親しみやすい書式だと思う。基本使うのは見出しと本文とリスト、くらい。<a href="http://blog.2310.net/archives/6" title="blog::2310 » Markdown文法の全訳">このあたり</a>みればすぐ覚えれるくらい簡単。</p>

<p>ってか Markdown は某フォーラムでも使いたいね…。URLの参照すごい便利。</p>

<p>書いた内容の確認は</p>

<pre><code>$ rake preview
</code></pre>

<p>で、ポート4000でプレビュー用のHTTPサーバーが起動するので、<code>http://サーバーIP:4000/</code> でブラウザから直接動かせるサイトにアクセスしながら確認できる。HTMLはリクエスト毎に変更チェックして生成してるみたいで、ブラウザ更新するだけで編集結果が即反映されるから確認がすごい楽ちん。サクラエディタで書いて保存→(WinSCPが勝手にアップロードしてくれる)→ブラウザ更新ボタンを押せば最新プレビュー。やばい。ローカルで静的HTMLファイルを編集してるような感じで作業できるのはすごくいい。</p>

<p>あとは、プレビューサーバーを停止するときは、書いてあるとおりコンソールで<code>Ctrl+C</code>押すだけ。</p>

<p>特に問題なければ、生成してデプロイ(push)しておしまい。</p>

<pre><code>$ rake generate
$ rake deploy
</code></pre>

<p>2つもコマンド打つのがめんどくさかったら、</p>

<pre><code>$ rake gen_deploy
</code></pre>

<p>でやれば生成してpushまでやってくれる。</p>

<p>他にやったことは、ファイル生成のコマンド入力する作業の手抜きのために WinSCP のコマンドで <code>rake new_post['!?title?!']</code> ってやって、新規ポスト作成するように設定追加したくらい。これで記事を起こすとこまではコマンドライン操作なしでできるようになりました。他のもWinSCPからやれないかと画策してみたけど、プレビュー鯖起動とかデプロイは、応答待ちになったり鍵パスが対話式だったりして、WinSCPから直接やるのは難しそうなので、TeraTerm 経由で操作するって感じに落ち着きました。</p>

<h1>てことでblogはじまめした</h1>

<p>環境作って試したりしてみたのは少し前だけど、このまま放置しててもなんかもったいないので、メモ帳代わりに細々となにかしら書いてみようかと思い、記事おこしてみました。</p>

<p>調べたり覚えたりしたことを忘れないようにちゃんと書き残す習慣を身につけれるようになりたい。
そして出来る子アッピルしていきたい。</p>

<p>はてなダイヤリーを1記事で蒸発した経歴の持ち主なので、どうなることやらですが。</p>

<h2>方向性とか</h2>

<p>とりあえず、マイクラModding周りのこととか、お仕事で触ったりしたものとかのメモを残していく方向で。
見た目まわりは改めて少しずついじっていくつもり。いきたい。とりあえずは先延ばし。</p>

<hr />

<p>って寝落ちなど挟みつつ色々弄ってたらもう8時半じゃん…だめじゃん…。</p>
]]></content>
  </entry>
  
</feed>
